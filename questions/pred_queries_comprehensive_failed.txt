PARSE FAILED: 'by'
Predicted: SELECT Name, Country, Age FROM singer BY Age DESC
Gold: SELECT name ,  country ,  age FROM singer ORDER BY age DESC
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name, Country, Age FROM singer BY Age DESC
Gold: SELECT name ,  country ,  age FROM singer ORDER BY age DESC
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 'country'
Predicted: SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer Country = 'France'
Gold: SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 'country'
Predicted: SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer Country = 'France'
Gold: SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 'age'
Predicted: SELECT Song_Name, Song_release_year FROM singer Age = (SELECT MIN(Age) FROM singer)
Gold: SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 'age'
Predicted: SELECT Song_Name, Song_release_year FROM singer Age = (SELECT MIN(Age) FROM singer)
Gold: SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 'age'
Predicted: SELECT DISTINCT Country FROM singer Age > 20
Gold: SELECT DISTINCT country FROM singer WHERE age  >  20
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 'age'
Predicted: SELECT DISTINCT Country FROM singer Age > 20
Gold: SELECT DISTINCT country FROM singer WHERE age  >  20
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Country, COUNT(*) FROM singer BY Country
Gold: SELECT country ,  count(*) FROM singer GROUP BY country
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Country, COUNT(*) FROM singer BY Country
Gold: SELECT country ,  count(*) FROM singer GROUP BY country
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 'age'
Predicted: SELECT Song_Name FROM singer Age > (SELECT AVG(Age) FROM singer)
Gold: SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 'age'
Predicted: SELECT Song_Name FROM singer Age > (SELECT AVG(Age) FROM singer)
Gold: SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 'capacity'
Predicted: SELECT Location, Name FROM stadium Capacity BETWEEN 5000 AND 10000
Gold: SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 'capacity'
Predicted: SELECT Location, Name FROM stadium Capacity BETWEEN 5000 AND 10000
Gold: SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name, Capacity FROM stadium BY Average DESC LIMIT 1
Gold: SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name, Capacity FROM stadium BY Average DESC LIMIT 1
Gold: SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 'year'
Predicted: SELECT COUNT(*) FROM concert Year = 2014 OR Year = 2015
Gold: SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 'year'
Predicted: SELECT COUNT(*) FROM concert Year = 2014 OR Year = 2015
Gold: SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: '('
Predicted: SELECT stadium.Name, stadium.Capacity FROM stadium JOIN (SELECT Stadium_ID, COUNT(*) FROM concert Year > 2013 GROUP BY Stadium_ID ORDER BY COUNT(*) DESC LIMIT 1) AS T2 ON stadium.Stadium_ID = T2.Stadium_ID
Gold: select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Year FROM concert BY Year ORDER BY COUNT(*) DESC LIMIT 1
Gold: SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Year FROM concert BY Year ORDER BY COUNT(concert_ID) DESC LIMIT 1
Gold: SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT stadium.Name FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.concert_ID IS NULL
Gold: SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT stadium.Name FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.concert_ID IS NULL
Gold: SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 'age'
Predicted: SELECT Country FROM singer Age > 40 INTERSECT SELECT Country FROM singer Age < 30
Gold: SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 'stadium_id'
Predicted: SELECT Name FROM stadium Stadium_ID NOT IN (SELECT Stadium_ID FROM concert Year = 2014)
Gold: SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 'stadium_id'
Predicted: SELECT Name FROM stadium Stadium_ID NOT IN (SELECT Stadium_ID FROM concert Year = 2014)
Gold: SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 'song_name'
Predicted: SELECT Name, Country FROM singer Song_Name LIKE '%Hey%'
Gold: SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 'song_name'
Predicted: SELECT Name, Country FROM singer Song_Name LIKE '%Hey%'
Gold: SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 
Predicted: SELECT stadium.Name, stadium.Location FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year IN (2014, 2015) GROUP BY stadium.Stadium_ID, stadium.Name, stadium.Location HAVING COUNT(DISTINCT concert.Year) = 2
Gold: SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 'stadium_id'
Predicted: SELECT COUNT(*) FROM concert Stadium_ID = (SELECT Stadium_ID FROM stadium BY Capacity DESC LIMIT 1)
Gold: select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 'stadium_id'
Predicted: SELECT COUNT(*) FROM concert Stadium_ID = (SELECT Stadium_ID FROM stadium BY Capacity DESC LIMIT 1)
Gold: select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 'weight'
Predicted: SELECT COUNT(*) FROM Pets weight > 10
Gold: SELECT count(*) FROM pets WHERE weight  >  10
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 'weight'
Predicted: SELECT COUNT(*) FROM Pets weight > 10
Gold: SELECT count(*) FROM pets WHERE weight  >  10
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 'pettype'
Predicted: SELECT weight FROM Pets PetType = 'dog' ORDER BY pet_age ASC LIMIT 1
Gold: SELECT weight FROM pets ORDER BY pet_age LIMIT 1
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 'pettype'
Predicted: SELECT weight FROM Pets PetType = 'dog' ORDER BY pet_age ASC LIMIT 1
Gold: SELECT weight FROM pets ORDER BY pet_age LIMIT 1
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT PetType, MAX(weight) FROM Pets BY PetType
Gold: SELECT max(weight) ,  petType FROM pets GROUP BY petType
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT PetType, MAX(weight) FROM Pets BY PetType
Gold: SELECT max(weight) ,  petType FROM pets GROUP BY petType
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 
Predicted: SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('cat', 'dog') GROUP BY Student.StuID, Student.Fname HAVING COUNT(DISTINCT Pets.PetType) = 2
Gold: select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 
Predicted: SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('cat', 'dog') GROUP BY Student.StuID, Student.Fname HAVING COUNT(DISTINCT Pets.PetType) = 2
Gold: SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 'stuid'
Predicted: SELECT Major, Age FROM Student StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat')
Gold: SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 'stuid'
Predicted: SELECT StuID FROM Student StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat')
Gold: SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 'stuid'
Predicted: SELECT StuID FROM Student StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat')
Gold: SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT PetType, weight FROM Pets BY pet_age ASC LIMIT 1
Gold: SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT PetType, weight FROM Pets BY pet_age ASC LIMIT 1
Gold: SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 'pet_age'
Predicted: SELECT PetID, weight FROM Pets pet_age > 1
Gold: SELECT petid ,  weight FROM pets WHERE pet_age  >  1
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 'pet_age'
Predicted: SELECT PetID, weight FROM Pets pet_age > 1
Gold: SELECT petid ,  weight FROM pets WHERE pet_age  >  1
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT PetType, AVG(pet_age), MAX(pet_age) FROM Pets BY PetType
Gold: SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT PetType, AVG(pet_age), MAX(pet_age) FROM Pets BY PetType
Gold: SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT PetType, AVG(weight) FROM Pets BY PetType
Gold: SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT PetType, AVG(weight) FROM Pets BY PetType
Gold: SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT StuID, COUNT(PetID) FROM Has_Pet BY StuID
Gold: SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 'stuid'
Predicted: SELECT AVG(Age) FROM Student StuID NOT IN (SELECT StuID FROM Has_Pet)
Gold: select avg(age) from student where stuid not in (select stuid from has_pet)
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 'stuid'
Predicted: SELECT AVG(Age) FROM Student StuID NOT IN (SELECT StuID FROM Has_Pet)
Gold: select avg(age) from student where stuid not in (select stuid from has_pet)
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Country FROM car_makers BY Country ORDER BY COUNT(Maker) DESC LIMIT 1
Gold: SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'country'
Predicted: SELECT COUNT(*) FROM car_makers Country = 'france'
Gold: SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'country'
Predicted: SELECT COUNT(*) FROM car_makers Country = 'France'
Gold: SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'cylinders'
Predicted: SELECT AVG(MPG) FROM cars_data Cylinders = 4
Gold: SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'cylinders'
Predicted: SELECT AVG(MPG) FROM cars_data Cylinders = 4
Gold: SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'cylinders'
Predicted: SELECT MIN(Weight) FROM cars_data Cylinders = 8 AND Year = 1974
Gold: select min(weight) from cars_data where cylinders  =  8 and year  =  1974
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'cylinders'
Predicted: SELECT MIN(Weight) FROM cars_data Cylinders = 8 AND Year = 1974
Gold: select min(weight) from cars_data where cylinders  =  8 and year  =  1974
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'horsepower'
Predicted: SELECT COUNT(*) FROM cars_data Horsepower > 150
Gold: SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'horsepower'
Predicted: SELECT COUNT(*) FROM cars_data Horsepower > 150
Gold: SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Year, AVG(Weight) FROM cars_data BY Year
Gold: SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Year, AVG(Weight), AVG(Year) FROM cars_data BY Year
Gold: SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'cylinders'
Predicted: SELECT car_names.Make, cars_data.Horsepower FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Cylinders = 3 AND cars_data.Horsepower = (SELECT MAX(Horsepower) FROM cars_data Cylinders = 3)
Gold: SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'year'
Predicted: SELECT AVG(Horsepower) FROM cars_data Year < 1980
Gold: SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'year'
Predicted: SELECT AVG(Horsepower) FROM cars_data Year < 1980
Gold: select avg(horsepower) from cars_data where year  <  1980;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Cylinders, MAX(Accelerate) FROM cars_data BY Cylinders
Gold: SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Cylinders, MAX(Accelerate) FROM cars_data BY Cylinders
Gold: SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Model FROM car_names BY Model ORDER BY COUNT(DISTINCT Make) DESC LIMIT 1
Gold: SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Model FROM car_names BY Model ORDER BY COUNT(DISTINCT Make) DESC LIMIT 1
Gold: SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'cylinders'
Predicted: SELECT COUNT(*) FROM cars_data Cylinders > 4
Gold: SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'cylinders'
Predicted: SELECT COUNT(*) FROM cars_data Cylinders > 4
Gold: SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'year'
Predicted: SELECT COUNT(*) FROM cars_data Year = 1980
Gold: SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'year'
Predicted: SELECT COUNT(*) FROM cars_data Year = 1980
Gold: SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'weight'
Predicted: SELECT Year FROM cars_data Weight BETWEEN 3000 AND 4000
Gold: select distinct year from cars_data where weight between 3000 and 4000;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'weight'
Predicted: SELECT Year FROM cars_data Weight < 4000 INTERSECT SELECT Year FROM cars_data Weight > 3000
Gold: select distinct year from cars_data where weight between 3000 and 4000;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Horsepower FROM cars_data BY Accelerate DESC LIMIT 1
Gold: SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'accelerate'
Predicted: SELECT Horsepower FROM cars_data Accelerate = (SELECT MAX(Accelerate) FROM cars_data)
Gold: SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'accelerate'
Predicted: SELECT COUNT(*) FROM cars_data Accelerate > (SELECT Accelerate FROM cars_data Horsepower = (SELECT MAX(Horsepower) FROM cars_data) ORDER BY Accelerate DESC LIMIT 1)
Gold: SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'accelerate'
Predicted: SELECT COUNT(*) FROM cars_data Accelerate > (SELECT Accelerate FROM cars_data BY Horsepower DESC LIMIT 1)
Gold: SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT COUNT(Country) FROM (SELECT Country FROM car_makers BY Country HAVING COUNT(Id) > 2)
Gold: select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'cylinders'
Predicted: SELECT COUNT(*) FROM cars_data Cylinders > 6
Gold: SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'cylinders'
Predicted: SELECT COUNT(*) FROM cars_data Cylinders > 6
Gold: SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'cylinders'
Predicted: SELECT MAX(MPG) FROM cars_data Cylinders = 8 OR Year < 1980
Gold: select max(mpg) from cars_data where cylinders  =  8 or year  <  1980
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'cylinders'
Predicted: SELECT MAX(MPG) FROM cars_data Cylinders = 8 OR Year < 1980
Gold: select max(mpg) from cars_data where cylinders  =  8 or year  <  1980
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'countryname'
Predicted: SELECT CountryName FROM countries CountryName NOT IN (SELECT Country FROM car_makers)
Gold: SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT countries.CountryName FROM countries LEFT JOIN car_makers ON countries.CountryName = car_makers.Country WHERE car_makers.Country IS NULL
Gold: SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'select' not found
Predicted: WITH MakersWithAtLeast2Models AS ( SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Maker = model_list.Maker GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(model_list.ModelId) >= 2 ) SELECT Id, Maker FROM MakersWithAtLeast2Models ( SELECT COUNT(*) FROM MakersWithAtLeast2Models ) > 3
Gold: select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: '('
Predicted: SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN (SELECT Maker FROM model_list BY Maker HAVING COUNT(ModelId) >= 2) AS T2 ON car_makers.Maker = T2.Maker JOIN (SELECT Make FROM car_names BY Make HAVING COUNT(MakeId) > 3) AS T3 ON car_makers.Maker = T3.Make
Gold: SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'airline'
Predicted: SELECT Country FROM airlines Airline = 'JetBlue Airways'
Gold: SELECT Country FROM AIRLINES WHERE Airline  =  "JetBlue Airways"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'airline'
Predicted: SELECT Country FROM airlines Airline = 'Jetblue Airways'
Gold: SELECT Country FROM AIRLINES WHERE Airline  =  "JetBlue Airways"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'airline'
Predicted: SELECT Abbreviation FROM airlines Airline = 'JetBlue Airways'
Gold: SELECT Abbreviation FROM AIRLINES WHERE Airline  =  "JetBlue Airways"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'airline'
Predicted: SELECT Abbreviation FROM airlines Airline = 'Jetblue Airways'
Gold: SELECT Abbreviation FROM AIRLINES WHERE Airline  =  "JetBlue Airways"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'country'
Predicted: SELECT Airline, Abbreviation FROM airlines Country = 'USA'
Gold: SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  "USA"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'country'
Predicted: SELECT Airline, Abbreviation FROM airlines Country = 'USA'
Gold: SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  "USA"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'city'
Predicted: SELECT AirportCode, AirportName FROM airports City = 'Anthony'
Gold: SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  "Anthony"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'city'
Predicted: SELECT AirportCode, AirportName FROM airports City = 'Anthony'
Gold: SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  "Anthony"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'abbreviation'
Predicted: SELECT Airline FROM airlines Abbreviation = 'UAL'
Gold: SELECT Airline FROM AIRLINES WHERE Abbreviation  =  "UAL"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'abbreviation'
Predicted: SELECT Airline FROM airlines Abbreviation = 'UAL'
Gold: SELECT Airline FROM AIRLINES WHERE Abbreviation  =  "UAL"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'country'
Predicted: SELECT COUNT(*) FROM airlines Country = 'USA'
Gold: SELECT count(*) FROM AIRLINES WHERE Country  =  "USA"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'country'
Predicted: SELECT COUNT(*) FROM airlines Country = 'USA'
Gold: SELECT count(*) FROM AIRLINES WHERE Country  =  "USA"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'airportname'
Predicted: SELECT City, Country FROM airports AirportName = 'Alton airport'
Gold: SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  "Alton"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'airportname'
Predicted: SELECT City, Country FROM airports AirportName = 'Alton airport'
Gold: SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  "Alton"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'airportcode'
Predicted: SELECT AirportName FROM airports AirportCode = 'AKO'
Gold: SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  "AKO"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'airportcode'
Predicted: SELECT AirportName FROM airports AirportCode = 'AKO'
Gold: SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  "AKO"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'city'
Predicted: SELECT AirportName FROM airports City = 'Aberdeen'
Gold: SELECT AirportName FROM AIRPORTS WHERE City = "Aberdeen"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'city'
Predicted: SELECT AirportName FROM airports City = 'Aberdeen'
Gold: SELECT AirportName FROM AIRPORTS WHERE City = "Aberdeen"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'sourceairport'
Predicted: SELECT COUNT(*) FROM flights SourceAirport = 'APG'
Gold: SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  "APG"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'sourceairport'
Predicted: SELECT COUNT(*) FROM flights SourceAirport = 'APG'
Gold: SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  "APG"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'destairport'
Predicted: SELECT COUNT(*) FROM flights DestAirport = 'ATO'
Gold: SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  "ATO"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'destairport'
Predicted: SELECT COUNT(*) FROM flights DestAirport = 'ATO'
Gold: SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  "ATO"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'airline'
Predicted: SELECT COUNT(*) FROM flights Airline = 'JetBlue Airways'
Gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = "JetBlue Airways"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'airline'
Predicted: SELECT COUNT(*) FROM flights Airline = 'Jetblue Airways'
Gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = "JetBlue Airways"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'airline'
Predicted: SELECT COUNT(*) FROM flights Airline = 'United Airlines' AND SourceAirport = 'AHD'
Gold: SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.SourceAirport  =  "AHD"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT SourceAirport FROM flights BY SourceAirport ORDER BY COUNT(*) DESC LIMIT 1
Gold: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT AirportCode FROM ( SELECT SourceAirport AS AirportCode, COUNT(*) AS flight_count FROM flights BY SourceAirport UNION ALL SELECT DestAirport AS AirportCode, COUNT(*) AS flight_count FROM flights BY DestAirport ) AS airport_flight_counts GROUP BY AirportCode ORDER BY SUM(flight_count) DESC LIMIT 1
Gold: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'all'
Predicted: SELECT AirportCode FROM (SELECT SourceAirport AS AirportCode FROM flights ALL SELECT DestAirport AS AirportCode FROM flights) AS all_airports GROUP BY AirportCode ORDER BY COUNT(*) ASC LIMIT 1
Gold: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'all'
Predicted: SELECT SourceAirport FROM ( SELECT SourceAirport FROM flights ALL SELECT DestAirport FROM flights ) GROUP BY SourceAirport ORDER BY COUNT(*) ASC LIMIT 1
Gold: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'sourceairport'
Predicted: SELECT Airline FROM flights SourceAirport = 'APG' INTERSECT SELECT Airline FROM flights SourceAirport = 'CVO'
Gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 
Predicted: SELECT airlines.Airline FROM airlines JOIN flights ON airlines.Abbreviation = flights.Airline WHERE flights.SourceAirport IN ('APG', 'CVO') GROUP BY airlines.Airline HAVING COUNT(DISTINCT flights.SourceAirport) = 2
Gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'sourceairport'
Predicted: SELECT DISTINCT Airline FROM flights SourceAirport = 'CVO' AND Airline NOT IN (SELECT Airline FROM flights SourceAirport = 'APG')
Gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'sourceairport'
Predicted: SELECT DISTINCT Airline FROM flights SourceAirport = 'CVO' AND Airline NOT IN (SELECT Airline FROM flights SourceAirport = 'APG')
Gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Airline FROM flights BY Airline HAVING COUNT(FlightNo) >= 10
Gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'airline'
Predicted: SELECT FlightNo FROM flights Airline = 'United Airlines'
Gold: SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  "United Airlines"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'sourceairport'
Predicted: SELECT FlightNo FROM flights SourceAirport = 'APG'
Gold: SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  "APG"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'sourceairport'
Predicted: SELECT FlightNo FROM flights SourceAirport = 'APG'
Gold: SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  "APG"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'destairport'
Predicted: SELECT FlightNo FROM flights DestAirport = 'APG'
Gold: SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  "APG"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'destairport'
Predicted: SELECT FlightNo FROM flights DestAirport = 'APG'
Gold: SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  "APG"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'airportcode'
Predicted: SELECT AirportName FROM airports AirportCode NOT IN (SELECT SourceAirport FROM flights) AND AirportCode NOT IN (SELECT DestAirport FROM flights)
Gold: SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'not'
Predicted: SELECT AirportCode FROM airports NOT EXISTS (SELECT 1 FROM flights airports.AirportCode = flights.SourceAirport) AND NOT EXISTS (SELECT 1 FROM flights airports.AirportCode = flights.DestAirport)
Gold: SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name, Age FROM employee BY Age ASC
Gold: SELECT name FROM employee ORDER BY age
Database: employee_hire_evaluation
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name FROM employee BY Age ASC
Gold: SELECT name FROM employee ORDER BY age
Database: employee_hire_evaluation
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT City, COUNT(*) FROM employee BY City
Gold: SELECT count(*) ,  city FROM employee GROUP BY city
Database: employee_hire_evaluation
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT City, COUNT(*) FROM employee BY City
Gold: SELECT count(*) ,  city FROM employee GROUP BY city
Database: employee_hire_evaluation
--------------------------------------------------------------------------------
PARSE FAILED: 'age'
Predicted: SELECT City FROM employee Age < 30 GROUP BY City HAVING COUNT(*) > 1
Gold: SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1
Database: employee_hire_evaluation
--------------------------------------------------------------------------------
PARSE FAILED: 'age'
Predicted: SELECT City FROM employee Age < 30 GROUP BY City HAVING COUNT(*) > 1
Gold: SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1
Database: employee_hire_evaluation
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Location, COUNT(*) FROM shop BY Location
Gold: SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION
Database: employee_hire_evaluation
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Location, COUNT(*) FROM shop BY Location
Gold: SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION
Database: employee_hire_evaluation
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Manager_name, District FROM shop BY Number_products DESC LIMIT 1
Gold: SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1
Database: employee_hire_evaluation
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Manager_name, District FROM shop BY Number_products DESC LIMIT 1
Gold: SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1
Database: employee_hire_evaluation
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name, Location, District FROM shop BY Number_products DESC
Gold: SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC
Database: employee_hire_evaluation
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name, Location, District FROM shop BY Number_products DESC
Gold: SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC
Database: employee_hire_evaluation
--------------------------------------------------------------------------------
PARSE FAILED: 'number_products'
Predicted: SELECT Name FROM shop Number_products > (SELECT AVG(Number_products) FROM shop)
Gold: SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)
Database: employee_hire_evaluation
--------------------------------------------------------------------------------
PARSE FAILED: 'number_products'
Predicted: SELECT Name FROM shop Number_products > (SELECT AVG(Number_products) FROM shop)
Gold: SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)
Database: employee_hire_evaluation
--------------------------------------------------------------------------------
PARSE FAILED: 'employee_id'
Predicted: SELECT Name FROM employee Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
Gold: SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
Database: employee_hire_evaluation
--------------------------------------------------------------------------------
PARSE FAILED: 'employee_id'
Predicted: SELECT Name FROM employee Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
Gold: SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
Database: employee_hire_evaluation
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT shop.Name FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID WHERE hiring.Employee_ID IS NULL
Gold: SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)
Database: employee_hire_evaluation
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT shop.Name FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID WHERE hiring.Employee_ID IS NULL
Gold: SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)
Database: employee_hire_evaluation
--------------------------------------------------------------------------------
PARSE FAILED: 'number_products'
Predicted: SELECT District FROM shop Number_products < 3000 INTERSECT SELECT District FROM shop Number_products > 10000
Gold: SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000
Database: employee_hire_evaluation
--------------------------------------------------------------------------------
PARSE FAILED: 'number_products'
Predicted: SELECT District FROM shop Number_products < 3000 INTERSECT SELECT District FROM shop Number_products > 10000
Gold: SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000
Database: employee_hire_evaluation
--------------------------------------------------------------------------------
PARSE FAILED: 'document_description'
Predicted: SELECT Document_Name, Template_ID FROM Documents Document_Description LIKE '%w%'
Gold: SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE "%w%"
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'document_description'
Predicted: SELECT Document_Name, Template_ID FROM Documents Document_Description LIKE '%w%'
Gold: SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE "%w%"
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'document_name'
Predicted: SELECT Document_ID, Template_ID, Document_Description FROM Documents Document_Name = 'Robbin CV'
Gold: SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  "Robbin CV"
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'document_name'
Predicted: SELECT Document_ID, Template_ID, Document_Description FROM Documents Document_Name = 'Robbin CV'
Gold: SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  "Robbin CV"
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Template_ID, COUNT(*) FROM Documents BY Template_ID
Gold: SELECT template_id ,  count(*) FROM Documents GROUP BY template_id
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Template_ID FROM Documents BY Template_ID HAVING COUNT(Document_ID) > 1
Gold: SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Template_ID FROM Documents BY Template_ID HAVING COUNT(*) > 1
Gold: SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT Templates.Template_ID FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Template_ID IS NULL
Gold: SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'template_id'
Predicted: SELECT Template_ID FROM Templates Template_ID NOT IN (SELECT Template_ID FROM Documents)
Gold: SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'template_type_code'
Predicted: SELECT Template_ID FROM Templates Template_Type_Code = 'PP' OR Template_Type_Code = 'PPT'
Gold: SELECT template_id FROM Templates WHERE template_type_code  =  "PP" OR template_type_code  =  "PPT"
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'template_type_code'
Predicted: SELECT Template_ID FROM Templates Template_Type_Code IN ('PP', 'PPT')
Gold: SELECT template_id FROM Templates WHERE template_type_code  =  "PP" OR template_type_code  =  "PPT"
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'template_type_code'
Predicted: SELECT COUNT(*) FROM Templates Template_Type_Code = 'CV'
Gold: SELECT count(*) FROM Templates WHERE template_type_code  =  "CV"
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'version_number'
Predicted: SELECT Version_Number, Template_Type_Code FROM Templates Version_Number > 5
Gold: SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'version_number'
Predicted: SELECT Version_Number, Template_Type_Code FROM Templates Version_Number > 5
Gold: SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID) FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code
Gold: SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Template_Type_Code FROM Templates BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1
Gold: SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Template_Type_Code FROM Templates BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1
Gold: SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code HAVING COUNT(Templates.Template_ID) < 3
Gold: SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Version_Number, Template_Type_Code FROM Templates BY Version_Number ASC LIMIT 1
Gold: SELECT min(Version_Number) ,  template_type_code FROM Templates
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Version_Number, Template_Type_Code FROM Templates BY Version_Number ASC LIMIT 1
Gold: SELECT min(Version_Number) ,  template_type_code FROM Templates
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT Ref_Template_Types.Template_Type_Code, COUNT(Documents.Document_ID) FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Code
Gold: SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'template_type_code'
Predicted: SELECT Template_Type_Code FROM Ref_Template_Types Template_Type_Code NOT IN (SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID)
Gold: SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'template_type_code'
Predicted: SELECT Template_Type_Code FROM Ref_Template_Types Template_Type_Code NOT IN (SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID)
Gold: SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'template_type_code'
Predicted: SELECT Template_Type_Description FROM Ref_Template_Types Template_Type_Code = 'AD'
Gold: SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  "AD"
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'template_type_code'
Predicted: SELECT Template_Type_Description FROM Ref_Template_Types Template_Type_Code = 'AD'
Gold: SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  "AD"
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'template_type_description'
Predicted: SELECT Template_Type_Code FROM Ref_Template_Types Template_Type_Description = 'Book'
Gold: SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  "Book"
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'template_type_description'
Predicted: SELECT Template_Type_Code FROM Ref_Template_Types Template_Type_Description = 'Book'
Gold: SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  "Book"
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'paragraph_text'
Predicted: SELECT * FROM Paragraphs Paragraph_Text = 'Korea '
Gold: select other_details from paragraphs where paragraph_text like 'korea'
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'paragraph_text'
Predicted: SELECT * FROM Paragraphs Paragraph_Text LIKE '%Korea %'
Gold: select other_details from paragraphs where paragraph_text like 'korea'
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID
Gold: SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Document_ID, COUNT(*) FROM Paragraphs BY Document_ID ORDER BY Document_ID
Gold: SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Document_ID FROM Paragraphs BY Document_ID HAVING COUNT(*) >= 2
Gold: SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Document_ID FROM Paragraphs BY Document_ID HAVING COUNT(*) >= 2
Gold: SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT Documents.Document_ID FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY COUNT(Paragraphs.Paragraph_ID) ASC LIMIT 1
Gold: SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Document_ID FROM Paragraphs BY Document_ID ORDER BY COUNT(*) ASC LIMIT 1
Gold: SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'paragraph_text'
Predicted: SELECT Document_ID FROM Paragraphs Paragraph_Text LIKE '%Brazil%' AND Paragraph_Text LIKE '%Ireland%'
Gold: SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'paragraph_text'
Predicted: SELECT Document_ID FROM Paragraphs Paragraph_Text LIKE '%Brazil%' INTERSECT SELECT Document_ID FROM Paragraphs Paragraph_Text LIKE '%Ireland%'
Gold: SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name FROM teacher BY Age ASC
Gold: SELECT Name FROM teacher ORDER BY Age ASC
Database: course_teach
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name FROM teacher BY Age ASC
Gold: SELECT Name FROM teacher ORDER BY Age ASC
Database: course_teach
--------------------------------------------------------------------------------
PARSE FAILED: 'hometown'
Predicted: SELECT Name FROM teacher Hometown != 'Little Lever Urban District'
Gold: select name from teacher where hometown != "little lever urban district"
Database: course_teach
--------------------------------------------------------------------------------
PARSE FAILED: 'hometown'
Predicted: SELECT Name FROM teacher Hometown != 'Little Lever Urban District'
Gold: select name from teacher where hometown != "little lever urban district"
Database: course_teach
--------------------------------------------------------------------------------
PARSE FAILED: 'age'
Predicted: SELECT Name FROM teacher Age IN (32, 33)
Gold: SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33
Database: course_teach
--------------------------------------------------------------------------------
PARSE FAILED: 'age'
Predicted: SELECT Name FROM teacher Age IN (32, 33)
Gold: SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33
Database: course_teach
--------------------------------------------------------------------------------
PARSE FAILED: 'age'
Predicted: SELECT Hometown FROM teacher Age = (SELECT MIN(Age) FROM teacher)
Gold: SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1
Database: course_teach
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Hometown FROM teacher BY Age ASC LIMIT 1
Gold: SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1
Database: course_teach
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Hometown, COUNT(*) FROM teacher BY Hometown
Gold: SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown
Database: course_teach
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Hometown, COUNT(*) FROM teacher BY Hometown
Gold: SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown
Database: course_teach
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Hometown FROM teacher BY Hometown ORDER BY COUNT(*) DESC LIMIT 1
Gold: SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1
Database: course_teach
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Hometown FROM teacher BY Hometown ORDER BY COUNT(*) DESC LIMIT 1
Gold: SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1
Database: course_teach
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Hometown FROM teacher BY Hometown HAVING COUNT(*) >= 2
Gold: SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2
Database: course_teach
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Hometown FROM teacher BY Hometown HAVING COUNT(*) >= 2
Gold: SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2
Database: course_teach
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT teacher.Name FROM teacher LEFT JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID WHERE course_arrange.Teacher_ID IS NULL
Gold: SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)
Database: course_teach
--------------------------------------------------------------------------------
PARSE FAILED: 'teacher_id'
Predicted: SELECT Name FROM teacher Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)
Gold: SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)
Database: course_teach
--------------------------------------------------------------------------------
PARSE FAILED: 'age'
Predicted: SELECT COUNT(*) FROM visitor Age < 30
Gold: SELECT count(*) FROM visitor WHERE age  <  30
Database: museum_visit
--------------------------------------------------------------------------------
PARSE FAILED: 'level_of_membership'
Predicted: SELECT Name FROM visitor Level_of_membership > 4 ORDER BY Level_of_membership DESC
Gold: SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC
Database: museum_visit
--------------------------------------------------------------------------------
PARSE FAILED: 'level_of_membership'
Predicted: SELECT AVG(Age) FROM visitor Level_of_membership <= 4
Gold: SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4
Database: museum_visit
--------------------------------------------------------------------------------
PARSE FAILED: 'level_of_membership'
Predicted: SELECT Name, Level_of_membership FROM visitor Level_of_membership > 4 ORDER BY Age DESC
Gold: SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC
Database: museum_visit
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Museum_ID, Name FROM museum BY Num_of_Staff DESC LIMIT 1
Gold: SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1
Database: museum_visit
--------------------------------------------------------------------------------
PARSE FAILED: 'open_year'
Predicted: SELECT AVG(Num_of_Staff) FROM museum Open_Year < 2009
Gold: SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009
Database: museum_visit
--------------------------------------------------------------------------------
PARSE FAILED: 'name'
Predicted: SELECT Open_Year, Num_of_Staff FROM museum Name = 'Plaza Museum'
Gold: SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'
Database: museum_visit
--------------------------------------------------------------------------------
PARSE FAILED: 'num_of_staff'
Predicted: SELECT Name FROM museum Num_of_Staff > (SELECT MIN(Num_of_Staff) FROM museum Open_Year > 2010)
Gold: SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)
Database: museum_visit
--------------------------------------------------------------------------------
PARSE FAILED: 'museum_id'
Predicted: SELECT Name FROM museum Museum_ID NOT IN (SELECT Museum_ID FROM visit)
Gold: SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)
Database: museum_visit
--------------------------------------------------------------------------------
PARSE FAILED: 'id'
Predicted: SELECT COUNT(ID) FROM visitor ID NOT IN (SELECT visit.visitor_ID FROM visit JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE museum.Open_Year > 2010)
Gold: SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)
Database: museum_visit
--------------------------------------------------------------------------------
PARSE FAILED: 'open_year'
Predicted: SELECT COUNT(*) FROM museum Open_Year > 2013 OR Open_Year < 2008
Gold: SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008
Database: museum_visit
--------------------------------------------------------------------------------
PARSE FAILED: 'country_code'
Predicted: SELECT first_name, birth_date FROM players country_code = 'USA'
Gold: SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'country_code'
Predicted: SELECT first_name, birth_date FROM players country_code = 'USA'
Gold: SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT tourney_name FROM matches BY tourney_name HAVING COUNT(*) > 10
Gold: SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT tourney_name FROM matches BY tourney_name HAVING COUNT(*) > 10
Gold: SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'year'
Predicted: SELECT winner_name FROM matches year IN (2013, 2016) GROUP BY winner_name HAVING COUNT(DISTINCT year) = 2
Gold: SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'year'
Predicted: SELECT winner_name FROM matches year IN (2013, 2016) GROUP BY winner_name HAVING COUNT(DISTINCT year) = 2
Gold: SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'year'
Predicted: SELECT COUNT(*) FROM matches year = 2013 OR year = 2016
Gold: SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'year'
Predicted: SELECT COUNT(*) FROM matches year = 2013 OR year = 2016
Gold: SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: '('
Predicted: SELECT players.country_code, players.first_name FROM players JOIN ( SELECT winner_id FROM matches tourney_name = 'WTA Championships' INTERSECT SELECT winner_id FROM matches tourney_name = 'Australian Open' ) AS WinnersOfBothTournaments ON players.player_id = WinnersOfBothTournaments.winner_id
Gold: SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 
Predicted: SELECT players.first_name, players.country_code FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name IN ('WTA Championships', 'Australian Open') GROUP BY players.player_id, players.first_name, players.country_code HAVING COUNT(DISTINCT matches.tourney_name) = 2
Gold: SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT first_name, country_code FROM players BY birth_date ASC LIMIT 1
Gold: SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT first_name, country_code FROM players BY birth_date ASC LIMIT 1
Gold: SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT first_name, last_name FROM players BY birth_date
Gold: SELECT first_name ,  last_name FROM players ORDER BY birth_date
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT first_name, last_name FROM players BY birth_date
Gold: SELECT first_name ,  last_name FROM players ORDER BY birth_date
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'hand'
Predicted: SELECT first_name, last_name FROM players hand = 'L' ORDER BY birth_date
Gold: SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'hand'
Predicted: SELECT first_name || ' ' || last_name FROM players hand = 'L' ORDER BY birth_date
Gold: SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: '('
Predicted: SELECT players.first_name, players.country_code FROM players JOIN ( SELECT player_id, COUNT(*) AS tour_count FROM rankings BY player_id ORDER BY tour_count DESC LIMIT 1 ) AS T2 ON players.player_id = T2.player_id
Gold: SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT year FROM matches BY year ORDER BY COUNT(*) DESC LIMIT 1
Gold: SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT year FROM matches BY year ORDER BY COUNT(*) DESC LIMIT 1
Gold: SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT winner_name, winner_rank_points FROM matches BY winner_id, winner_name, winner_rank_points ORDER BY COUNT(*) DESC LIMIT 1
Gold: SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: WITH MostWinsPlayer AS ( SELECT winner_id FROM matches BY winner_id ORDER BY COUNT(*) DESC LIMIT 1 ) SELECT players.first_name, players.last_name, (SELECT rankings.ranking_points FROM rankings WHERE rankings.player_id = MostWinsPlayer.winner_id ORDER BY rankings.ranking_date DESC LIMIT 1) AS rank_points FROM MostWinsPlayer JOIN players ON MostWinsPlayer.winner_id = players.player_id
Gold: SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'tourney_name'
Predicted: SELECT winner_name FROM matches tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1
Gold: SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'tourney_name'
Predicted: SELECT winner_name FROM matches tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1
Gold: SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT loser_name, winner_name FROM matches BY minutes DESC LIMIT 1
Gold: SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT winner_name, loser_name FROM matches BY minutes DESC LIMIT 1
Gold: SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT country_code, COUNT(*) FROM players BY country_code
Gold: SELECT count(*) ,  country_code FROM players GROUP BY country_code
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT country_code, COUNT(*) FROM players BY country_code
Gold: SELECT count(*) ,  country_code FROM players GROUP BY country_code
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT country_code FROM players BY country_code ORDER BY COUNT(*) DESC LIMIT 1
Gold: SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT country_code FROM players BY country_code ORDER BY COUNT(player_id) DESC LIMIT 1
Gold: SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT country_code FROM players BY country_code HAVING COUNT(*) > 50
Gold: SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT country_code FROM players BY country_code HAVING COUNT(*) > 50
Gold: SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT ranking_date, SUM(tours) FROM rankings BY ranking_date
Gold: SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT ranking_date, SUM(tours) FROM rankings BY ranking_date
Gold: SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT year, COUNT(*) FROM matches BY year
Gold: SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT year, COUNT(*) FROM matches BY year
Gold: SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT winner_name, winner_rank FROM matches BY winner_age ASC LIMIT 3
Gold: SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT winner_name, winner_rank FROM matches BY winner_age ASC LIMIT 3
Gold: SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'tourney_name'
Predicted: SELECT COUNT(DISTINCT winner_id) FROM matches tourney_name = 'WTA Championships' AND winner_hand = 'L'
Gold: SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'winner_hand'
Predicted: SELECT COUNT(*) FROM matches winner_hand = 'L' AND tourney_name = 'WTA Championships'
Gold: SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: '('
Predicted: SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN ( SELECT winner_id, SUM(winner_rank_points) AS total_winner_points FROM matches BY winner_id ORDER BY total_winner_points DESC LIMIT 1 ) AS T2 ON players.player_id = T2.winner_id
Gold: SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT hand, COUNT(*) FROM players BY hand
Gold: SELECT count(*) ,  hand FROM players GROUP BY hand
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT hand, COUNT(*) FROM players BY hand
Gold: SELECT count(*) ,  hand FROM players GROUP BY hand
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'disposition_of_ship'
Predicted: SELECT COUNT(*) FROM ship disposition_of_ship = 'Captured'
Gold: SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'
Database: battle_death
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT name, tonnage FROM ship BY name DESC
Gold: SELECT name ,  tonnage FROM ship ORDER BY name DESC
Database: battle_death
--------------------------------------------------------------------------------
PARSE FAILED: 'bulgarian_commander'
Predicted: SELECT name, result FROM battle bulgarian_commander != 'Boril'
Gold: SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'
Database: battle_death
--------------------------------------------------------------------------------
PARSE FAILED: 'bulgarian_commander'
Predicted: SELECT DISTINCT name FROM battle bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'
Gold: SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'
Database: battle_death
--------------------------------------------------------------------------------
PARSE FAILED: 'id'
Predicted: SELECT COUNT(*) FROM battle id NOT IN (SELECT lost_in_battle FROM ship tonnage = 225 AND lost_in_battle IS NOT NULL)
Gold: SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );
Database: battle_death
--------------------------------------------------------------------------------
PARSE FAILED: 
Predicted: SELECT battle.name, battle.date FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.name IN ('Lettice', 'HMS Atalanta')
Gold: SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'
Database: battle_death
--------------------------------------------------------------------------------
PARSE FAILED: Error col: not
Predicted: SELECT battle.name, battle.result, battle.bulgarian_commander FROM battle WHERE NOT EXISTS (SELECT 1 FROM ship WHERE ship.lost_in_battle = battle.id AND ship.location = 'English Channel')
Gold: SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'
Database: battle_death
--------------------------------------------------------------------------------
PARSE FAILED: 'note'
Predicted: SELECT note FROM death note LIKE '%East%'
Gold: SELECT note FROM death WHERE note LIKE '%East%'
Database: battle_death
--------------------------------------------------------------------------------
PARSE FAILED: 'course_name'
Predicted: SELECT course_description FROM Courses course_name = 'math'
Gold: SELECT course_description FROM Courses WHERE course_name  =  'math'
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'course_name'
Predicted: SELECT course_description FROM Courses course_name LIKE '%math%'
Gold: SELECT course_description FROM Courses WHERE course_name  =  'math'
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'city'
Predicted: SELECT zip_postcode FROM Addresses city = 'Port Chelsea'
Gold: SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'city'
Predicted: SELECT zip_postcode FROM Addresses city = 'Port Chelsea'
Gold: SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT Courses.course_name, Courses.course_id FROM Courses LEFT JOIN Sections ON Courses.course_id = Sections.course_id GROUP BY Courses.course_id, Courses.course_name HAVING COUNT(Sections.section_id) < 2
Gold: SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT section_name FROM Sections BY section_name DESC
Gold: SELECT section_name FROM Sections ORDER BY section_name DESC
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT section_name FROM Sections BY section_name DESC
Gold: SELECT section_name FROM Sections ORDER BY section_name DESC
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'department_name'
Predicted: SELECT department_description FROM Departments department_name LIKE '%the computer%'
Gold: SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'department_name'
Predicted: SELECT department_description FROM Departments department_name LIKE '%computer%'
Gold: SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: '('
Predicted: SELECT Students.first_name, Students.middle_name, Students.last_name, Students.student_id FROM Students JOIN ( SELECT student_id, semester_id FROM Student_Enrolment BY student_id, semester_id HAVING COUNT(DISTINCT degree_program_id) = 2 ) AS se_filtered ON Students.student_id = se_filtered.student_id
Gold: SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: '('
Predicted: SELECT DISTINCT Students.first_name, Students.middle_name, Students.last_name, Students.student_id FROM Students JOIN ( SELECT student_id, semester_id FROM Student_Enrolment BY student_id, semester_id HAVING COUNT(DISTINCT degree_program_id) = 2 ) AS qualified_students_semesters ON Students.student_id = qualified_students_semesters.student_id
Gold: SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'inner'
Predicted: SELECT Degree_Programs.degree_summary_name FROM Student_Enrolment INNER JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id GROUP BY Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name ORDER BY COUNT(Student_Enrolment.student_id) DESC LIMIT 1
Gold: SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: Error col: as
Predicted: SELECT Students.student_id, Students.first_name, Students.middle_name, Students.last_name, COUNT(Student_Enrolment.student_enrolment_id) AS number_of_enrollments FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id, Students.first_name, Students.middle_name, Students.last_name ORDER BY number_of_enrollments DESC LIMIT 1
Gold: SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: Error col: as
Predicted: SELECT Students.first_name, Students.middle_name, Students.last_name, Students.student_id, COUNT(Student_Enrolment.student_enrolment_id) AS number_of_enrollments FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id, Students.first_name, Students.middle_name, Students.last_name ORDER BY number_of_enrollments DESC LIMIT 1
Gold: SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT Semesters.semester_name FROM Semesters LEFT JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id WHERE Student_Enrolment.student_enrolment_id IS NULL
Gold: SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT Semesters.semester_name FROM Semesters LEFT JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id WHERE Student_Enrolment.semester_id IS NULL
Gold: SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'inner'
Predicted: SELECT Courses.course_name FROM Courses INNER JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY Courses.course_id, Courses.course_name ORDER BY COUNT(Student_Enrolment_Courses.student_enrolment_id) DESC LIMIT 1
Gold: SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: Error col: not
Predicted: SELECT Students.last_name FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id WHERE Addresses.state_province_county = 'North Carolina' AND NOT EXISTS ( SELECT 1 FROM Student_Enrolment WHERE Student_Enrolment.student_id = Students.student_id )
Gold: SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: Error col: not
Predicted: SELECT Students.last_name FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id WHERE Addresses.state_province_county = 'North Carolina' AND NOT EXISTS (SELECT 1 FROM Student_Enrolment WHERE Student_Enrolment.student_id = Students.student_id)
Gold: SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'first_name'
Predicted: SELECT cell_mobile_number FROM Students first_name = 'Timmothy' AND last_name = 'Ward'
Gold: SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'first_name'
Predicted: SELECT cell_mobile_number FROM Students first_name = 'Timmothy' AND last_name = 'Ward'
Gold: select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT first_name, middle_name, last_name FROM Students BY date_first_registered ASC LIMIT 1
Gold: SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT first_name, middle_name, last_name FROM Students BY date_first_registered ASC LIMIT 1
Gold: SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT first_name, middle_name, last_name FROM Students BY date_left ASC LIMIT 1
Gold: SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT first_name, middle_name, last_name FROM Students BY date_left ASC LIMIT 1
Gold: SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'permanent_address_id'
Predicted: SELECT first_name FROM Students permanent_address_id != current_address_id
Gold: SELECT first_name FROM Students WHERE current_address_id != permanent_address_id
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'permanent_address_id'
Predicted: SELECT first_name FROM Students permanent_address_id != current_address_id
Gold: SELECT first_name FROM Students WHERE current_address_id != permanent_address_id
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: '('
Predicted: SELECT Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country FROM Addresses JOIN ( SELECT current_address_id, COUNT(student_id) AS student_count FROM Students current_address_id IS NOT NULL GROUP BY current_address_id ORDER BY student_count DESC LIMIT 1 ) AS top_address ON Addresses.address_id = top_address.current_address_id
Gold: SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: '('
Predicted: SELECT Addresses.address_id, Addresses.line_1, Addresses.line_2 FROM Addresses JOIN ( SELECT address_id, COUNT(*) AS student_count FROM ( SELECT current_address_id AS address_id FROM Students current_address_id IS NOT NULL UNION ALL SELECT permanent_address_id AS address_id FROM Students permanent_address_id IS NOT NULL ) AS student_addresses GROUP BY address_id ORDER BY student_count DESC LIMIT 1 ) AS TopAddress ON Addresses.address_id = TopAddress.address_id
Gold: SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: Error col: year
Predicted: SELECT AVG(YEAR(transcript_date)) FROM Transcripts
Gold: SELECT avg(transcript_date) FROM Transcripts
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT transcript_date, other_details FROM Transcripts BY transcript_date ASC LIMIT 1
Gold: SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT transcript_date, other_details FROM Transcripts BY transcript_date ASC LIMIT 1
Gold: SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT student_course_id, COUNT(*) FROM Transcript_Contents BY student_course_id ORDER BY COUNT(*) DESC LIMIT 1
Gold: SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: Error col: as
Predicted: SELECT Student_Enrolment_Courses.student_enrolment_id, COUNT(Transcript_Contents.transcript_id) AS max_transcript_occurrences FROM Transcript_Contents JOIN Student_Enrolment_Courses ON Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id GROUP BY Student_Enrolment_Courses.student_course_id ORDER BY max_transcript_occurrences DESC LIMIT 1
Gold: SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: Error col: case
Predicted: SELECT Semesters.semester_name FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id GROUP BY Semesters.semester_id, Semesters.semester_name HAVING SUM(CASE WHEN Degree_Programs.degree_summary_name LIKE '%Master%' THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN Degree_Programs.degree_summary_name LIKE '%Bachelor%' THEN 1 ELSE 0 END) > 0
Gold: SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: Error col: case
Predicted: SELECT Semesters.semester_id FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name LIKE '%Masters%' OR Degree_Programs.degree_summary_name LIKE '%Bachelors%' GROUP BY Semesters.semester_id HAVING SUM(CASE WHEN Degree_Programs.degree_summary_name LIKE '%Masters%' THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN Degree_Programs.degree_summary_name LIKE '%Bachelors%' THEN 1 ELSE 0 END) > 0
Gold: SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT * FROM Students BY last_name DESC, first_name DESC
Gold: SELECT other_student_details FROM Students ORDER BY other_student_details DESC
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT other_student_details FROM Students BY last_name DESC
Gold: SELECT other_student_details FROM Students ORDER BY other_student_details DESC
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'section_name'
Predicted: SELECT section_description FROM Sections section_name = 'h'
Gold: SELECT section_description FROM Sections WHERE section_name  =  'h'
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'section_name'
Predicted: SELECT section_description FROM Sections section_name = 'h'
Gold: SELECT section_description FROM Sections WHERE section_name  =  'h'
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Title FROM Cartoon BY Title ASC
Gold: SELECT Title FROM Cartoon ORDER BY title
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Title FROM Cartoon BY Title ASC
Gold: SELECT Title FROM Cartoon ORDER BY title
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'directed_by'
Predicted: SELECT * FROM Cartoon Directed_by = 'Ben Jones'
Gold: SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones";
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'directed_by'
Predicted: SELECT Title FROM Cartoon Directed_by = 'Ben Jones'
Gold: SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones";
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'written_by'
Predicted: SELECT COUNT(*) FROM Cartoon Written_by = 'Joseph Kuhr'
Gold: SELECT count(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr";
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'written_by'
Predicted: SELECT COUNT(*) FROM Cartoon Written_by = 'Joseph Kuhr'
Gold: SELECT count(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr";
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Title, Directed_by FROM Cartoon BY Original_air_date
Gold: SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Title, Directed_by FROM Cartoon BY Original_air_date
Gold: SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'directed_by'
Predicted: SELECT Title FROM Cartoon Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'
Gold: SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" OR Directed_by = "Brandon Vietti";
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'directed_by'
Predicted: SELECT Title FROM Cartoon Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'
Gold: SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" OR Directed_by = "Brandon Vietti";
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Country, COUNT(*) FROM TV_Channel BY Country ORDER BY COUNT(*) DESC LIMIT 1
Gold: SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Country, COUNT(*) FROM TV_Channel BY Country ORDER BY COUNT(*) DESC LIMIT 1
Gold: SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'series_name'
Predicted: SELECT Content FROM TV_Channel series_name = 'Sky Radio'
Gold: SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio";
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'series_name'
Predicted: SELECT Content FROM TV_Channel series_name = 'Sky Radio'
Gold: SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio";
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'series_name'
Predicted: SELECT Package_Option FROM TV_Channel series_name = 'Sky Radio'
Gold: SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio";
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'series_name'
Predicted: SELECT Package_Option FROM TV_Channel series_name = 'Sky Radio'
Gold: SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio";
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'language'
Predicted: SELECT COUNT(*) FROM TV_Channel Language = 'English'
Gold: SELECT count(*) FROM TV_Channel WHERE LANGUAGE = "English";
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'language'
Predicted: SELECT COUNT(*) FROM TV_Channel Language = 'English'
Gold: SELECT count(*) FROM TV_Channel WHERE LANGUAGE = "English";
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Language, COUNT(*) FROM TV_Channel BY Language ORDER BY COUNT(*) ASC LIMIT 1
Gold: SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Language, COUNT(*) FROM TV_Channel BY Language HAVING COUNT(*) = (SELECT COUNT(*) FROM TV_Channel BY Language ORDER BY COUNT(*) ASC LIMIT 1)
Gold: SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Language, COUNT(id) FROM TV_Channel BY Language
Gold: SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Language, COUNT(*) FROM TV_Channel BY Language
Gold: SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'tv_channel.channel'
Predicted: SELECT TV_Channel.series_name FROM TV_Channel JOIN Cartoon ON TV_Channel.Channel = Cartoon.Channel WHERE Cartoon.Title = 'The Rise of the Blue Beetle'
Gold: SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = "The Rise of the Blue Beetle!";
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Episode FROM TV_series BY Rating
Gold: SELECT Episode FROM TV_series ORDER BY rating
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Episode, Rating FROM TV_series BY Rating
Gold: SELECT Episode FROM TV_series ORDER BY rating
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Episode, Rating FROM TV_series BY Rating DESC LIMIT 3
Gold: SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Episode, Rating FROM TV_series BY Rating DESC LIMIT 3
Gold: SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'episode'
Predicted: SELECT Air_Date FROM TV_series Episode = 'A Love of a Lifetime'
Gold: SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime";
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'episode'
Predicted: SELECT Air_Date FROM TV_series Episode = 'A Love of a Lifetime'
Gold: SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime";
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'episode'
Predicted: SELECT Weekly_Rank FROM TV_series Episode = 'A Love of a Lifetime'
Gold: SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime";
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'episode'
Predicted: SELECT Weekly_Rank FROM TV_series Episode = 'A Love of a Lifetime'
Gold: SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime";
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Directed_by, COUNT(*) FROM Cartoon BY Directed_by
Gold: SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Directed_by, COUNT(*) FROM Cartoon BY Directed_by
Gold: SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Production_code, Channel FROM Cartoon BY Original_air_date DESC LIMIT 1
Gold: select production_code ,  channel from cartoon order by original_air_date desc limit 1
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Production_code, Channel FROM Cartoon BY Original_air_date DESC LIMIT 1
Gold: select production_code ,  channel from cartoon order by original_air_date desc limit 1
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'hight_definition_tv'
Predicted: SELECT Package_Option, series_name FROM TV_Channel Hight_definition_TV = 'Yes'
Gold: SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  "yes"
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'hight_definition_tv'
Predicted: SELECT Package_Option, series_name FROM TV_Channel Hight_definition_TV = 'Yes'
Gold: SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  "yes"
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'country'
Predicted: SELECT DISTINCT Country FROM TV_Channel Country NOT IN (SELECT TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by = 'Todd Casey')
Gold: SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'id'
Predicted: SELECT Country FROM TV_Channel id NOT IN (SELECT Channel FROM Cartoon Written_by = 'Todd Casey')
Gold: SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 
Predicted: SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang') GROUP BY TV_Channel.id, TV_Channel.series_name, TV_Channel.Country HAVING COUNT(DISTINCT Cartoon.Directed_by) = 2
Gold: SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'language'
Predicted: SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel Language != 'English'
Gold: SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'language'
Predicted: SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel Language != 'English'
Gold: SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'country'
Predicted: SELECT id FROM TV_Channel Country IN (SELECT Country FROM TV_Channel BY Country HAVING COUNT(*) > 2)
Gold: SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT id FROM TV_Channel BY id HAVING COUNT(id) > 2
Gold: SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'id'
Predicted: SELECT id FROM TV_Channel id NOT IN (SELECT Channel FROM Cartoon Directed_by = 'Ben Jones')
Gold: SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'id'
Predicted: SELECT id FROM TV_Channel id NOT IN (SELECT Channel FROM Cartoon Directed_by = 'Ben Jones')
Gold: SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'id'
Predicted: SELECT Package_Option FROM TV_Channel id NOT IN (SELECT Channel FROM Cartoon Directed_by = 'Ben Jones')
Gold: SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Earnings FROM poker_player BY Earnings DESC
Gold: SELECT Earnings FROM poker_player ORDER BY Earnings DESC
Database: poker_player
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Earnings FROM poker_player BY Earnings DESC
Gold: SELECT Earnings FROM poker_player ORDER BY Earnings DESC
Database: poker_player
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Money_Rank FROM poker_player BY Earnings DESC LIMIT 1
Gold: SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1
Database: poker_player
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Money_Rank FROM poker_player BY Earnings DESC LIMIT 1
Gold: SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1
Database: poker_player
--------------------------------------------------------------------------------
PARSE FAILED: 'earnings'
Predicted: SELECT MAX(Final_Table_Made) FROM poker_player Earnings < 200000
Gold: SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000
Database: poker_player
--------------------------------------------------------------------------------
PARSE FAILED: 'earnings'
Predicted: SELECT MAX(Final_Table_Made) FROM poker_player Earnings < 200000
Gold: SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000
Database: poker_player
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Nationality, COUNT(*) FROM people BY Nationality
Gold: SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality
Database: poker_player
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Nationality, COUNT(*) FROM people BY Nationality
Gold: SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality
Database: poker_player
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Nationality FROM people BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
Gold: SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
Database: poker_player
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Nationality FROM people BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
Gold: SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
Database: poker_player
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Nationality FROM people BY Nationality HAVING COUNT(*) >= 2
Gold: SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2
Database: poker_player
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Nationality FROM people BY Nationality HAVING COUNT(*) >= 2
Gold: SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2
Database: poker_player
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name, Birth_Date FROM people BY Name ASC
Gold: SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC
Database: poker_player
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name, Birth_Date FROM people BY Name ASC
Gold: SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC
Database: poker_player
--------------------------------------------------------------------------------
PARSE FAILED: 'nationality'
Predicted: SELECT Name FROM people Nationality != 'Russia'
Gold: SELECT Name FROM people WHERE Nationality != "Russia"
Database: poker_player
--------------------------------------------------------------------------------
PARSE FAILED: 'nationality'
Predicted: SELECT Name FROM people Nationality != 'Russia'
Gold: SELECT Name FROM people WHERE Nationality != "Russia"
Database: poker_player
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT people.Name FROM people LEFT JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Poker_Player_ID IS NULL
Gold: SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
Database: poker_player
--------------------------------------------------------------------------------
PARSE FAILED: 'people_id'
Predicted: SELECT Name FROM people People_ID NOT IN (SELECT People_ID FROM poker_player)
Gold: SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
Database: poker_player
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT contestant_number, contestant_name FROM CONTESTANTS BY contestant_name DESC
Gold: SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC
Database: voter_1
--------------------------------------------------------------------------------
PARSE FAILED: 'state'
Predicted: SELECT MAX(created) FROM VOTES state = 'CA'
Gold: SELECT max(created) FROM votes WHERE state  =  'CA'
Database: voter_1
--------------------------------------------------------------------------------
PARSE FAILED: 'contestant_name'
Predicted: SELECT contestant_name FROM CONTESTANTS contestant_name != 'Jessie Alloway'
Gold: SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'
Database: voter_1
--------------------------------------------------------------------------------
PARSE FAILED: 'state'
Predicted: SELECT COUNT(*) FROM VOTES state = 'NY' OR state = 'CA'
Gold: SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'
Database: voter_1
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT COUNT(CONTESTANTS.contestant_number) FROM CONTESTANTS LEFT JOIN VOTES ON CONTESTANTS.contestant_number = VOTES.contestant_number WHERE VOTES.contestant_number IS NULL
Gold: SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )
Database: voter_1
--------------------------------------------------------------------------------
PARSE FAILED: '('
Predicted: SELECT AREA_CODE_STATE.area_code FROM AREA_CODE_STATE JOIN ( SELECT VOTES.state FROM VOTES JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.contestant_name IN ('Tabatha Gehling', 'Kelly Clauss') GROUP BY VOTES.state HAVING COUNT(DISTINCT CONTESTANTS.contestant_name) = 2 ) AS BothContestantsVotedInState ON AREA_CODE_STATE.state = BothContestantsVotedInState.state
Gold: SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'
Database: voter_1
--------------------------------------------------------------------------------
PARSE FAILED: 'contestant_name'
Predicted: SELECT contestant_name FROM CONTESTANTS contestant_name LIKE '%Al%'
Gold: select contestant_name from contestants where contestant_name like "%al%"
Database: voter_1
--------------------------------------------------------------------------------
PARSE FAILED: 'indepyear'
Predicted: SELECT Name FROM country IndepYear > 1950
Gold: SELECT Name FROM country WHERE IndepYear  >  1950
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'indepyear'
Predicted: SELECT Name FROM country IndepYear > 1950
Gold: SELECT Name FROM country WHERE IndepYear  >  1950
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'governmentform'
Predicted: SELECT COUNT(*) FROM country GovernmentForm = 'Republic'
Gold: SELECT count(*) FROM country WHERE GovernmentForm  =  "Republic"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'governmentform'
Predicted: SELECT COUNT(*) FROM country GovernmentForm LIKE '%Republic%'
Gold: SELECT count(*) FROM country WHERE GovernmentForm  =  "Republic"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'region'
Predicted: SELECT SUM(SurfaceArea) FROM country Region = 'Caribbean'
Gold: SELECT sum(SurfaceArea) FROM country WHERE Region  =  "Caribbean"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'region'
Predicted: SELECT SUM(SurfaceArea) FROM country Region = 'Caribbean'
Gold: SELECT sum(SurfaceArea) FROM country WHERE Region  =  "Caribbean"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'name'
Predicted: SELECT Continent FROM country Name = 'Anguilla'
Gold: SELECT Continent FROM country WHERE Name  =  "Anguilla"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'name'
Predicted: SELECT Continent FROM country Name = 'Anguilla'
Gold: SELECT Continent FROM country WHERE Name  =  "Anguilla"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'name'
Predicted: SELECT Population, LifeExpectancy FROM country Name = 'Brazil'
Gold: SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  "Brazil"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'name'
Predicted: SELECT Population, LifeExpectancy FROM country Name = 'Brazil'
Gold: SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  "Brazil"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'name'
Predicted: SELECT Region, Population FROM country Name = 'Angola'
Gold: SELECT Population ,  Region FROM country WHERE Name  =  "Angola"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'name'
Predicted: SELECT Region, Population FROM country Name = 'Angola'
Gold: SELECT Population ,  Region FROM country WHERE Name  =  "Angola"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'region'
Predicted: SELECT AVG(LifeExpectancy) FROM country Region = 'Central Africa'
Gold: SELECT avg(LifeExpectancy) FROM country WHERE Region  =  "Central Africa"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'region'
Predicted: SELECT AVG(LifeExpectancy) FROM country Region = 'Central Africa'
Gold: SELECT avg(LifeExpectancy) FROM country WHERE Region  =  "Central Africa"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'continent'
Predicted: SELECT Name FROM country Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1
Gold: SELECT Name FROM country WHERE Continent  =  "Asia" ORDER BY LifeExpectancy LIMIT 1
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'continent'
Predicted: SELECT Name FROM country Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1
Gold: SELECT Name FROM country WHERE Continent  =  "Asia" ORDER BY LifeExpectancy LIMIT 1
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'continent'
Predicted: SELECT SUM(Population), MAX(GNP) FROM country Continent = 'Asia'
Gold: SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  "Asia"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'continent'
Predicted: SELECT SUM(Population), MAX(GNP) FROM country Continent = 'Asia'
Gold: SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  "Asia"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'continent'
Predicted: SELECT AVG(LifeExpectancy) FROM country Continent = 'Africa' AND GovernmentForm = 'Republic'
Gold: SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  "Africa" AND GovernmentForm  =  "Republic"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'continent'
Predicted: SELECT AVG(LifeExpectancy) FROM country Continent = 'Africa' AND GovernmentForm = 'Republic'
Gold: SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  "Africa" AND GovernmentForm  =  "Republic"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'continent'
Predicted: SELECT SUM(SurfaceArea) FROM country Continent = 'Asia' OR Continent = 'Europe'
Gold: SELECT sum(SurfaceArea) FROM country WHERE Continent  =  "Asia" OR Continent  =  "Europe"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'continent'
Predicted: SELECT SUM(SurfaceArea) FROM country Continent = 'Asia' OR Continent = 'Europe'
Gold: SELECT sum(SurfaceArea) FROM country WHERE Continent  =  "Asia" OR Continent  =  "Europe"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'district'
Predicted: SELECT SUM(Population) FROM city District = 'Gelderland'
Gold: SELECT sum(Population) FROM city WHERE District  =  "Gelderland"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'district'
Predicted: SELECT SUM(Population) FROM city District = 'Gelderland'
Gold: SELECT sum(Population) FROM city WHERE District  =  "Gelderland"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'governmentform'
Predicted: SELECT AVG(GNP), SUM(Population) FROM country GovernmentForm = 'US Territory'
Gold: SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  "US Territory"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'headofstate'
Predicted: SELECT AVG(GNP), SUM(Population) FROM country HeadOfState = 'George W. Bush'
Gold: SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  "US Territory"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'continent'
Predicted: SELECT COUNT(DISTINCT GovernmentForm) FROM country Continent = 'Africa'
Gold: SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  "Africa"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'continent'
Predicted: SELECT COUNT(DISTINCT GovernmentForm) FROM country Continent = 'Africa'
Gold: SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  "Africa"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: '('
Predicted: SELECT country.Name FROM country JOIN (SELECT CountryCode, COUNT(Language) AS language_count FROM countrylanguage BY CountryCode ORDER BY language_count DESC LIMIT 1) AS T2 ON country.Code = T2.CountryCode
Gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'inner'
Predicted: SELECT country.Continent FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Continent ORDER BY COUNT(DISTINCT countrylanguage.Language) DESC LIMIT 1
Gold: SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'language'
Predicted: SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage Language = 'English' AND CountryCode IN (SELECT CountryCode FROM countrylanguage Language = 'Dutch')
Gold: SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch")
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'countrycode'
Predicted: SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage CountryCode IN (SELECT CountryCode FROM countrylanguage Language = 'English') AND CountryCode IN (SELECT CountryCode FROM countrylanguage Language = 'Dutch')
Gold: SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch")
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 
Predicted: SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language IN ('English', 'French') GROUP BY country.Code HAVING COUNT(DISTINCT countrylanguage.Language) = 2
Gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'inner'
Predicted: SELECT country.Name FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language IN ('English', 'French') GROUP BY country.Code HAVING COUNT(DISTINCT countrylanguage.Language) = 2
Gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 
Predicted: SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.IsOfficial = 'T' AND countrylanguage.Language IN ('English', 'French') GROUP BY country.Code, country.Name HAVING COUNT(DISTINCT countrylanguage.Language) = 2
Gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French" AND T2.IsOfficial  =  "T"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 
Predicted: SELECT DISTINCT country.Region FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language IN ('English', 'Dutch')
Gold: SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" OR T2.Language  =  "Dutch"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'inner'
Predicted: SELECT DISTINCT country.Region FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Dutch' OR countrylanguage.Language = 'English'
Gold: SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" OR T2.Language  =  "Dutch"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'inner'
Predicted: SELECT country.Name FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.IsOfficial = 'T' AND (countrylanguage.Language = 'English' OR countrylanguage.Language = 'Dutch')
Gold: select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  "english" and isofficial  =  "t" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  "dutch" and isofficial  =  "t"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 
Predicted: SELECT DISTINCT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.IsOfficial = 'T' AND countrylanguage.Language IN ('English', 'Dutch')
Gold: SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND IsOfficial  =  "T" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch" AND IsOfficial  =  "T"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 
Predicted: SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' GROUP BY countrylanguage.Language ORDER BY SUM(country.Population * countrylanguage.Percentage / 100) DESC LIMIT 1
Gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  "Asia" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'inner'
Predicted: SELECT city.Name FROM city INNER JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'T' ORDER BY city.Population DESC LIMIT 1
Gold: SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  "English" ORDER BY T1.Population DESC LIMIT 1
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'continent'
Predicted: SELECT Name, Population, LifeExpectancy FROM country Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1
Gold: SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  "Asia" ORDER BY SurfaceArea DESC LIMIT 1
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'continent'
Predicted: SELECT Name, Population, LifeExpectancy FROM country Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1
Gold: SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  "Asia" ORDER BY SurfaceArea DESC LIMIT 1
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'code'
Predicted: SELECT AVG(LifeExpectancy) FROM country Code NOT IN (SELECT CountryCode FROM countrylanguage Language = 'English' AND IsOfficial = 'T')
Gold: SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T")
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT AVG(country.LifeExpectancy) FROM country LEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode AND countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'T' WHERE countrylanguage.CountryCode IS NULL
Gold: SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T")
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'code'
Predicted: SELECT SUM(Population) FROM country Code NOT IN (SELECT CountryCode FROM countrylanguage Language = 'English')
Gold: SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English")
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'surfacearea'
Predicted: SELECT Name FROM country SurfaceArea > (SELECT MAX(SurfaceArea) FROM country Continent = 'Europe')
Gold: SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  "Europe")
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'surfacearea'
Predicted: SELECT Name FROM country SurfaceArea > (SELECT MAX(SurfaceArea) FROM country Continent = 'Europe')
Gold: SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  "Europe")
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'continent'
Predicted: SELECT Name FROM country Continent = 'Africa' AND Population < ANY (SELECT Population FROM country Continent = 'Asia')
Gold: SELECT Name FROM country WHERE Continent  =  "Africa"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  "Asia")
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'continent'
Predicted: SELECT Name FROM country Continent = 'Africa' AND Population < (SELECT MIN(Population) FROM country Continent = 'Asia')
Gold: SELECT Name FROM country WHERE Continent  =  "Africa"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  "Asia")
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'continent'
Predicted: SELECT Name FROM country Continent = 'Asia' AND Population > (SELECT MAX(Population) FROM country Continent = 'Africa')
Gold: SELECT Name FROM country WHERE Continent  =  "Asia"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  "Africa")
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'continent'
Predicted: SELECT Name FROM country Continent = 'Asia' AND Population > (SELECT MAX(Population) FROM country Continent = 'Africa')
Gold: SELECT Name FROM country WHERE Continent  =  "Asia"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  "Africa")
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'language'
Predicted: SELECT CountryCode FROM countrylanguage Language != 'English'
Gold: SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'language'
Predicted: SELECT CountryCode FROM countrylanguage Language != 'English'
Gold: SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'language'
Predicted: SELECT CountryCode FROM countrylanguage Language != 'English'
Gold: SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != "English"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'language'
Predicted: SELECT DISTINCT CountryCode FROM countrylanguage Language != 'English'
Gold: SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != "English"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'governmentform'
Predicted: SELECT Code FROM country GovernmentForm NOT LIKE '%Republic%' AND Code NOT IN (SELECT CountryCode FROM countrylanguage Language = 'English')
Gold: SELECT Code FROM country WHERE GovernmentForm != "Republic" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: Error col: not
Predicted: SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code WHERE country.Continent = 'Europe' AND NOT EXISTS (SELECT 1 FROM countrylanguage WHERE countrylanguage.CountryCode = country.Code AND countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'T')
Gold: SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: Error col: not
Predicted: SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code WHERE country.Continent = 'Europe' AND NOT EXISTS (SELECT 1 FROM countrylanguage WHERE countrylanguage.CountryCode = country.Code AND countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'T')
Gold: SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name, IndepYear, SurfaceArea FROM country BY Population ASC LIMIT 1
Gold: SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name, IndepYear, SurfaceArea FROM country BY Population ASC LIMIT 1
Gold: SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Population, Name, HeadOfState FROM country BY SurfaceArea DESC LIMIT 1
Gold: SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name, Population, HeadOfState FROM country BY SurfaceArea DESC LIMIT 1
Gold: SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'population'
Predicted: SELECT District, COUNT(*) FROM city Population > (SELECT AVG(Population) FROM city) GROUP BY District
Gold: SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'population'
Predicted: SELECT District, COUNT(*) FROM city Population > (SELECT AVG(Population) FROM city) GROUP BY District
Gold: SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT GovernmentForm, SUM(Population) FROM country BY GovernmentForm HAVING AVG(LifeExpectancy) > 72
Gold: SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT GovernmentForm, SUM(Population) FROM country BY GovernmentForm HAVING AVG(LifeExpectancy) > 72
Gold: SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Continent, AVG(LifeExpectancy), SUM(Population) FROM country BY Continent HAVING AVG(LifeExpectancy) < 72
Gold: SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Continent, SUM(Population), AVG(LifeExpectancy) FROM country BY Continent HAVING AVG(LifeExpectancy) < 72
Gold: SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name, SurfaceArea FROM country BY SurfaceArea DESC LIMIT 5
Gold: SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name, SurfaceArea FROM country BY SurfaceArea DESC LIMIT 5
Gold: SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name FROM country BY Population DESC LIMIT 3
Gold: SELECT Name FROM country ORDER BY Population DESC LIMIT 3
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name FROM country BY Population DESC LIMIT 3
Gold: SELECT Name FROM country ORDER BY Population DESC LIMIT 3
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name FROM country BY Population ASC LIMIT 3
Gold: SELECT Name FROM country ORDER BY Population ASC LIMIT 3
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name FROM country BY Population ASC LIMIT 3
Gold: SELECT Name FROM country ORDER BY Population ASC LIMIT 3
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'continent'
Predicted: SELECT COUNT(*) FROM country Continent = 'Asia'
Gold: SELECT count(*) FROM country WHERE continent  =  "Asia"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'continent'
Predicted: SELECT COUNT(*) FROM country Continent = 'Asia'
Gold: SELECT count(*) FROM country WHERE continent  =  "Asia"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'continent'
Predicted: SELECT Name FROM country Continent = 'Europe' AND Population = 80000
Gold: SELECT Name FROM country WHERE continent  =  "Europe" AND Population  =  "80000"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'continent'
Predicted: SELECT Name FROM country Continent = 'Europe' AND Population = 80000
Gold: SELECT Name FROM country WHERE continent  =  "Europe" AND Population  =  "80000"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'continent'
Predicted: SELECT SUM(Population), AVG(SurfaceArea) FROM country Continent = 'North America' AND SurfaceArea > 3000
Gold: select sum(population) ,  avg(surfacearea) from country where continent  =  "north america" and surfacearea  >  3000
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'continent'
Predicted: SELECT SUM(Population), AVG(SurfaceArea) FROM country Continent = 'North America' AND SurfaceArea > 3000
Gold: select sum(population) ,  avg(surfacearea) from country where continent  =  "north america" and surfacearea  >  3000
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'population'
Predicted: SELECT Name FROM city Population BETWEEN 160000 AND 900000
Gold: SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'population'
Predicted: SELECT Name FROM city Population BETWEEN 160000 AND 900000
Gold: select name from city where population between 160000 and 900000
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Language FROM countrylanguage BY Language ORDER BY COUNT(CountryCode) DESC LIMIT 1
Gold: SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Language FROM countrylanguage BY Language ORDER BY COUNT(CountryCode) DESC LIMIT 1
Gold: SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'select' not found
Predicted: WITH RankedLanguages AS ( SELECT CountryCode, Language, Percentage, ROW_NUMBER() OVER (PARTITION BY CountryCode ORDER BY Percentage DESC) AS rn FROM countrylanguage ) SELECT country.Name, RankedLanguages.Language, RankedLanguages.Percentage FROM country JOIN RankedLanguages ON country.Code = RankedLanguages.CountryCode WHERE RankedLanguages.rn = 1
Gold: SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT countrylanguage.CountryCode, countrylanguage.Language FROM countrylanguage LEFT JOIN countrylanguage ON countrylanguage.CountryCode = countrylanguage.CountryCode AND countrylanguage.Percentage < countrylanguage.Percentage WHERE countrylanguage.CountryCode IS NULL
Gold: SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: '('
Predicted: SELECT COUNT(DISTINCT countrylanguage.CountryCode) FROM countrylanguage JOIN (SELECT CountryCode, MAX(Percentage) AS max_pct FROM countrylanguage BY CountryCode) AS T2 ON countrylanguage.CountryCode = T2.CountryCode AND countrylanguage.Percentage = T2.max_pct WHERE countrylanguage.Language = 'Spanish'
Gold: SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'language'
Predicted: SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage Language = 'Spanish' AND IsOfficial = 'T'
Gold: SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'language'
Predicted: SELECT CountryCode FROM countrylanguage Language = 'Spanish' AND Percentage = (SELECT MAX(Percentage) FROM countrylanguage Language = 'Spanish')
Gold: SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'language'
Predicted: SELECT CountryCode FROM countrylanguage Language = 'Spanish' AND IsOfficial = 'T'
Gold: SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name FROM conductor BY Age ASC
Gold: SELECT Name FROM conductor ORDER BY Age ASC
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name FROM conductor BY Age
Gold: SELECT Name FROM conductor ORDER BY Age ASC
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: 'nationality'
Predicted: SELECT Name FROM conductor Nationality != 'USA'
Gold: SELECT Name FROM conductor WHERE Nationality != 'USA'
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: 'nationality'
Predicted: SELECT Name FROM conductor Nationality != 'USA'
Gold: SELECT Name FROM conductor WHERE Nationality != 'USA'
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Record_Company FROM orchestra BY Year_of_Founded DESC
Gold: SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Record_Company FROM orchestra BY Year_of_Founded DESC
Gold: SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: 'type'
Predicted: SELECT MAX(Share), MIN(Share) FROM performance Type != 'Live final'
Gold: SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != "Live final"
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: 'type'
Predicted: SELECT MAX(Share), MIN(Share) FROM performance Type != 'Live final'
Gold: SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != "Live final"
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name FROM conductor BY Year_of_Work DESC
Gold: SELECT Name FROM conductor ORDER BY Year_of_Work DESC
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name FROM conductor BY Year_of_Work DESC
Gold: SELECT Name FROM conductor ORDER BY Year_of_Work DESC
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name FROM conductor BY Year_of_Work DESC LIMIT 1
Gold: SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: 'year_of_work'
Predicted: SELECT Name FROM conductor Year_of_Work = (SELECT MAX(Year_of_Work) FROM conductor)
Gold: SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Record_Company, COUNT(*) FROM orchestra BY Record_Company
Gold: SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Record_Company, COUNT(*) FROM orchestra BY Record_Company
Gold: SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Major_Record_Format, COUNT(*) FROM orchestra BY Major_Record_Format ORDER BY COUNT(*) ASC
Gold: SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Major_Record_Format, COUNT(*) FROM orchestra BY Major_Record_Format ORDER BY COUNT(*) DESC
Gold: SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Record_Company FROM orchestra BY Record_Company ORDER BY COUNT(Orchestra_ID) DESC LIMIT 1
Gold: SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Record_Company FROM orchestra BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1
Gold: SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT orchestra.Orchestra FROM orchestra LEFT JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID WHERE performance.Performance_ID IS NULL
Gold: SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT orchestra.Orchestra FROM orchestra LEFT JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID WHERE performance.Performance_ID IS NULL
Gold: SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: 'year_of_founded'
Predicted: SELECT Record_Company FROM orchestra Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra Year_of_Founded > 2003
Gold: SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: 'year_of_founded'
Predicted: SELECT Record_Company FROM orchestra Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra Year_of_Founded > 2003
Gold: SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: 'major_record_format'
Predicted: SELECT COUNT(*) FROM orchestra Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD'
Gold: SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  "CD" OR Major_Record_Format  =  "DVD"
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: 'major_record_format'
Predicted: SELECT COUNT(*) FROM orchestra Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD'
Gold: SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  "CD" OR Major_Record_Format  =  "DVD"
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: 'name'
Predicted: SELECT grade FROM Highschooler name = 'Kyle'
Gold: SELECT grade FROM Highschooler WHERE name  =  "Kyle"
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'name'
Predicted: SELECT grade FROM Highschooler name = 'Kyle'
Gold: SELECT grade FROM Highschooler WHERE name  =  "Kyle"
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'grade'
Predicted: SELECT name FROM Highschooler grade = 10
Gold: SELECT name FROM Highschooler WHERE grade  =  10
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'grade'
Predicted: SELECT name FROM Highschooler grade = 10
Gold: SELECT name FROM Highschooler WHERE grade  =  10
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'name'
Predicted: SELECT ID FROM Highschooler name = 'Kyle'
Gold: SELECT ID FROM Highschooler WHERE name  =  "Kyle"
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'name'
Predicted: SELECT ID FROM Highschooler name = 'Kyle'
Gold: SELECT ID FROM Highschooler WHERE name  =  "Kyle"
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'grade'
Predicted: SELECT COUNT(*) FROM Highschooler grade = 9 OR grade = 10
Gold: SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'grade'
Predicted: SELECT COUNT(*) FROM Highschooler grade = 9 OR grade = 10
Gold: SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT grade, COUNT(*) FROM Highschooler BY grade
Gold: SELECT grade ,  count(*) FROM Highschooler GROUP BY grade
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT grade, COUNT(*) FROM Highschooler BY grade
Gold: SELECT grade ,  count(*) FROM Highschooler GROUP BY grade
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT grade FROM Highschooler BY grade ORDER BY COUNT(*) DESC LIMIT 1
Gold: SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT grade FROM Highschooler BY grade ORDER BY COUNT(ID) DESC LIMIT 1
Gold: SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT grade FROM Highschooler BY grade HAVING COUNT(*) >= 4
Gold: SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT grade FROM Highschooler BY grade HAVING COUNT(*) >= 4
Gold: SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT student_id, COUNT(friend_id) FROM Friend BY student_id
Gold: SELECT student_id ,  count(*) FROM Friend GROUP BY student_id
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT Highschooler.name, COUNT(Friend.friend_id) FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID, Highschooler.name
Gold: SELECT student_id ,  count(*) FROM Friend GROUP BY student_id
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT Highschooler.name, COUNT(Friend.friend_id) FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID, Highschooler.name
Gold: SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT Highschooler.name, COUNT(Friend.friend_id) FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID, Highschooler.name
Gold: SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT Highschooler.ID FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Friend.student_id IS NULL
Gold: SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'id'
Predicted: SELECT ID FROM Highschooler ID NOT IN (SELECT student_id FROM Friend)
Gold: SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT Highschooler.name FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Friend.student_id IS NULL
Gold: SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'id'
Predicted: SELECT name FROM Highschooler ID NOT IN (SELECT student_id FROM Friend SELECT friend_id FROM Friend)
Gold: SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT student_id, COUNT(*) FROM Likes BY student_id
Gold: SELECT student_id ,  count(*) FROM Likes GROUP BY student_id
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT student_id, COUNT(*) FROM Likes BY student_id
Gold: SELECT student_id ,  count(*) FROM Likes GROUP BY student_id
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'id'
Predicted: SELECT AVG(grade) FROM Highschooler ID IN (SELECT DISTINCT student_id FROM Friend)
Gold: SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'id'
Predicted: SELECT AVG(grade) FROM Highschooler ID IN (SELECT DISTINCT student_id FROM Friend)
Gold: SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'id'
Predicted: SELECT MIN(grade) FROM Highschooler ID NOT IN (SELECT student_id FROM Friend SELECT friend_id FROM Friend)
Gold: SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'id'
Predicted: SELECT MIN(grade) FROM Highschooler ID NOT IN (SELECT student_id FROM Friend)
Gold: SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'state'
Predicted: SELECT professional_id, last_name, cell_number FROM Professionals state = 'IN' OR professional_id IN (SELECT professional_id FROM Treatments BY professional_id HAVING COUNT(*) > 2)
Gold: SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT Professionals.professional_id, Professionals.last_name, Professionals.cell_number FROM Professionals LEFT JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Professionals.professional_id, Professionals.last_name, Professionals.cell_number HAVING Professionals.state = 'IN' OR COUNT(Treatments.treatment_id) > 2
Gold: SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT Professionals.professional_id, Professionals.role_code, Professionals.email_address FROM Professionals LEFT JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.professional_id IS NULL
Gold: SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT Professionals.professional_id, Professionals.role_code, Professionals.email_address FROM Professionals LEFT JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.treatment_id IS NULL
Gold: SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.breed_code IN ( SELECT breed_code FROM Dogs BY breed_code HAVING COUNT(*) = ( SELECT MIN(breed_count) FROM ( SELECT COUNT(*) AS breed_count FROM Dogs BY breed_code ) AS counts ) )
Gold: SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.breed_code IN ( SELECT breed_code FROM Dogs BY breed_code HAVING COUNT(dog_id) = ( SELECT MIN(dog_count) FROM ( SELECT COUNT(dog_id) AS dog_count FROM Dogs BY breed_code ) AS breed_counts ) )
Gold: SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'state'
Predicted: SELECT email_address FROM Professionals state = 'HI' OR state = 'WI'
Gold: SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'state'
Predicted: SELECT email_address FROM Professionals state = 'HI' OR state = 'WI'
Gold: SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'city'
Predicted: SELECT role_code, street, city, state FROM Professionals city LIKE '%West%'
Gold: SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'city'
Predicted: SELECT role_code, street, city, state FROM Professionals city LIKE '%West%'
Gold: SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'state'
Predicted: SELECT first_name, last_name, email_address FROM Owners state LIKE '%North%'
Gold: SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'state'
Predicted: SELECT first_name, last_name, email_address FROM Owners state LIKE '%North%'
Gold: SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'age'
Predicted: SELECT COUNT(*) FROM Dogs age < (SELECT AVG(age) FROM Dogs)
Gold: SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'age'
Predicted: SELECT COUNT(*) FROM Dogs age < (SELECT AVG(age) FROM Dogs)
Gold: SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT cost_of_treatment FROM Treatments BY date_of_treatment DESC LIMIT 1
Gold: SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT cost_of_treatment FROM Treatments BY date_of_treatment DESC LIMIT 1
Gold: SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT COUNT(Dogs.dog_id) FROM Dogs LEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.treatment_id IS NULL
Gold: SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT COUNT(Dogs.dog_id) FROM Dogs LEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.treatment_id IS NULL
Gold: select count(*) from dogs where dog_id not in ( select dog_id from treatments )
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'not'
Predicted: SELECT COUNT(*) FROM Owners NOT EXISTS (SELECT 1 FROM Dogs Dogs.owner_id = Owners.owner_id AND Dogs.date_departed IS NULL)
Gold: SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'owner_id'
Predicted: SELECT COUNT(*) FROM Owners owner_id NOT IN (SELECT owner_id FROM Dogs)
Gold: SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'professional_id'
Predicted: SELECT COUNT(*) FROM Professionals professional_id NOT IN (SELECT professional_id FROM Treatments)
Gold: SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'professional_id'
Predicted: SELECT COUNT(*) FROM Professionals professional_id NOT IN (SELECT professional_id FROM Treatments)
Gold: SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'abandoned_yn'
Predicted: SELECT name, age, weight FROM Dogs abandoned_yn = 1
Gold: SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'abandoned_yn'
Predicted: SELECT name, age, weight FROM Dogs abandoned_yn = 1
Gold: SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'cross'
Predicted: SELECT Breeds.breed_name, Sizes.size_description FROM Breeds CROSS JOIN Sizes
Gold: SELECT DISTINCT breed_code ,  size_code FROM dogs
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name FROM singer BY Net_Worth_Millions ASC
Gold: SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC
Database: singer
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name FROM singer BY Net_Worth_Millions ASC
Gold: SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC
Database: singer
--------------------------------------------------------------------------------
PARSE FAILED: 'citizenship'
Predicted: SELECT Name FROM singer Citizenship != 'France'
Gold: SELECT Name FROM singer WHERE Citizenship != "France"
Database: singer
--------------------------------------------------------------------------------
PARSE FAILED: 'citizenship'
Predicted: SELECT Name FROM singer Citizenship != 'French'
Gold: SELECT Name FROM singer WHERE Citizenship != "France"
Database: singer
--------------------------------------------------------------------------------
PARSE FAILED: 'birth_year'
Predicted: SELECT Name FROM singer Birth_Year = 1948 OR Birth_Year = 1949
Gold: SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949
Database: singer
--------------------------------------------------------------------------------
PARSE FAILED: 'birth_year'
Predicted: SELECT Name FROM singer Birth_Year = 1948 OR Birth_Year = 1949
Gold: SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949
Database: singer
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name FROM singer BY Net_Worth_Millions DESC LIMIT 1
Gold: SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1
Database: singer
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name FROM singer BY Net_Worth_Millions DESC LIMIT 1
Gold: SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1
Database: singer
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Citizenship, COUNT(*) FROM singer BY Citizenship
Gold: SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship
Database: singer
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Citizenship, COUNT(*) FROM singer BY Citizenship
Gold: SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship
Database: singer
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Citizenship FROM singer BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1
Gold: SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1
Database: singer
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Citizenship FROM singer BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1
Gold: select citizenship from singer group by citizenship order by count(*) desc limit 1
Database: singer
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer BY Citizenship
Gold: SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship
Database: singer
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer BY Citizenship
Gold: SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship
Database: singer
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT singer.Name FROM singer LEFT JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Song_ID IS NULL
Gold: SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
Database: singer
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT singer.Name FROM singer LEFT JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Song_ID IS NULL
Gold: SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
Database: singer
--------------------------------------------------------------------------------
PARSE FAILED: 'birth_year'
Predicted: SELECT Citizenship FROM singer Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer Birth_Year > 1955
Gold: SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955
Database: singer
--------------------------------------------------------------------------------
PARSE FAILED: 'birth_year'
Predicted: SELECT Citizenship FROM singer Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer Birth_Year > 1955
Gold: SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955
Database: singer
--------------------------------------------------------------------------------
PARSE FAILED: 
Predicted: SELECT Properties.property_name FROM Properties JOIN Ref_Property_Types ON Properties.property_type_code = Ref_Property_Types.property_type_code WHERE Ref_Property_Types.property_type_description IN ('House', 'Apartment') AND Properties.room_count > 1
Gold: SELECT property_name FROM Properties WHERE property_type_code  =  "House" UNION SELECT property_name FROM Properties WHERE property_type_code  =  "Apartment" AND room_count  >  1
Database: real_estate_properties
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name, Country, Age FROM singer BY Age DESC
Gold: SELECT name ,  country ,  age FROM singer ORDER BY age DESC
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name, Country, Age FROM singer BY Age DESC
Gold: SELECT name ,  country ,  age FROM singer ORDER BY age DESC
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 'country'
Predicted: SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer Country = 'France'
Gold: SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 'country'
Predicted: SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer Country = 'France'
Gold: SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 'age'
Predicted: SELECT Song_Name, Song_release_year FROM singer Age = (SELECT MIN(Age) FROM singer)
Gold: SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 'age'
Predicted: SELECT Song_Name, Song_release_year FROM singer Age = (SELECT MIN(Age) FROM singer)
Gold: SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 'age'
Predicted: SELECT DISTINCT Country FROM singer Age > 20
Gold: SELECT DISTINCT country FROM singer WHERE age  >  20
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 'age'
Predicted: SELECT DISTINCT Country FROM singer Age > 20
Gold: SELECT DISTINCT country FROM singer WHERE age  >  20
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Country, COUNT(*) FROM singer BY Country
Gold: SELECT country ,  count(*) FROM singer GROUP BY country
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Country, COUNT(*) FROM singer BY Country
Gold: SELECT country ,  count(*) FROM singer GROUP BY country
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 'age'
Predicted: SELECT Song_Name FROM singer Age > (SELECT AVG(Age) FROM singer)
Gold: SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 'age'
Predicted: SELECT Song_Name FROM singer Age > (SELECT AVG(Age) FROM singer)
Gold: SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 'capacity'
Predicted: SELECT Location, Name FROM stadium Capacity BETWEEN 5000 AND 10000
Gold: SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 'capacity'
Predicted: SELECT Location, Name FROM stadium Capacity BETWEEN 5000 AND 10000
Gold: SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name, Capacity FROM stadium BY Average DESC LIMIT 1
Gold: SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name, Capacity FROM stadium BY Average DESC LIMIT 1
Gold: SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 'year'
Predicted: SELECT COUNT(*) FROM concert Year = 2014 OR Year = 2015
Gold: SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 'year'
Predicted: SELECT COUNT(*) FROM concert Year = 2014 OR Year = 2015
Gold: SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: '('
Predicted: SELECT stadium.Name, stadium.Capacity FROM stadium JOIN (SELECT Stadium_ID, COUNT(*) FROM concert Year > 2013 GROUP BY Stadium_ID ORDER BY COUNT(*) DESC LIMIT 1) AS T2 ON stadium.Stadium_ID = T2.Stadium_ID
Gold: select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Year FROM concert BY Year ORDER BY COUNT(*) DESC LIMIT 1
Gold: SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Year FROM concert BY Year ORDER BY COUNT(concert_ID) DESC LIMIT 1
Gold: SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT stadium.Name FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.concert_ID IS NULL
Gold: SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 'age'
Predicted: SELECT Country FROM singer Age > 40 INTERSECT SELECT Country FROM singer Age < 30
Gold: SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 'stadium_id'
Predicted: SELECT Name FROM stadium Stadium_ID NOT IN (SELECT Stadium_ID FROM concert Year = 2014)
Gold: SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 'stadium_id'
Predicted: SELECT Name FROM stadium Stadium_ID NOT IN (SELECT Stadium_ID FROM concert Year = 2014)
Gold: SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 'song_name'
Predicted: SELECT Name, Country FROM singer Song_Name LIKE '%Hey%'
Gold: SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 'song_name'
Predicted: SELECT Name, Country FROM singer Song_Name LIKE '%Hey%'
Gold: SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 
Predicted: SELECT stadium.Name, stadium.Location FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year IN (2014, 2015) GROUP BY stadium.Stadium_ID HAVING COUNT(DISTINCT concert.Year) = 2
Gold: SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 
Predicted: SELECT stadium.Name, stadium.Location FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year IN (2014, 2015) GROUP BY stadium.Stadium_ID HAVING COUNT(DISTINCT concert.Year) = 2
Gold: SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 'stadium_id'
Predicted: SELECT COUNT(*) FROM concert Stadium_ID = (SELECT Stadium_ID FROM stadium BY Capacity DESC LIMIT 1)
Gold: select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 'stadium_id'
Predicted: SELECT COUNT(*) FROM concert Stadium_ID = (SELECT Stadium_ID FROM stadium BY Capacity DESC LIMIT 1)
Gold: select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 'weight'
Predicted: SELECT COUNT(*) FROM Pets weight > 10
Gold: SELECT count(*) FROM pets WHERE weight  >  10
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 'weight'
Predicted: SELECT COUNT(*) FROM Pets weight > 10
Gold: SELECT count(*) FROM pets WHERE weight  >  10
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 'pettype'
Predicted: SELECT weight FROM Pets PetType = 'dog' ORDER BY pet_age ASC LIMIT 1
Gold: SELECT weight FROM pets ORDER BY pet_age LIMIT 1
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 'pettype'
Predicted: SELECT weight FROM Pets PetType = 'dog' ORDER BY pet_age ASC LIMIT 1
Gold: SELECT weight FROM pets ORDER BY pet_age LIMIT 1
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT PetType, MAX(weight) FROM Pets BY PetType
Gold: SELECT max(weight) ,  petType FROM pets GROUP BY petType
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT PetType, MAX(weight) FROM Pets BY PetType
Gold: SELECT max(weight) ,  petType FROM pets GROUP BY petType
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 
Predicted: SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('cat', 'dog') GROUP BY Student.StuID, Student.Fname HAVING COUNT(DISTINCT Pets.PetType) = 2
Gold: select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 
Predicted: SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('cat', 'dog') GROUP BY Student.StuID, Student.Fname HAVING COUNT(DISTINCT Pets.PetType) = 2
Gold: SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 'stuid'
Predicted: SELECT Major, Age FROM Student StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat')
Gold: SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 'stuid'
Predicted: SELECT Major, Age FROM Student StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat')
Gold: SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 'stuid'
Predicted: SELECT StuID FROM Student StuID NOT IN (SELECT StuID FROM Has_Pet Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat')
Gold: SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 'stuid'
Predicted: SELECT StuID FROM Student StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat')
Gold: SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: Error col: not
Predicted: SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'dog' AND NOT EXISTS (SELECT 1 FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Has_Pet.StuID = Student.StuID AND Pets.PetType = 'cat')
Gold: SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT PetType, weight FROM Pets BY pet_age ASC LIMIT 1
Gold: SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT PetType, weight FROM Pets BY pet_age ASC LIMIT 1
Gold: SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 'pet_age'
Predicted: SELECT PetID, weight FROM Pets pet_age > 1
Gold: SELECT petid ,  weight FROM pets WHERE pet_age  >  1
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 'pet_age'
Predicted: SELECT PetID, weight FROM Pets pet_age > 1
Gold: SELECT petid ,  weight FROM pets WHERE pet_age  >  1
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT PetType, AVG(pet_age), MAX(pet_age) FROM Pets BY PetType
Gold: SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT PetType, AVG(pet_age), MAX(pet_age) FROM Pets BY PetType
Gold: SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT PetType, AVG(weight) FROM Pets BY PetType
Gold: SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT PetType, AVG(weight) FROM Pets BY PetType
Gold: SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT StuID, COUNT(PetID) FROM Has_Pet BY StuID
Gold: SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 'stuid'
Predicted: SELECT AVG(Age) FROM Student StuID NOT IN (SELECT StuID FROM Has_Pet)
Gold: select avg(age) from student where stuid not in (select stuid from has_pet)
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT AVG(Student.Age) FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Has_Pet.PetID IS NULL
Gold: select avg(age) from student where stuid not in (select stuid from has_pet)
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 'country'
Predicted: SELECT COUNT(*) FROM car_makers Country = 'france'
Gold: SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'country'
Predicted: SELECT COUNT(*) FROM car_makers Country = 'France'
Gold: SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'cylinders'
Predicted: SELECT AVG(MPG) FROM cars_data Cylinders = 4
Gold: SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'cylinders'
Predicted: SELECT AVG(MPG) FROM cars_data Cylinders = 4
Gold: SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'cylinders'
Predicted: SELECT MIN(Weight) FROM cars_data Cylinders = 8 AND Year = 1974
Gold: select min(weight) from cars_data where cylinders  =  8 and year  =  1974
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'cylinders'
Predicted: SELECT MIN(Weight) FROM cars_data Cylinders = 8 AND Year = 1974
Gold: select min(weight) from cars_data where cylinders  =  8 and year  =  1974
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'horsepower'
Predicted: SELECT COUNT(*) FROM cars_data Horsepower > 150
Gold: SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'horsepower'
Predicted: SELECT COUNT(*) FROM cars_data Horsepower > 150
Gold: SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Year, AVG(Weight) FROM cars_data BY Year
Gold: SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Year, AVG(Weight), AVG(Year) FROM cars_data BY Year
Gold: SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'cylinders'
Predicted: SELECT cars_data.Horsepower, car_names.Make FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Cylinders = 3 AND cars_data.Horsepower = (SELECT MAX(Horsepower) FROM cars_data Cylinders = 3)
Gold: SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'year'
Predicted: SELECT AVG(Horsepower) FROM cars_data Year < 1980
Gold: SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'year'
Predicted: SELECT AVG(Horsepower) FROM cars_data Year < 1980
Gold: select avg(horsepower) from cars_data where year  <  1980;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Cylinders, MAX(Accelerate) FROM cars_data BY Cylinders
Gold: SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Cylinders, MAX(Accelerate) FROM cars_data BY Cylinders
Gold: SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Model FROM car_names BY Model ORDER BY COUNT(*) DESC LIMIT 1
Gold: SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Model FROM car_names BY Model ORDER BY COUNT(DISTINCT Make) DESC LIMIT 1
Gold: SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'cylinders'
Predicted: SELECT COUNT(*) FROM cars_data Cylinders > 4
Gold: SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'cylinders'
Predicted: SELECT COUNT(*) FROM cars_data Cylinders > 4
Gold: SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'year'
Predicted: SELECT COUNT(*) FROM cars_data Year = '1980'
Gold: SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'year'
Predicted: SELECT COUNT(*) FROM cars_data Year = 1980
Gold: SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT DISTINCT model_list.Model FROM model_list LEFT JOIN car_makers ON model_list.Maker = car_makers.Id LEFT JOIN car_names ON model_list.Model = car_names.Model LEFT JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.FullName = 'General Motors' OR cars_data.Weight > 3500
Gold: SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'weight'
Predicted: SELECT Year FROM cars_data Weight BETWEEN 3000 AND 4000
Gold: select distinct year from cars_data where weight between 3000 and 4000;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'weight'
Predicted: SELECT Year FROM cars_data Weight < 4000 INTERSECT SELECT Year FROM cars_data Weight > 3000
Gold: select distinct year from cars_data where weight between 3000 and 4000;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Horsepower FROM cars_data BY Accelerate DESC LIMIT 1
Gold: SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Horsepower FROM cars_data BY Accelerate DESC LIMIT 1
Gold: SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'accelerate'
Predicted: SELECT COUNT(*) FROM cars_data Accelerate > (SELECT MAX(Accelerate) FROM cars_data Horsepower = (SELECT MAX(Horsepower) FROM cars_data))
Gold: SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'accelerate'
Predicted: SELECT COUNT(*) FROM cars_data Accelerate > (SELECT Accelerate FROM cars_data BY Horsepower DESC LIMIT 1)
Gold: SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT COUNT(*) FROM (SELECT Country FROM car_makers BY Country HAVING COUNT(Id) > 2)
Gold: select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'as'
Predicted: SELECT COUNT(*) FROM (SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryName = car_makers.Country GROUP BY countries.CountryName HAVING COUNT(car_makers.Id) > 2) AS subquery
Gold: select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'cylinders'
Predicted: SELECT COUNT(*) FROM cars_data Cylinders > 6
Gold: SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'cylinders'
Predicted: SELECT COUNT(*) FROM cars_data Cylinders > 6
Gold: SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'cylinders'
Predicted: SELECT MAX(MPG) FROM cars_data Cylinders = 8 OR Year < 1980
Gold: select max(mpg) from cars_data where cylinders  =  8 or year  <  1980
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'cylinders'
Predicted: SELECT MAX(MPG) FROM cars_data Cylinders = 8 OR Year < 1980
Gold: select max(mpg) from cars_data where cylinders  =  8 or year  <  1980
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT countries.CountryName FROM countries LEFT JOIN car_makers ON countries.CountryName = car_makers.Country WHERE car_makers.Id IS NULL
Gold: SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT countries.CountryName FROM countries LEFT JOIN car_makers ON countries.CountryName = car_makers.Country WHERE car_makers.Country IS NULL
Gold: SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'select' not found
Predicted: WITH MakersWithAtLeastTwoModels AS ( SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Maker = model_list.Maker GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(model_list.ModelId) >= 2 ) SELECT Id, Maker FROM MakersWithAtLeastTwoModels ( SELECT COUNT(*) FROM MakersWithAtLeastTwoModels ) > 3
Gold: select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'airline'
Predicted: SELECT Country FROM airlines Airline = 'JetBlue Airways'
Gold: SELECT Country FROM AIRLINES WHERE Airline  =  "JetBlue Airways"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'airline'
Predicted: SELECT Country FROM airlines Airline = 'Jetblue Airways'
Gold: SELECT Country FROM AIRLINES WHERE Airline  =  "JetBlue Airways"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'airline'
Predicted: SELECT Abbreviation FROM airlines Airline = 'JetBlue Airways'
Gold: SELECT Abbreviation FROM AIRLINES WHERE Airline  =  "JetBlue Airways"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'airline'
Predicted: SELECT Abbreviation FROM airlines Airline = 'Jetblue Airways'
Gold: SELECT Abbreviation FROM AIRLINES WHERE Airline  =  "JetBlue Airways"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'country'
Predicted: SELECT Airline, Abbreviation FROM airlines Country = 'USA'
Gold: SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  "USA"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'country'
Predicted: SELECT Airline, Abbreviation FROM airlines Country = 'USA'
Gold: SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  "USA"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'city'
Predicted: SELECT AirportCode, AirportName FROM airports City = 'Anthony'
Gold: SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  "Anthony"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'city'
Predicted: SELECT AirportCode, AirportName FROM airports City = 'Anthony'
Gold: SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  "Anthony"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'abbreviation'
Predicted: SELECT Airline FROM airlines Abbreviation = 'UAL'
Gold: SELECT Airline FROM AIRLINES WHERE Abbreviation  =  "UAL"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'abbreviation'
Predicted: SELECT Airline FROM airlines Abbreviation = 'UAL'
Gold: SELECT Airline FROM AIRLINES WHERE Abbreviation  =  "UAL"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'country'
Predicted: SELECT COUNT(*) FROM airlines Country = 'USA'
Gold: SELECT count(*) FROM AIRLINES WHERE Country  =  "USA"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'country'
Predicted: SELECT COUNT(*) FROM airlines Country = 'USA'
Gold: SELECT count(*) FROM AIRLINES WHERE Country  =  "USA"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'airportname'
Predicted: SELECT City, Country FROM airports AirportName = 'Alton airport'
Gold: SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  "Alton"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'airportname'
Predicted: SELECT City, Country FROM airports AirportName = 'Alton airport'
Gold: SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  "Alton"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'airportcode'
Predicted: SELECT AirportName FROM airports AirportCode = 'AKO'
Gold: SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  "AKO"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'airportcode'
Predicted: SELECT AirportName FROM airports AirportCode = 'AKO'
Gold: SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  "AKO"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'city'
Predicted: SELECT AirportName FROM airports City = 'Aberdeen'
Gold: SELECT AirportName FROM AIRPORTS WHERE City = "Aberdeen"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'city'
Predicted: SELECT AirportName FROM airports City = 'Aberdeen'
Gold: SELECT AirportName FROM AIRPORTS WHERE City = "Aberdeen"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'sourceairport'
Predicted: SELECT COUNT(*) FROM flights SourceAirport = 'APG'
Gold: SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  "APG"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'sourceairport'
Predicted: SELECT COUNT(*) FROM flights SourceAirport = 'APG'
Gold: SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  "APG"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'destairport'
Predicted: SELECT COUNT(*) FROM flights DestAirport = 'ATO'
Gold: SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  "ATO"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'destairport'
Predicted: SELECT COUNT(*) FROM flights DestAirport = 'ATO'
Gold: SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  "ATO"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'airline'
Predicted: SELECT COUNT(*) FROM flights Airline = 'JetBlue Airways'
Gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = "JetBlue Airways"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'inner'
Predicted: SELECT airports.City FROM airports INNER JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY airports.City ORDER BY COUNT(flights.FlightNo) DESC LIMIT 1
Gold: SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT AirportCode FROM (SELECT SourceAirport AS AirportCode, COUNT(*) AS FlightCount FROM flights BY SourceAirport UNION ALL SELECT DestAirport AS AirportCode, COUNT(*) AS FlightCount FROM flights BY DestAirport) GROUP BY AirportCode ORDER BY SUM(FlightCount) DESC LIMIT 1
Gold: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'all'
Predicted: SELECT Airport FROM (SELECT SourceAirport AS Airport FROM flights ALL SELECT DestAirport AS Airport FROM flights) GROUP BY Airport ORDER BY COUNT(*) DESC LIMIT 1
Gold: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'all'
Predicted: SELECT AirportCode FROM ( SELECT SourceAirport AS AirportCode FROM flights ALL SELECT DestAirport AS AirportCode FROM flights ) AS all_flight_airports GROUP BY AirportCode ORDER BY COUNT(*) ASC LIMIT 1
Gold: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'all'
Predicted: SELECT AirportCode FROM (SELECT SourceAirport AS AirportCode FROM flights ALL SELECT DestAirport AS AirportCode FROM flights) GROUP BY AirportCode ORDER BY COUNT(*) ASC LIMIT 1
Gold: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Airline FROM flights BY Airline ORDER BY COUNT(*) DESC LIMIT 1
Gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'inner'
Predicted: SELECT airlines.Abbreviation, airlines.Country FROM airlines INNER JOIN flights ON airlines.Airline = flights.Airline GROUP BY airlines.Airline, airlines.Abbreviation, airlines.Country ORDER BY COUNT(*) ASC LIMIT 1
Gold: SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'sourceairport'
Predicted: SELECT Airline FROM flights SourceAirport = 'APG' INTERSECT SELECT Airline FROM flights SourceAirport = 'CVO'
Gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'sourceairport'
Predicted: SELECT Airline FROM flights SourceAirport IN ('APG', 'CVO') GROUP BY Airline HAVING COUNT(DISTINCT SourceAirport) = 2
Gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'sourceairport'
Predicted: SELECT Airline FROM flights SourceAirport = 'CVO' AND Airline NOT IN (SELECT Airline FROM flights SourceAirport = 'APG')
Gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'airline'
Predicted: SELECT FlightNo FROM flights Airline = 'United Airlines'
Gold: SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  "United Airlines"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'sourceairport'
Predicted: SELECT FlightNo FROM flights SourceAirport = 'APG'
Gold: SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  "APG"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'sourceairport'
Predicted: SELECT FlightNo FROM flights SourceAirport = 'APG'
Gold: SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  "APG"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'destairport'
Predicted: SELECT FlightNo FROM flights DestAirport = 'APG'
Gold: SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  "APG"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'destairport'
Predicted: SELECT FlightNo FROM flights DestAirport = 'APG'
Gold: SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  "APG"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'inner'
Predicted: SELECT flights.FlightNo FROM flights INNER JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'
Gold: SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'airportcode'
Predicted: SELECT AirportName FROM airports AirportCode NOT IN (SELECT SourceAirport FROM flights) AND AirportCode NOT IN (SELECT DestAirport FROM flights)
Gold: SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'airportcode'
Predicted: SELECT AirportName FROM airports AirportCode NOT IN (SELECT SourceAirport FROM flights SELECT DestAirport FROM flights)
Gold: SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name, Age FROM employee BY Age ASC
Gold: SELECT name FROM employee ORDER BY age
Database: employee_hire_evaluation
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name, Age FROM employee BY Age ASC
Gold: SELECT name FROM employee ORDER BY age
Database: employee_hire_evaluation
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT City, COUNT(*) FROM employee BY City
Gold: SELECT count(*) ,  city FROM employee GROUP BY city
Database: employee_hire_evaluation
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT City, COUNT(*) FROM employee BY City
Gold: SELECT count(*) ,  city FROM employee GROUP BY city
Database: employee_hire_evaluation
--------------------------------------------------------------------------------
PARSE FAILED: 'age'
Predicted: SELECT City FROM employee Age < 30 GROUP BY City HAVING COUNT(*) > 1
Gold: SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1
Database: employee_hire_evaluation
--------------------------------------------------------------------------------
PARSE FAILED: 'age'
Predicted: SELECT City FROM employee Age < 30 GROUP BY City HAVING COUNT(*) > 1
Gold: SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1
Database: employee_hire_evaluation
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Location, COUNT(*) FROM shop BY Location
Gold: SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION
Database: employee_hire_evaluation
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Location, COUNT(*) FROM shop BY Location
Gold: SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION
Database: employee_hire_evaluation
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Manager_name, District FROM shop BY Number_products DESC LIMIT 1
Gold: SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1
Database: employee_hire_evaluation
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Manager_name, District FROM shop BY Number_products DESC LIMIT 1
Gold: SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1
Database: employee_hire_evaluation
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name, Location, District FROM shop BY Number_products DESC
Gold: SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC
Database: employee_hire_evaluation
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name, Location, District FROM shop BY Number_products DESC
Gold: SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC
Database: employee_hire_evaluation
--------------------------------------------------------------------------------
PARSE FAILED: 'number_products'
Predicted: SELECT Name FROM shop Number_products > (SELECT AVG(Number_products) FROM shop)
Gold: SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)
Database: employee_hire_evaluation
--------------------------------------------------------------------------------
PARSE FAILED: 'number_products'
Predicted: SELECT Name FROM shop Number_products > (SELECT AVG(Number_products) FROM shop)
Gold: SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)
Database: employee_hire_evaluation
--------------------------------------------------------------------------------
PARSE FAILED: 'employee_id'
Predicted: SELECT Name FROM employee Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
Gold: SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
Database: employee_hire_evaluation
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT employee.Name FROM employee LEFT JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID WHERE evaluation.Employee_ID IS NULL
Gold: SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
Database: employee_hire_evaluation
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT shop.Name FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID WHERE hiring.Employee_ID IS NULL
Gold: SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)
Database: employee_hire_evaluation
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT shop.Name FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID WHERE hiring.Employee_ID IS NULL
Gold: SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)
Database: employee_hire_evaluation
--------------------------------------------------------------------------------
PARSE FAILED: 'number_products'
Predicted: SELECT District FROM shop Number_products < 3000 INTERSECT SELECT District FROM shop Number_products > 10000
Gold: SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000
Database: employee_hire_evaluation
--------------------------------------------------------------------------------
PARSE FAILED: 'number_products'
Predicted: SELECT District FROM shop Number_products < 3000 INTERSECT SELECT District FROM shop Number_products > 10000
Gold: SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000
Database: employee_hire_evaluation
--------------------------------------------------------------------------------
PARSE FAILED: 'document_description'
Predicted: SELECT Document_Name, Template_ID FROM Documents Document_Description LIKE '%w%'
Gold: SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE "%w%"
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'document_description'
Predicted: SELECT Document_Name, Template_ID FROM Documents Document_Description LIKE '%w%'
Gold: SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE "%w%"
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'document_name'
Predicted: SELECT Document_ID, Template_ID, Document_Description FROM Documents Document_Name = 'Robbin CV'
Gold: SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  "Robbin CV"
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'document_name'
Predicted: SELECT Document_ID, Template_ID, Document_Description FROM Documents Document_Name = 'Robbin CV'
Gold: SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  "Robbin CV"
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Template_ID, COUNT(*) FROM Documents BY Template_ID
Gold: SELECT template_id ,  count(*) FROM Documents GROUP BY template_id
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Template_ID FROM Documents BY Template_ID HAVING COUNT(*) > 1
Gold: SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT Templates.Template_ID FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Template_ID IS NULL
Gold: SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT Templates.Template_ID FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Template_ID IS NULL
Gold: SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'template_type_code'
Predicted: SELECT Template_ID FROM Templates Template_Type_Code = 'PP' OR Template_Type_Code = 'PPT'
Gold: SELECT template_id FROM Templates WHERE template_type_code  =  "PP" OR template_type_code  =  "PPT"
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'template_type_code'
Predicted: SELECT Template_ID FROM Templates Template_Type_Code IN ('PP', 'PPT')
Gold: SELECT template_id FROM Templates WHERE template_type_code  =  "PP" OR template_type_code  =  "PPT"
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'template_type_code'
Predicted: SELECT COUNT(*) FROM Templates Template_Type_Code = 'CV'
Gold: SELECT count(*) FROM Templates WHERE template_type_code  =  "CV"
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'version_number'
Predicted: SELECT Version_Number, Template_Type_Code FROM Templates Version_Number > 5
Gold: SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'version_number'
Predicted: SELECT Version_Number, Template_Type_Code FROM Templates Version_Number > 5
Gold: SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Template_Type_Code FROM Templates BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1
Gold: SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Template_Type_Code FROM Templates BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1
Gold: SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Template_Type_Code FROM Templates BY Template_Type_Code HAVING COUNT(*) < 3
Gold: SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Version_Number, Template_Type_Code FROM Templates BY Version_Number ASC LIMIT 1
Gold: SELECT min(Version_Number) ,  template_type_code FROM Templates
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'version_number'
Predicted: SELECT Template_Type_Code, Version_Number FROM Templates Version_Number = (SELECT MIN(Version_Number) FROM Templates)
Gold: SELECT min(Version_Number) ,  template_type_code FROM Templates
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT Ref_Template_Types.Template_Type_Code, COUNT(Documents.Document_ID) FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Code
Gold: SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: Error col: not
Predicted: SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE NOT EXISTS ( SELECT 1 FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code )
Gold: SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'not'
Predicted: SELECT Template_Type_Code FROM Ref_Template_Types NOT EXISTS ( SELECT 1 FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code )
Gold: SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'template_type_code'
Predicted: SELECT Template_Type_Description FROM Ref_Template_Types Template_Type_Code = 'AD'
Gold: SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  "AD"
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'template_type_code'
Predicted: SELECT Template_Type_Description FROM Ref_Template_Types Template_Type_Code = 'AD'
Gold: SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  "AD"
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'template_type_description'
Predicted: SELECT Template_Type_Code FROM Ref_Template_Types Template_Type_Description = 'Book'
Gold: SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  "Book"
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'template_type_description'
Predicted: SELECT Template_Type_Code FROM Ref_Template_Types Template_Type_Description = 'Book'
Gold: SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  "Book"
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'paragraph_text'
Predicted: SELECT Paragraph_ID, Document_ID, Paragraph_Text, Other_Details FROM Paragraphs Paragraph_Text = 'Korea '
Gold: select other_details from paragraphs where paragraph_text like 'korea'
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'paragraph_text'
Predicted: SELECT * FROM Paragraphs Paragraph_Text LIKE '%Korea %'
Gold: select other_details from paragraphs where paragraph_text like 'korea'
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID
Gold: SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Document_ID, COUNT(*) FROM Paragraphs BY Document_ID ORDER BY Document_ID
Gold: SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name
Gold: SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Document_ID FROM Paragraphs BY Document_ID HAVING COUNT(*) >= 2
Gold: SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: '('
Predicted: SELECT Documents.Document_ID, Documents.Document_Name FROM Documents JOIN ( SELECT Document_ID, COUNT(*) AS paragraph_count FROM Paragraphs BY Document_ID ) AS P_Counts ON Documents.Document_ID = P_Counts.Document_ID ORDER BY P_Counts.paragraph_count DESC LIMIT 1
Gold: SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Document_ID FROM Paragraphs BY Document_ID ORDER BY COUNT(Paragraph_ID) ASC LIMIT 1
Gold: SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Document_ID FROM Paragraphs BY Document_ID ORDER BY COUNT(*) ASC LIMIT 1
Gold: SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'paragraph_text'
Predicted: SELECT Document_ID FROM Paragraphs Paragraph_Text LIKE '%Brazil%' AND Paragraph_Text LIKE '%Ireland%'
Gold: SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'paragraph_text'
Predicted: SELECT Document_ID FROM Paragraphs Paragraph_Text LIKE '%Brazil%' INTERSECT SELECT Document_ID FROM Paragraphs Paragraph_Text LIKE '%Ireland%'
Gold: SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name FROM teacher BY Age ASC
Gold: SELECT Name FROM teacher ORDER BY Age ASC
Database: course_teach
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name FROM teacher BY Age ASC
Gold: SELECT Name FROM teacher ORDER BY Age ASC
Database: course_teach
--------------------------------------------------------------------------------
PARSE FAILED: 'hometown'
Predicted: SELECT Name FROM teacher Hometown != 'Little Lever Urban District'
Gold: select name from teacher where hometown != "little lever urban district"
Database: course_teach
--------------------------------------------------------------------------------
PARSE FAILED: 'hometown'
Predicted: SELECT Name FROM teacher Hometown != 'Little Lever Urban District'
Gold: select name from teacher where hometown != "little lever urban district"
Database: course_teach
--------------------------------------------------------------------------------
PARSE FAILED: 'age'
Predicted: SELECT Name FROM teacher Age IN (32, 33)
Gold: SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33
Database: course_teach
--------------------------------------------------------------------------------
PARSE FAILED: 'age'
Predicted: SELECT Name FROM teacher Age IN (32, 33)
Gold: SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33
Database: course_teach
--------------------------------------------------------------------------------
PARSE FAILED: 'age'
Predicted: SELECT Hometown FROM teacher Age = (SELECT MIN(Age) FROM teacher)
Gold: SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1
Database: course_teach
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Hometown FROM teacher BY Age ASC LIMIT 1
Gold: SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1
Database: course_teach
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Hometown, COUNT(*) FROM teacher BY Hometown
Gold: SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown
Database: course_teach
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Hometown, COUNT(*) FROM teacher BY Hometown
Gold: SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown
Database: course_teach
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Hometown FROM teacher BY Hometown ORDER BY COUNT(*) DESC LIMIT 1
Gold: SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1
Database: course_teach
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Hometown, COUNT(*) FROM teacher BY Hometown ORDER BY COUNT(*) DESC LIMIT 1
Gold: SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1
Database: course_teach
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Hometown FROM teacher BY Hometown HAVING COUNT(*) >= 2
Gold: SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2
Database: course_teach
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Hometown FROM teacher BY Hometown HAVING COUNT(*) >= 2
Gold: SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2
Database: course_teach
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT teacher.Name FROM teacher LEFT JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID WHERE course_arrange.Teacher_ID IS NULL
Gold: SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)
Database: course_teach
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT teacher.Name FROM teacher LEFT JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID WHERE course_arrange.Teacher_ID IS NULL
Gold: SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)
Database: course_teach
--------------------------------------------------------------------------------
PARSE FAILED: 'age'
Predicted: SELECT COUNT(*) FROM visitor Age < 30
Gold: SELECT count(*) FROM visitor WHERE age  <  30
Database: museum_visit
--------------------------------------------------------------------------------
PARSE FAILED: 'level_of_membership'
Predicted: SELECT Name FROM visitor Level_of_membership > 4 ORDER BY Level_of_membership DESC
Gold: SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC
Database: museum_visit
--------------------------------------------------------------------------------
PARSE FAILED: 'level_of_membership'
Predicted: SELECT AVG(Age) FROM visitor Level_of_membership <= 4
Gold: SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4
Database: museum_visit
--------------------------------------------------------------------------------
PARSE FAILED: 'level_of_membership'
Predicted: SELECT Name, Level_of_membership FROM visitor Level_of_membership > 4 ORDER BY Age DESC
Gold: SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC
Database: museum_visit
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Museum_ID, Name FROM museum BY Num_of_Staff DESC LIMIT 1
Gold: SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1
Database: museum_visit
--------------------------------------------------------------------------------
PARSE FAILED: 'open_year'
Predicted: SELECT AVG(Num_of_Staff) FROM museum Open_Year < 2009
Gold: SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009
Database: museum_visit
--------------------------------------------------------------------------------
PARSE FAILED: 'name'
Predicted: SELECT Open_Year, Num_of_Staff FROM museum Name = 'Plaza Museum'
Gold: SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'
Database: museum_visit
--------------------------------------------------------------------------------
PARSE FAILED: 'num_of_staff'
Predicted: SELECT Name FROM museum Num_of_Staff > (SELECT MIN(Num_of_Staff) FROM museum Open_Year > 2010)
Gold: SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)
Database: museum_visit
--------------------------------------------------------------------------------
PARSE FAILED: '('
Predicted: SELECT visitor.ID, visitor.Name, visitor.Level_of_membership FROM visitor JOIN ( SELECT visitor_ID, SUM(Total_spent) AS total_spent_amount FROM visit BY visitor_ID ) AS visitor_spending ON visitor.ID = visitor_spending.visitor_ID WHERE visitor_spending.total_spent_amount = ( SELECT MAX(total_spent_amount) FROM ( SELECT SUM(Total_spent) AS total_spent_amount FROM visit BY visitor_ID ) AS max_spending_subquery )
Gold: SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1
Database: museum_visit
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT museum.Name FROM museum LEFT JOIN visit ON museum.Museum_ID = visit.Museum_ID WHERE visit.Museum_ID IS NULL
Gold: SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)
Database: museum_visit
--------------------------------------------------------------------------------
PARSE FAILED: 'id'
Predicted: SELECT COUNT(ID) FROM visitor ID NOT IN ( SELECT visit.visitor_ID FROM visit JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE museum.Open_Year > 2010 )
Gold: SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)
Database: museum_visit
--------------------------------------------------------------------------------
PARSE FAILED: 'open_year'
Predicted: SELECT COUNT(*) FROM museum Open_Year > 2013 OR Open_Year < 2008
Gold: SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008
Database: museum_visit
--------------------------------------------------------------------------------
PARSE FAILED: 'country_code'
Predicted: SELECT first_name, birth_date FROM players country_code = 'USA'
Gold: SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'country_code'
Predicted: SELECT first_name, birth_date FROM players country_code = 'USA'
Gold: SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT tourney_name FROM matches BY tourney_name HAVING COUNT(*) > 10
Gold: SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT tourney_name FROM matches BY tourney_name HAVING COUNT(*) > 10
Gold: SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'year'
Predicted: SELECT winner_name FROM matches year = 2013 INTERSECT SELECT winner_name FROM matches year = 2016
Gold: SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'year'
Predicted: SELECT winner_name FROM matches year IN (2013, 2016) GROUP BY winner_name HAVING COUNT(DISTINCT year) = 2
Gold: SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'year'
Predicted: SELECT COUNT(*) FROM matches year = 2013 OR year = 2016
Gold: SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'year'
Predicted: SELECT COUNT(*) FROM matches year = 2013 OR year = 2016
Gold: SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: '('
Predicted: SELECT players.country_code, players.first_name FROM players JOIN (SELECT winner_id FROM matches tourney_name = 'WTA Championships' INTERSECT SELECT winner_id FROM matches tourney_name = 'Australian Open') AS T2 ON players.player_id = T2.winner_id
Gold: SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: '('
Predicted: SELECT players.first_name, players.country_code FROM players JOIN ( SELECT winner_id FROM matches tourney_name IN ('WTA Championships', 'Australian Open') GROUP BY winner_id HAVING COUNT(DISTINCT tourney_name) = 2 ) AS T2 ON players.player_id = T2.winner_id
Gold: SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT first_name, country_code FROM players BY birth_date ASC LIMIT 1
Gold: SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT first_name, country_code FROM players BY birth_date ASC LIMIT 1
Gold: SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT first_name, last_name FROM players BY birth_date
Gold: SELECT first_name ,  last_name FROM players ORDER BY birth_date
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT first_name, last_name FROM players BY birth_date
Gold: SELECT first_name ,  last_name FROM players ORDER BY birth_date
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'hand'
Predicted: SELECT first_name, last_name FROM players hand = 'L' ORDER BY birth_date
Gold: SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'hand'
Predicted: SELECT CONCAT(first_name, ' ', last_name) FROM players hand = 'L' ORDER BY birth_date
Gold: SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'inner'
Predicted: SELECT players.first_name, players.country_code FROM players INNER JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name, players.country_code ORDER BY COUNT(rankings.tours) DESC LIMIT 1
Gold: SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT year FROM matches BY year ORDER BY COUNT(*) DESC LIMIT 1
Gold: SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT year FROM matches BY year ORDER BY COUNT(*) DESC LIMIT 1
Gold: SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT winner_name, winner_rank_points FROM matches BY winner_id, winner_name, winner_rank_points ORDER BY COUNT(*) DESC LIMIT 1
Gold: SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: Error col: select
Predicted: SELECT players.first_name, players.last_name, ( SELECT rankings.ranking_points FROM rankings WHERE rankings.player_id = players.player_id ORDER BY rankings.ranking_date DESC LIMIT 1 ) AS rank_points FROM players WHERE players.player_id = ( SELECT winner_id FROM matches BY winner_id ORDER BY COUNT(*) DESC LIMIT 1 )
Gold: SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'tourney_name'
Predicted: SELECT winner_name FROM matches tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1
Gold: SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'tourney_name'
Predicted: SELECT winner_name FROM matches tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1
Gold: SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'minutes'
Predicted: SELECT loser_name, winner_name FROM matches minutes = (SELECT MAX(minutes) FROM matches)
Gold: SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT winner_name, loser_name FROM matches BY minutes DESC LIMIT 1
Gold: SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT country_code, COUNT(player_id) FROM players BY country_code
Gold: SELECT count(*) ,  country_code FROM players GROUP BY country_code
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT country_code, COUNT(*) FROM players BY country_code
Gold: SELECT count(*) ,  country_code FROM players GROUP BY country_code
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT country_code FROM players BY country_code ORDER BY COUNT(*) DESC LIMIT 1
Gold: SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT country_code FROM players BY country_code ORDER BY COUNT(player_id) DESC LIMIT 1
Gold: SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT country_code FROM players BY country_code HAVING COUNT(*) > 50
Gold: SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT country_code FROM players BY country_code HAVING COUNT(*) > 50
Gold: SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT ranking_date, SUM(tours) FROM rankings BY ranking_date
Gold: SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT ranking_date, SUM(tours) FROM rankings BY ranking_date
Gold: SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT year, COUNT(*) FROM matches BY year
Gold: SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT year, COUNT(*) FROM matches BY year
Gold: SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT winner_name, winner_rank FROM matches BY winner_age ASC LIMIT 3
Gold: SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT winner_name, winner_rank FROM matches BY winner_age ASC LIMIT 3
Gold: SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'tourney_name'
Predicted: SELECT COUNT(DISTINCT winner_id) FROM matches tourney_name = 'WTA Championships' AND winner_hand = 'L'
Gold: SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'winner_hand'
Predicted: SELECT COUNT(*) FROM matches winner_hand = 'L' AND tourney_name = 'WTA Championships'
Gold: SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'inner'
Predicted: SELECT players.first_name, players.country_code, players.birth_date FROM players INNER JOIN matches ON players.player_id = matches.winner_id ORDER BY matches.winner_rank_points DESC LIMIT 1
Gold: SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: '('
Predicted: SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN ( SELECT winner_id FROM matches BY winner_id ORDER BY SUM(winner_rank_points) DESC LIMIT 1 ) AS T2 ON players.player_id = T2.winner_id
Gold: SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT hand, COUNT(*) FROM players BY hand
Gold: SELECT count(*) ,  hand FROM players GROUP BY hand
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT hand, COUNT(*) FROM players BY hand
Gold: SELECT count(*) ,  hand FROM players GROUP BY hand
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 'disposition_of_ship'
Predicted: SELECT COUNT(*) FROM ship disposition_of_ship = 'Captured'
Gold: SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'
Database: battle_death
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT name, tonnage FROM ship BY name DESC
Gold: SELECT name ,  tonnage FROM ship ORDER BY name DESC
Database: battle_death
--------------------------------------------------------------------------------
PARSE FAILED: 'bulgarian_commander'
Predicted: SELECT name, result FROM battle bulgarian_commander != 'Boril'
Gold: SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'
Database: battle_death
--------------------------------------------------------------------------------
PARSE FAILED: 'bulgarian_commander'
Predicted: SELECT DISTINCT name FROM battle bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'
Gold: SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'
Database: battle_death
--------------------------------------------------------------------------------
PARSE FAILED: 'id'
Predicted: SELECT COUNT(*) FROM battle id NOT IN (SELECT lost_in_battle FROM ship tonnage = 225 AND lost_in_battle IS NOT NULL)
Gold: SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );
Database: battle_death
--------------------------------------------------------------------------------
PARSE FAILED: Error col: not
Predicted: SELECT battle.name, battle.result, battle.bulgarian_commander FROM battle WHERE NOT EXISTS ( SELECT 1 FROM ship WHERE ship.lost_in_battle = battle.id AND ship.location = 'English Channel' )
Gold: SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'
Database: battle_death
--------------------------------------------------------------------------------
PARSE FAILED: 'note'
Predicted: SELECT note FROM death note LIKE '%East%'
Gold: SELECT note FROM death WHERE note LIKE '%East%'
Database: battle_death
--------------------------------------------------------------------------------
PARSE FAILED: 'course_name'
Predicted: SELECT course_description FROM Courses course_name = 'math'
Gold: SELECT course_description FROM Courses WHERE course_name  =  'math'
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'course_name'
Predicted: SELECT course_description FROM Courses course_name LIKE '%Math%'
Gold: SELECT course_description FROM Courses WHERE course_name  =  'math'
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'city'
Predicted: SELECT zip_postcode FROM Addresses city = 'Port Chelsea'
Gold: SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'city'
Predicted: SELECT zip_postcode FROM Addresses city = 'Port Chelsea'
Gold: SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT Courses.course_name, Courses.course_id FROM Courses LEFT JOIN Sections ON Courses.course_id = Sections.course_id GROUP BY Courses.course_id, Courses.course_name HAVING COUNT(Sections.section_id) <= 2
Gold: SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT section_name FROM Sections BY section_name DESC
Gold: SELECT section_name FROM Sections ORDER BY section_name DESC
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT section_name FROM Sections BY section_name DESC
Gold: SELECT section_name FROM Sections ORDER BY section_name DESC
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'department_name'
Predicted: SELECT department_description FROM Departments department_name LIKE '%the computer%'
Gold: SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'department_name'
Predicted: SELECT department_description FROM Departments department_name LIKE '%computer%'
Gold: SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'inner'
Predicted: SELECT Students.first_name, Students.middle_name, Students.last_name, Students.student_id FROM Students INNER JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id, Students.first_name, Students.middle_name, Students.last_name, Student_Enrolment.semester_id HAVING COUNT(DISTINCT Student_Enrolment.degree_program_id) = 2
Gold: SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: Error col: as
Predicted: SELECT Students.first_name, Students.middle_name, Students.last_name, Students.student_id, COUNT(Student_Enrolment.student_enrolment_id) AS enrollment_count FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id, Students.first_name, Students.middle_name, Students.last_name ORDER BY enrollment_count DESC LIMIT 1
Gold: SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT Semesters.semester_name FROM Semesters LEFT JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id WHERE Student_Enrolment.semester_id IS NULL
Gold: SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT Semesters.semester_name FROM Semesters LEFT JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id WHERE Student_Enrolment.semester_id IS NULL
Gold: SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: Error col: not
Predicted: SELECT Students.last_name FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id WHERE Addresses.state_province_county = 'North Carolina' AND NOT EXISTS (SELECT 1 FROM Student_Enrolment WHERE Student_Enrolment.student_id = Students.student_id)
Gold: SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'first_name'
Predicted: SELECT cell_mobile_number FROM Students first_name = 'Timmothy' AND last_name = 'Ward'
Gold: SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'first_name'
Predicted: SELECT cell_mobile_number FROM Students first_name = 'Timmothy' AND last_name = 'Ward'
Gold: select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT first_name, middle_name, last_name FROM Students BY date_first_registered ASC LIMIT 1
Gold: SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT first_name, middle_name, last_name FROM Students BY date_first_registered ASC LIMIT 1
Gold: SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT first_name, middle_name, last_name FROM Students BY date_left ASC LIMIT 1
Gold: SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT first_name, middle_name, last_name FROM Students BY date_left ASC LIMIT 1
Gold: SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'permanent_address_id'
Predicted: SELECT first_name FROM Students permanent_address_id != current_address_id
Gold: SELECT first_name FROM Students WHERE current_address_id != permanent_address_id
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'permanent_address_id'
Predicted: SELECT first_name FROM Students permanent_address_id != current_address_id
Gold: SELECT first_name FROM Students WHERE current_address_id != permanent_address_id
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: '('
Predicted: SELECT Addresses.address_id, Addresses.line_1, Addresses.line_2 FROM Addresses JOIN ( SELECT current_address_id FROM Students current_address_id IS NOT NULL GROUP BY current_address_id ORDER BY COUNT(student_id) DESC LIMIT 1 ) AS TopAddress ON Addresses.address_id = TopAddress.current_address_id
Gold: SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: Error col: year
Predicted: SELECT AVG(YEAR(transcript_date)) FROM Transcripts
Gold: SELECT avg(transcript_date) FROM Transcripts
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT transcript_date, other_details FROM Transcripts BY transcript_date ASC LIMIT 1
Gold: SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'transcript_date'
Predicted: SELECT transcript_id, transcript_date, other_details FROM Transcripts transcript_date = (SELECT MIN(transcript_date) FROM Transcripts)
Gold: SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT student_course_id, COUNT(*) FROM Transcript_Contents BY student_course_id ORDER BY COUNT(*) DESC LIMIT 1
Gold: SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'inner'
Predicted: SELECT Student_Enrolment_Courses.student_enrolment_id, COUNT(Transcript_Contents.transcript_id) FROM Transcript_Contents INNER JOIN Student_Enrolment_Courses ON Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id GROUP BY Transcript_Contents.student_course_id ORDER BY COUNT(Transcript_Contents.transcript_id) DESC LIMIT 1
Gold: SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: '('
Predicted: SELECT Transcripts.transcript_date, Transcripts.transcript_id FROM Transcripts JOIN ( SELECT transcript_id, COUNT(student_course_id) AS num_results FROM Transcript_Contents BY transcript_id ORDER BY num_results ASC LIMIT 1 ) AS MinResults ON Transcripts.transcript_id = MinResults.transcript_id
Gold: SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: Error col: case
Predicted: SELECT Semesters.semester_name FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name LIKE '%Master%' OR Degree_Programs.degree_summary_name LIKE '%Bachelor%' GROUP BY Semesters.semester_id, Semesters.semester_name HAVING COUNT(DISTINCT CASE WHEN Degree_Programs.degree_summary_name LIKE '%Master%' THEN 1 END) > 0 AND COUNT(DISTINCT CASE WHEN Degree_Programs.degree_summary_name LIKE '%Bachelor%' THEN 1 END) > 0
Gold: SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 
Predicted: SELECT Semesters.semester_id FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name IN ('Masters', 'Bachelors') GROUP BY Semesters.semester_id HAVING COUNT(DISTINCT Degree_Programs.degree_summary_name) = 2
Gold: SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT * FROM Students BY last_name DESC, first_name DESC
Gold: SELECT other_student_details FROM Students ORDER BY other_student_details DESC
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT other_student_details FROM Students BY last_name DESC, first_name DESC
Gold: SELECT other_student_details FROM Students ORDER BY other_student_details DESC
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'section_name'
Predicted: SELECT section_description FROM Sections section_name = 'h'
Gold: SELECT section_description FROM Sections WHERE section_name  =  'h'
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'section_name'
Predicted: SELECT section_description FROM Sections section_name = 'h'
Gold: SELECT section_description FROM Sections WHERE section_name  =  'h'
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Title FROM Cartoon BY Title ASC
Gold: SELECT Title FROM Cartoon ORDER BY title
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Title FROM Cartoon BY Title ASC
Gold: SELECT Title FROM Cartoon ORDER BY title
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'directed_by'
Predicted: SELECT * FROM Cartoon Directed_by = 'Ben Jones'
Gold: SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones";
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'directed_by'
Predicted: SELECT Title FROM Cartoon Directed_by = 'Ben Jones'
Gold: SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones";
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'written_by'
Predicted: SELECT COUNT(*) FROM Cartoon Written_by = 'Joseph Kuhr'
Gold: SELECT count(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr";
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'written_by'
Predicted: SELECT COUNT(*) FROM Cartoon Written_by = 'Joseph Kuhr'
Gold: SELECT count(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr";
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Title, Directed_by FROM Cartoon BY Original_air_date
Gold: SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Title, Directed_by FROM Cartoon BY Original_air_date
Gold: SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'directed_by'
Predicted: SELECT Title FROM Cartoon Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'
Gold: SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" OR Directed_by = "Brandon Vietti";
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'directed_by'
Predicted: SELECT Title FROM Cartoon Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'
Gold: SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" OR Directed_by = "Brandon Vietti";
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Country, COUNT(*) FROM TV_Channel BY Country ORDER BY COUNT(*) DESC LIMIT 1
Gold: SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Country, COUNT(*) FROM TV_Channel BY Country ORDER BY COUNT(*) DESC LIMIT 1
Gold: SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'series_name'
Predicted: SELECT Content FROM TV_Channel series_name = 'Sky Radio'
Gold: SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio";
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'series_name'
Predicted: SELECT Content FROM TV_Channel series_name = 'Sky Radio'
Gold: SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio";
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'series_name'
Predicted: SELECT Package_Option FROM TV_Channel series_name = 'Sky Radio'
Gold: SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio";
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'series_name'
Predicted: SELECT Package_Option FROM TV_Channel series_name = 'Sky Radio'
Gold: SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio";
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'language'
Predicted: SELECT COUNT(*) FROM TV_Channel Language = 'English'
Gold: SELECT count(*) FROM TV_Channel WHERE LANGUAGE = "English";
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'language'
Predicted: SELECT COUNT(*) FROM TV_Channel Language = 'English'
Gold: SELECT count(*) FROM TV_Channel WHERE LANGUAGE = "English";
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Language, COUNT(*) FROM TV_Channel BY Language ORDER BY COUNT(*) ASC LIMIT 1
Gold: SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Language, COUNT(*) FROM TV_Channel BY Language HAVING COUNT(*) = (SELECT MIN(channel_count) FROM (SELECT COUNT(*) AS channel_count FROM TV_Channel BY Language) AS subquery_counts)
Gold: SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Language, COUNT(*) FROM TV_Channel BY Language
Gold: SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Language, COUNT(*) FROM TV_Channel BY Language
Gold: SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Episode FROM TV_series BY Rating
Gold: SELECT Episode FROM TV_series ORDER BY rating
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Episode FROM TV_series BY Rating
Gold: SELECT Episode FROM TV_series ORDER BY rating
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Episode, Rating FROM TV_series BY Rating DESC LIMIT 3
Gold: SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Episode, Rating FROM TV_series BY Rating DESC LIMIT 3
Gold: SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'episode'
Predicted: SELECT Air_Date FROM TV_series Episode = 'A Love of a Lifetime'
Gold: SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime";
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'episode'
Predicted: SELECT Air_Date FROM TV_series Episode = 'A Love of a Lifetime'
Gold: SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime";
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'episode'
Predicted: SELECT Weekly_Rank FROM TV_series Episode = 'A Love of a Lifetime'
Gold: SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime";
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'episode'
Predicted: SELECT Weekly_Rank FROM TV_series Episode = 'A Love of a Lifetime'
Gold: SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime";
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Directed_by, COUNT(*) FROM Cartoon BY Directed_by
Gold: SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Directed_by, COUNT(*) FROM Cartoon BY Directed_by
Gold: SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Production_code, Channel FROM Cartoon BY Original_air_date DESC LIMIT 1
Gold: select production_code ,  channel from cartoon order by original_air_date desc limit 1
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Production_code, Channel FROM Cartoon BY Original_air_date DESC LIMIT 1
Gold: select production_code ,  channel from cartoon order by original_air_date desc limit 1
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'hight_definition_tv'
Predicted: SELECT Package_Option, series_name FROM TV_Channel Hight_definition_TV = 'Yes'
Gold: SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  "yes"
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'hight_definition_tv'
Predicted: SELECT Package_Option, series_name FROM TV_Channel Hight_definition_TV = 'Yes'
Gold: SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  "yes"
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'series_name'
Predicted: SELECT DISTINCT Country FROM TV_Channel series_name NOT IN (SELECT Channel FROM Cartoon Written_by = 'Todd Casey')
Gold: SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'country'
Predicted: SELECT DISTINCT Country FROM TV_Channel Country NOT IN (SELECT TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.series_name = Cartoon.Channel WHERE Cartoon.Written_by = 'Todd Casey')
Gold: SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 
Predicted: SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang') GROUP BY TV_Channel.id HAVING COUNT(DISTINCT Cartoon.Directed_by) = 2
Gold: SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'language'
Predicted: SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel Language != 'English'
Gold: SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'language'
Predicted: SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel Language != 'English'
Gold: SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'country'
Predicted: SELECT id FROM TV_Channel Country IN (SELECT Country FROM TV_Channel BY Country HAVING COUNT(*) > 2)
Gold: SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'series_name'
Predicted: SELECT id FROM TV_Channel series_name IN (SELECT series_name FROM TV_Channel BY series_name HAVING COUNT(*) > 2)
Gold: SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'id'
Predicted: SELECT id FROM TV_Channel id NOT IN (SELECT Channel FROM Cartoon Directed_by = 'Ben Jones')
Gold: SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'id'
Predicted: SELECT id FROM TV_Channel id NOT IN (SELECT Channel FROM Cartoon Directed_by = 'Ben Jones')
Gold: SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'id'
Predicted: SELECT Package_Option FROM TV_Channel id NOT IN (SELECT Channel FROM Cartoon Directed_by = 'Ben Jones')
Gold: SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'id'
Predicted: SELECT Package_Option FROM TV_Channel id NOT IN (SELECT Channel FROM Cartoon Directed_by = 'Ben Jones')
Gold: SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Earnings FROM poker_player BY Earnings DESC
Gold: SELECT Earnings FROM poker_player ORDER BY Earnings DESC
Database: poker_player
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Earnings FROM poker_player BY Earnings DESC
Gold: SELECT Earnings FROM poker_player ORDER BY Earnings DESC
Database: poker_player
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Money_Rank FROM poker_player BY Earnings DESC LIMIT 1
Gold: SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1
Database: poker_player
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Money_Rank FROM poker_player BY Earnings DESC LIMIT 1
Gold: SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1
Database: poker_player
--------------------------------------------------------------------------------
PARSE FAILED: 'earnings'
Predicted: SELECT MAX(Final_Table_Made) FROM poker_player Earnings < 200000
Gold: SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000
Database: poker_player
--------------------------------------------------------------------------------
PARSE FAILED: 'earnings'
Predicted: SELECT MAX(Final_Table_Made) FROM poker_player Earnings < 200000
Gold: SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000
Database: poker_player
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Nationality, COUNT(*) FROM people BY Nationality
Gold: SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality
Database: poker_player
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Nationality, COUNT(*) FROM people BY Nationality
Gold: SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality
Database: poker_player
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Nationality FROM people BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
Gold: SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
Database: poker_player
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Nationality FROM people BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
Gold: SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
Database: poker_player
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Nationality FROM people BY Nationality HAVING COUNT(*) >= 2
Gold: SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2
Database: poker_player
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Nationality FROM people BY Nationality HAVING COUNT(*) >= 2
Gold: SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2
Database: poker_player
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name, Birth_Date FROM people BY Name ASC
Gold: SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC
Database: poker_player
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name, Birth_Date FROM people BY Name ASC
Gold: SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC
Database: poker_player
--------------------------------------------------------------------------------
PARSE FAILED: 'nationality'
Predicted: SELECT Name FROM people Nationality != 'Russia'
Gold: SELECT Name FROM people WHERE Nationality != "Russia"
Database: poker_player
--------------------------------------------------------------------------------
PARSE FAILED: 'nationality'
Predicted: SELECT Name FROM people Nationality != 'Russia'
Gold: SELECT Name FROM people WHERE Nationality != "Russia"
Database: poker_player
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT people.Name FROM people LEFT JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.People_ID IS NULL
Gold: SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
Database: poker_player
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT people.Name FROM people LEFT JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.People_ID IS NULL
Gold: SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
Database: poker_player
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT contestant_number, contestant_name FROM CONTESTANTS BY contestant_name DESC
Gold: SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC
Database: voter_1
--------------------------------------------------------------------------------
PARSE FAILED: 'state'
Predicted: SELECT MAX(created) FROM VOTES state = 'CA'
Gold: SELECT max(created) FROM votes WHERE state  =  'CA'
Database: voter_1
--------------------------------------------------------------------------------
PARSE FAILED: 'contestant_name'
Predicted: SELECT contestant_name FROM CONTESTANTS contestant_name != 'Jessie Alloway'
Gold: SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'
Database: voter_1
--------------------------------------------------------------------------------
PARSE FAILED: 'state'
Predicted: SELECT COUNT(*) FROM VOTES state = 'NY' OR state = 'CA'
Gold: SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'
Database: voter_1
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT COUNT(CONTESTANTS.contestant_number) FROM CONTESTANTS LEFT JOIN VOTES ON CONTESTANTS.contestant_number = VOTES.contestant_number WHERE VOTES.contestant_number IS NULL
Gold: SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )
Database: voter_1
--------------------------------------------------------------------------------
PARSE FAILED: Error col: substr
Predicted: SELECT SUBSTR(VOTES.phone_number, 1, 3) FROM VOTES JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.contestant_name = 'Tabatha Gehling' INTERSECT SELECT SUBSTR(VOTES.phone_number, 1, 3) FROM VOTES JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.contestant_name = 'Kelly Clauss'
Gold: SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'
Database: voter_1
--------------------------------------------------------------------------------
PARSE FAILED: 'contestant_name'
Predicted: SELECT contestant_name FROM CONTESTANTS contestant_name LIKE '%Al%'
Gold: select contestant_name from contestants where contestant_name like "%al%"
Database: voter_1
--------------------------------------------------------------------------------
PARSE FAILED: 'indepyear'
Predicted: SELECT Name FROM country IndepYear > 1950
Gold: SELECT Name FROM country WHERE IndepYear  >  1950
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'indepyear'
Predicted: SELECT Name FROM country IndepYear > 1950
Gold: SELECT Name FROM country WHERE IndepYear  >  1950
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'governmentform'
Predicted: SELECT COUNT(*) FROM country GovernmentForm = 'Republic'
Gold: SELECT count(*) FROM country WHERE GovernmentForm  =  "Republic"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'governmentform'
Predicted: SELECT COUNT(*) FROM country GovernmentForm = 'Republic'
Gold: SELECT count(*) FROM country WHERE GovernmentForm  =  "Republic"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'region'
Predicted: SELECT SUM(SurfaceArea) FROM country Region = 'Caribbean'
Gold: SELECT sum(SurfaceArea) FROM country WHERE Region  =  "Caribbean"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'region'
Predicted: SELECT SUM(SurfaceArea) FROM country Region = 'Caribbean'
Gold: SELECT sum(SurfaceArea) FROM country WHERE Region  =  "Caribbean"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'name'
Predicted: SELECT Continent FROM country Name = 'Anguilla'
Gold: SELECT Continent FROM country WHERE Name  =  "Anguilla"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'name'
Predicted: SELECT Continent FROM country Name = 'Anguilla'
Gold: SELECT Continent FROM country WHERE Name  =  "Anguilla"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'name'
Predicted: SELECT Population, LifeExpectancy FROM country Name = 'Brazil'
Gold: SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  "Brazil"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'name'
Predicted: SELECT Population, LifeExpectancy FROM country Name = 'Brazil'
Gold: SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  "Brazil"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'name'
Predicted: SELECT Region, Population FROM country Name = 'Angola'
Gold: SELECT Population ,  Region FROM country WHERE Name  =  "Angola"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'name'
Predicted: SELECT Region, Population FROM country Name = 'Angola'
Gold: SELECT Population ,  Region FROM country WHERE Name  =  "Angola"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'region'
Predicted: SELECT AVG(LifeExpectancy) FROM country Region = 'Central Africa'
Gold: SELECT avg(LifeExpectancy) FROM country WHERE Region  =  "Central Africa"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'region'
Predicted: SELECT AVG(LifeExpectancy) FROM country Region = 'Central Africa'
Gold: SELECT avg(LifeExpectancy) FROM country WHERE Region  =  "Central Africa"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'continent'
Predicted: SELECT Name FROM country Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1
Gold: SELECT Name FROM country WHERE Continent  =  "Asia" ORDER BY LifeExpectancy LIMIT 1
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'continent'
Predicted: SELECT Name FROM country Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1
Gold: SELECT Name FROM country WHERE Continent  =  "Asia" ORDER BY LifeExpectancy LIMIT 1
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'continent'
Predicted: SELECT SUM(Population), MAX(GNP) FROM country Continent = 'Asia'
Gold: SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  "Asia"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'continent'
Predicted: SELECT SUM(Population), MAX(GNP) FROM country Continent = 'Asia'
Gold: SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  "Asia"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'continent'
Predicted: SELECT AVG(LifeExpectancy) FROM country Continent = 'Africa' AND GovernmentForm LIKE '%Republic%'
Gold: SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  "Africa" AND GovernmentForm  =  "Republic"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'continent'
Predicted: SELECT AVG(LifeExpectancy) FROM country Continent = 'Africa' AND GovernmentForm = 'Republic'
Gold: SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  "Africa" AND GovernmentForm  =  "Republic"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'continent'
Predicted: SELECT SUM(SurfaceArea) FROM country Continent IN ('Asia', 'Europe')
Gold: SELECT sum(SurfaceArea) FROM country WHERE Continent  =  "Asia" OR Continent  =  "Europe"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'continent'
Predicted: SELECT SUM(SurfaceArea) FROM country Continent = 'Asia' OR Continent = 'Europe'
Gold: SELECT sum(SurfaceArea) FROM country WHERE Continent  =  "Asia" OR Continent  =  "Europe"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'district'
Predicted: SELECT SUM(Population) FROM city District = 'Gelderland'
Gold: SELECT sum(Population) FROM city WHERE District  =  "Gelderland"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'district'
Predicted: SELECT SUM(Population) FROM city District = 'Gelderland'
Gold: SELECT sum(Population) FROM city WHERE District  =  "Gelderland"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'governmentform'
Predicted: SELECT AVG(GNP), SUM(Population) FROM country GovernmentForm = 'US territory'
Gold: SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  "US Territory"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'name'
Predicted: SELECT AVG(GNP), SUM(Population) FROM country Name IN ('American Samoa', 'Guam', 'Northern Mariana Islands', 'Puerto Rico', 'United States Virgin Islands', 'United States Minor Outlying Islands')
Gold: SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  "US Territory"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'continent'
Predicted: SELECT COUNT(DISTINCT GovernmentForm) FROM country Continent = 'Africa'
Gold: SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  "Africa"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'continent'
Predicted: SELECT COUNT(DISTINCT GovernmentForm) FROM country Continent = 'Africa'
Gold: SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  "Africa"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'countrycode'
Predicted: SELECT COUNT(Language) FROM countrylanguage CountryCode = (SELECT Code FROM country Name = 'Aruba')
Gold: SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'countrycode'
Predicted: SELECT COUNT(*) FROM countrylanguage CountryCode = (SELECT Code FROM country Name = 'Afghanistan') AND IsOfficial = 'T'
Gold: SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Afghanistan" AND IsOfficial  =  "T"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: '('
Predicted: SELECT country.Name FROM country JOIN (SELECT CountryCode, COUNT(Language) AS language_count FROM countrylanguage BY CountryCode ORDER BY language_count DESC LIMIT 1) AS T2 ON country.Code = T2.CountryCode
Gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'language'
Predicted: SELECT COUNT(*) FROM (SELECT CountryCode FROM countrylanguage Language IN ('English', 'Dutch') GROUP BY CountryCode HAVING COUNT(DISTINCT Language) = 2)
Gold: SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch")
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 
Predicted: SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language IN ('English', 'French') GROUP BY country.Code, country.Name HAVING COUNT(DISTINCT countrylanguage.Language) = 2
Gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 
Predicted: SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language IN ('English', 'French') GROUP BY country.Code, country.Name HAVING COUNT(DISTINCT countrylanguage.Language) = 2
Gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 
Predicted: SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.IsOfficial = 'T' AND countrylanguage.Language IN ('English', 'French') GROUP BY country.Code HAVING COUNT(DISTINCT countrylanguage.Language) = 2
Gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French" AND T2.IsOfficial  =  "T"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 
Predicted: SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.IsOfficial = 'T' AND countrylanguage.Language IN ('English', 'French') GROUP BY country.Code, country.Name HAVING COUNT(DISTINCT countrylanguage.Language) = 2
Gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French" AND T2.IsOfficial  =  "T"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'inner'
Predicted: SELECT country.Name FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.IsOfficial = 'T' AND (countrylanguage.Language = 'English' OR countrylanguage.Language = 'Dutch')
Gold: select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  "english" and isofficial  =  "t" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  "dutch" and isofficial  =  "t"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 
Predicted: SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language IN ('English', 'Dutch') AND countrylanguage.IsOfficial = 'T'
Gold: SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND IsOfficial  =  "T" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch" AND IsOfficial  =  "T"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 
Predicted: SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' GROUP BY countrylanguage.Language ORDER BY SUM(country.Population * countrylanguage.Percentage / 100) DESC LIMIT 1
Gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  "Asia" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'continent'
Predicted: SELECT Name, Population, LifeExpectancy FROM country Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1
Gold: SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  "Asia" ORDER BY SurfaceArea DESC LIMIT 1
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'continent'
Predicted: SELECT Name, Population, LifeExpectancy FROM country Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1
Gold: SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  "Asia" ORDER BY SurfaceArea DESC LIMIT 1
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'code'
Predicted: SELECT AVG(LifeExpectancy) FROM country Code NOT IN (SELECT CountryCode FROM countrylanguage Language = 'English' AND IsOfficial = 'T')
Gold: SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T")
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'code'
Predicted: SELECT SUM(Population) FROM country Code NOT IN (SELECT CountryCode FROM countrylanguage Language = 'English')
Gold: SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English")
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'not'
Predicted: SELECT SUM(country.Population) FROM country NOT EXISTS ( SELECT 1 FROM countrylanguage WHERE countrylanguage.CountryCode = country.Code AND countrylanguage.Language = 'English' )
Gold: SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English")
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'surfacearea'
Predicted: SELECT Name FROM country SurfaceArea > (SELECT MAX(SurfaceArea) FROM country Continent = 'Europe')
Gold: SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  "Europe")
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'surfacearea'
Predicted: SELECT Name FROM country SurfaceArea > (SELECT MAX(SurfaceArea) FROM country Continent = 'Europe')
Gold: SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  "Europe")
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'continent'
Predicted: SELECT Name FROM country Continent = 'Africa' AND Population < ANY (SELECT Population FROM country Continent = 'Asia')
Gold: SELECT Name FROM country WHERE Continent  =  "Africa"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  "Asia")
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'continent'
Predicted: SELECT Name FROM country Continent = 'Africa' AND Population < (SELECT MIN(Population) FROM country Continent = 'Asia')
Gold: SELECT Name FROM country WHERE Continent  =  "Africa"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  "Asia")
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'continent'
Predicted: SELECT Name FROM country Continent = 'Asia' AND Population > (SELECT MAX(Population) FROM country Continent = 'Africa')
Gold: SELECT Name FROM country WHERE Continent  =  "Asia"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  "Africa")
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'continent'
Predicted: SELECT Name FROM country Continent = 'Asia' AND Population > (SELECT MAX(Population) FROM country Continent = 'Africa')
Gold: SELECT Name FROM country WHERE Continent  =  "Asia"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  "Africa")
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'language'
Predicted: SELECT CountryCode FROM countrylanguage Language != 'English'
Gold: SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'language'
Predicted: SELECT CountryCode FROM countrylanguage Language != 'English'
Gold: SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'language'
Predicted: SELECT CountryCode FROM countrylanguage Language != 'English'
Gold: SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != "English"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'language'
Predicted: SELECT CountryCode FROM countrylanguage Language != 'English'
Gold: SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != "English"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'governmentform'
Predicted: SELECT Code FROM country GovernmentForm != 'Republic' AND Code NOT IN (SELECT CountryCode FROM countrylanguage Language = 'English')
Gold: SELECT Code FROM country WHERE GovernmentForm != "Republic" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'code'
Predicted: SELECT Code FROM country Code NOT IN (SELECT CountryCode FROM countrylanguage Language = 'English') AND GovernmentForm != 'Republic'
Gold: SELECT Code FROM country WHERE GovernmentForm != "Republic" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: Error col: not
Predicted: SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code WHERE country.Continent = 'Europe' AND NOT EXISTS (SELECT 1 FROM countrylanguage WHERE countrylanguage.CountryCode = country.Code AND countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'T')
Gold: SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name, IndepYear, SurfaceArea FROM country BY Population ASC LIMIT 1
Gold: SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name, IndepYear, SurfaceArea FROM country BY Population ASC LIMIT 1
Gold: SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Population, Name, HeadOfState FROM country BY SurfaceArea DESC LIMIT 1
Gold: SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name, Population, HeadOfState FROM country BY SurfaceArea DESC LIMIT 1
Gold: SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'population'
Predicted: SELECT District, COUNT(ID) FROM city Population > (SELECT AVG(Population) FROM city) GROUP BY District
Gold: SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'population'
Predicted: SELECT District, COUNT(*) FROM city Population > (SELECT AVG(Population) FROM city) GROUP BY District
Gold: SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT GovernmentForm, SUM(Population) FROM country BY GovernmentForm HAVING AVG(LifeExpectancy) > 72
Gold: SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT GovernmentForm, SUM(Population) FROM country BY GovernmentForm HAVING AVG(LifeExpectancy) > 72
Gold: SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Continent, AVG(LifeExpectancy), SUM(Population) FROM country BY Continent HAVING AVG(LifeExpectancy) < 72
Gold: SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Continent, SUM(Population), AVG(LifeExpectancy) FROM country BY Continent HAVING AVG(LifeExpectancy) < 72
Gold: SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name, SurfaceArea FROM country BY SurfaceArea DESC LIMIT 5
Gold: SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name, SurfaceArea FROM country BY SurfaceArea DESC LIMIT 5
Gold: SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name FROM country BY Population DESC LIMIT 3
Gold: SELECT Name FROM country ORDER BY Population DESC LIMIT 3
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name FROM country BY Population DESC LIMIT 3
Gold: SELECT Name FROM country ORDER BY Population DESC LIMIT 3
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name FROM country BY Population ASC LIMIT 3
Gold: SELECT Name FROM country ORDER BY Population ASC LIMIT 3
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name FROM country BY Population ASC LIMIT 3
Gold: SELECT Name FROM country ORDER BY Population ASC LIMIT 3
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'continent'
Predicted: SELECT COUNT(*) FROM country Continent = 'Asia'
Gold: SELECT count(*) FROM country WHERE continent  =  "Asia"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'continent'
Predicted: SELECT COUNT(*) FROM country Continent = 'Asia'
Gold: SELECT count(*) FROM country WHERE continent  =  "Asia"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'continent'
Predicted: SELECT Name FROM country Continent = 'Europe' AND Population = 80000
Gold: SELECT Name FROM country WHERE continent  =  "Europe" AND Population  =  "80000"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'continent'
Predicted: SELECT Name FROM country Continent = 'Europe' AND Population = 80000
Gold: SELECT Name FROM country WHERE continent  =  "Europe" AND Population  =  "80000"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'continent'
Predicted: SELECT SUM(Population), AVG(SurfaceArea) FROM country Continent = 'North America' AND SurfaceArea > 3000
Gold: select sum(population) ,  avg(surfacearea) from country where continent  =  "north america" and surfacearea  >  3000
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'continent'
Predicted: SELECT SUM(Population), AVG(SurfaceArea) FROM country Continent = 'North America' AND SurfaceArea > 3000
Gold: select sum(population) ,  avg(surfacearea) from country where continent  =  "north america" and surfacearea  >  3000
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'population'
Predicted: SELECT * FROM city Population BETWEEN 160000 AND 900000
Gold: SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'population'
Predicted: SELECT Name FROM city Population BETWEEN 160000 AND 900000
Gold: select name from city where population between 160000 and 900000
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Language FROM countrylanguage BY Language ORDER BY COUNT(CountryCode) DESC LIMIT 1
Gold: SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Language FROM countrylanguage BY Language ORDER BY COUNT(CountryCode) DESC LIMIT 1
Gold: SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'select' not found
Predicted: WITH RankedLanguages AS ( SELECT CountryCode, Language, Percentage, ROW_NUMBER() OVER (PARTITION BY CountryCode ORDER BY Percentage DESC) AS rn FROM countrylanguage ) SELECT country.Name, RankedLanguages.Language, RankedLanguages.Percentage FROM RankedLanguages JOIN country ON RankedLanguages.CountryCode = country.Code WHERE RankedLanguages.rn = 1
Gold: SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: '('
Predicted: SELECT countrylanguage.CountryCode, countrylanguage.Language FROM countrylanguage JOIN ( SELECT CountryCode, MAX(Percentage) AS MaxPercentage FROM countrylanguage BY CountryCode ) AS T2 ON countrylanguage.CountryCode = T2.CountryCode AND countrylanguage.Percentage = T2.MaxPercentage
Gold: SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: '('
Predicted: SELECT COUNT(countrylanguage.CountryCode) FROM countrylanguage JOIN (SELECT CountryCode, MAX(Percentage) AS max_percentage FROM countrylanguage BY CountryCode) AS T2 ON countrylanguage.CountryCode = T2.CountryCode AND countrylanguage.Percentage = T2.max_percentage WHERE countrylanguage.Language = 'Spanish'
Gold: SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'language'
Predicted: SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage Language = 'Spanish' AND IsOfficial = 'T'
Gold: SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'language'
Predicted: SELECT CountryCode FROM countrylanguage Language = 'Spanish' AND Percentage = (SELECT MAX(Percentage) FROM countrylanguage Language = 'Spanish')
Gold: SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'language'
Predicted: SELECT CountryCode FROM countrylanguage Language = 'Spanish' AND IsOfficial = 'T'
Gold: SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name FROM conductor BY Age ASC
Gold: SELECT Name FROM conductor ORDER BY Age ASC
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name FROM conductor BY Age
Gold: SELECT Name FROM conductor ORDER BY Age ASC
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: 'nationality'
Predicted: SELECT Name FROM conductor Nationality != 'USA'
Gold: SELECT Name FROM conductor WHERE Nationality != 'USA'
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: 'nationality'
Predicted: SELECT Name FROM conductor Nationality != 'USA'
Gold: SELECT Name FROM conductor WHERE Nationality != 'USA'
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Record_Company FROM orchestra BY Year_of_Founded DESC
Gold: SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Record_Company FROM orchestra BY Year_of_Founded DESC
Gold: SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: 'type'
Predicted: SELECT MAX(Share), MIN(Share) FROM performance Type != 'Live final'
Gold: SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != "Live final"
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: 'type'
Predicted: SELECT MAX(Share), MIN(Share) FROM performance Type != 'Live final'
Gold: SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != "Live final"
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name FROM conductor BY Year_of_Work DESC
Gold: SELECT Name FROM conductor ORDER BY Year_of_Work DESC
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name FROM conductor BY Year_of_Work DESC
Gold: SELECT Name FROM conductor ORDER BY Year_of_Work DESC
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name FROM conductor BY Year_of_Work DESC LIMIT 1
Gold: SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: 'year_of_work'
Predicted: SELECT Name FROM conductor Year_of_Work = (SELECT MAX(Year_of_Work) FROM conductor)
Gold: SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Record_Company, COUNT(*) FROM orchestra BY Record_Company
Gold: SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Record_Company, COUNT(*) FROM orchestra BY Record_Company
Gold: SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Major_Record_Format, COUNT(*) FROM orchestra BY Major_Record_Format ORDER BY COUNT(*) ASC
Gold: SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Major_Record_Format, COUNT(*) FROM orchestra BY Major_Record_Format ORDER BY COUNT(*) DESC
Gold: SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Record_Company FROM orchestra BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1
Gold: SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Record_Company FROM orchestra BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1
Gold: SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT orchestra.Orchestra FROM orchestra LEFT JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID WHERE performance.Performance_ID IS NULL
Gold: SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT orchestra.Orchestra FROM orchestra LEFT JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID WHERE performance.Performance_ID IS NULL
Gold: SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: 'year_of_founded'
Predicted: SELECT Record_Company FROM orchestra Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra Year_of_Founded > 2003
Gold: SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: 'year_of_founded'
Predicted: SELECT Record_Company FROM orchestra Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra Year_of_Founded > 2003
Gold: SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: 'major_record_format'
Predicted: SELECT COUNT(*) FROM orchestra Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD'
Gold: SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  "CD" OR Major_Record_Format  =  "DVD"
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: 'major_record_format'
Predicted: SELECT COUNT(*) FROM orchestra Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD'
Gold: SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  "CD" OR Major_Record_Format  =  "DVD"
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: 'name'
Predicted: SELECT grade FROM Highschooler name = 'Kyle'
Gold: SELECT grade FROM Highschooler WHERE name  =  "Kyle"
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'name'
Predicted: SELECT grade FROM Highschooler name = 'Kyle'
Gold: SELECT grade FROM Highschooler WHERE name  =  "Kyle"
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'grade'
Predicted: SELECT name FROM Highschooler grade = 10
Gold: SELECT name FROM Highschooler WHERE grade  =  10
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'grade'
Predicted: SELECT name FROM Highschooler grade = 10
Gold: SELECT name FROM Highschooler WHERE grade  =  10
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'name'
Predicted: SELECT ID FROM Highschooler name = 'Kyle'
Gold: SELECT ID FROM Highschooler WHERE name  =  "Kyle"
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'name'
Predicted: SELECT ID FROM Highschooler name = 'Kyle'
Gold: SELECT ID FROM Highschooler WHERE name  =  "Kyle"
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'grade'
Predicted: SELECT COUNT(*) FROM Highschooler grade = 9 OR grade = 10
Gold: SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'grade'
Predicted: SELECT COUNT(*) FROM Highschooler grade = 9 OR grade = 10
Gold: SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT grade, COUNT(*) FROM Highschooler BY grade
Gold: SELECT grade ,  count(*) FROM Highschooler GROUP BY grade
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT grade, COUNT(*) FROM Highschooler BY grade
Gold: SELECT grade ,  count(*) FROM Highschooler GROUP BY grade
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT grade FROM Highschooler BY grade ORDER BY COUNT(*) DESC LIMIT 1
Gold: SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT grade FROM Highschooler BY grade ORDER BY COUNT(ID) DESC LIMIT 1
Gold: SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT grade FROM Highschooler BY grade HAVING COUNT(*) >= 4
Gold: SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT grade FROM Highschooler BY grade HAVING COUNT(*) >= 4
Gold: SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT student_id, COUNT(*) FROM Friend BY student_id
Gold: SELECT student_id ,  count(*) FROM Friend GROUP BY student_id
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT Highschooler.name, COUNT(Friend.friend_id) FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID, Highschooler.name
Gold: SELECT student_id ,  count(*) FROM Friend GROUP BY student_id
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT Highschooler.name, COUNT(Friend.friend_id) FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID, Highschooler.name
Gold: SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT Highschooler.name, COUNT(Friend.friend_id) FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID, Highschooler.name
Gold: SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'id'
Predicted: SELECT ID FROM Highschooler ID NOT IN (SELECT student_id FROM Friend)
Gold: SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'id'
Predicted: SELECT ID FROM Highschooler ID NOT IN (SELECT student_id FROM Friend)
Gold: SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT Highschooler.name FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Friend.student_id IS NULL
Gold: SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'not'
Predicted: SELECT name FROM Highschooler NOT EXISTS (SELECT 1 FROM Friend Friend.student_id = Highschooler.ID OR Friend.friend_id = Highschooler.ID)
Gold: SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'id'
Predicted: SELECT ID FROM Highschooler ID IN (SELECT student_id FROM Friend) AND ID IN (SELECT liked_id FROM Likes)
Gold: SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT student_id, COUNT(*) FROM Likes BY student_id
Gold: SELECT student_id ,  count(*) FROM Likes GROUP BY student_id
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT student_id, COUNT(*) FROM Likes BY student_id
Gold: SELECT student_id ,  count(*) FROM Likes GROUP BY student_id
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: '('
Predicted: SELECT Highschooler.name FROM Highschooler JOIN (SELECT liked_id FROM Likes BY liked_id HAVING COUNT(*) >= 2) AS T2 ON Highschooler.ID = T2.liked_id
Gold: SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'id'
Predicted: SELECT AVG(grade) FROM Highschooler ID IN (SELECT student_id FROM Friend)
Gold: SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'id'
Predicted: SELECT MIN(grade) FROM Highschooler ID NOT IN (SELECT student_id FROM Friend SELECT friend_id FROM Friend)
Gold: SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'id'
Predicted: SELECT MIN(grade) FROM Highschooler ID NOT IN (SELECT student_id FROM Friend)
Gold: SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'dog_id'
Predicted: SELECT AVG(age) FROM Dogs dog_id IN (SELECT dog_id FROM Treatments)
Gold: SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT Professionals.professional_id, Professionals.last_name, Professionals.cell_number FROM Professionals LEFT JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Professionals.professional_id, Professionals.last_name, Professionals.cell_number HAVING Professionals.state = 'Indiana' OR COUNT(Treatments.treatment_id) > 2
Gold: SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT Professionals.professional_id, Professionals.last_name, Professionals.cell_number FROM Professionals LEFT JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Professionals.professional_id, Professionals.last_name, Professionals.cell_number, Professionals.state HAVING Professionals.state = 'IN' OR COUNT(Treatments.treatment_id) > 2
Gold: SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT Dogs.name FROM Dogs LEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Dogs.dog_id, Dogs.name HAVING SUM(COALESCE(Treatments.cost_of_treatment, 0)) <= 1000
Gold: select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT Dogs.name FROM Dogs WHERE Dogs.owner_id IN ( SELECT Owners.owner_id FROM Owners LEFT JOIN Dogs ON Owners.owner_id = Dogs.owner_id LEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id HAVING COALESCE(SUM(Treatments.cost_of_treatment), 0) <= 1000 )
Gold: select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'professional_id'
Predicted: SELECT professional_id, role_code, email_address FROM Professionals professional_id NOT IN (SELECT professional_id FROM Treatments)
Gold: SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT Professionals.professional_id, Professionals.role_code, Professionals.email_address FROM Professionals LEFT JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.treatment_id IS NULL
Gold: SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.breed_code IN ( SELECT breed_code FROM Dogs BY breed_code HAVING COUNT(*) = ( SELECT MIN(breed_count) FROM ( SELECT COUNT(*) AS breed_count FROM Dogs BY breed_code ) AS counts ) ) ORDER BY Dogs.name, Treatments.date_of_treatment
Gold: SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'inner'
Predicted: SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.breed_code IN ( SELECT breed_code FROM Dogs BY breed_code HAVING COUNT(*) = ( SELECT COUNT(*) FROM Dogs BY breed_code ORDER BY COUNT(*) ASC LIMIT 1 ) )
Gold: SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'state'
Predicted: SELECT email_address FROM Professionals state = 'HI' OR state = 'WI'
Gold: SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'state'
Predicted: SELECT email_address FROM Professionals state = 'HI' OR state = 'WI'
Gold: SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'city'
Predicted: SELECT role_code, street, city, state FROM Professionals city LIKE '%West%'
Gold: SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'city'
Predicted: SELECT role_code, street, city, state FROM Professionals city LIKE '%West%'
Gold: SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'state'
Predicted: SELECT first_name, last_name, email_address FROM Owners state LIKE '%North%'
Gold: SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'state'
Predicted: SELECT first_name, last_name, email_address FROM Owners state LIKE '%North%'
Gold: SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'age'
Predicted: SELECT COUNT(*) FROM Dogs age < (SELECT AVG(age) FROM Dogs)
Gold: SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'age'
Predicted: SELECT COUNT(*) FROM Dogs age < (SELECT AVG(age) FROM Dogs)
Gold: SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT cost_of_treatment FROM Treatments BY date_of_treatment DESC LIMIT 1
Gold: SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT cost_of_treatment FROM Treatments BY date_of_treatment DESC LIMIT 1
Gold: SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT COUNT(Dogs.dog_id) FROM Dogs LEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.treatment_id IS NULL
Gold: SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT COUNT(Dogs.dog_id) FROM Dogs LEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.treatment_id IS NULL
Gold: select count(*) from dogs where dog_id not in ( select dog_id from treatments )
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'owner_id'
Predicted: SELECT COUNT(*) FROM Owners owner_id NOT IN (SELECT owner_id FROM Dogs date_adopted IS NULL AND date_departed IS NULL)
Gold: SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'owner_id'
Predicted: SELECT COUNT(*) FROM Owners owner_id NOT IN (SELECT owner_id FROM Dogs)
Gold: SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'professional_id'
Predicted: SELECT COUNT(*) FROM Professionals professional_id NOT IN (SELECT professional_id FROM Treatments)
Gold: SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT COUNT(Professionals.professional_id) FROM Professionals LEFT JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.professional_id IS NULL
Gold: SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'abandoned_yn'
Predicted: SELECT name, age, weight FROM Dogs abandoned_yn = '1'
Gold: SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'abandoned_yn'
Predicted: SELECT name, age, weight FROM Dogs abandoned_yn = 1
Gold: SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'cross'
Predicted: SELECT Breeds.breed_name, Sizes.size_description FROM Breeds CROSS JOIN Sizes
Gold: SELECT DISTINCT breed_code ,  size_code FROM dogs
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name FROM singer BY Net_Worth_Millions ASC
Gold: SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC
Database: singer
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name FROM singer BY Net_Worth_Millions ASC
Gold: SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC
Database: singer
--------------------------------------------------------------------------------
PARSE FAILED: 'citizenship'
Predicted: SELECT Name FROM singer Citizenship != 'France'
Gold: SELECT Name FROM singer WHERE Citizenship != "France"
Database: singer
--------------------------------------------------------------------------------
PARSE FAILED: 'citizenship'
Predicted: SELECT Name FROM singer Citizenship != 'French'
Gold: SELECT Name FROM singer WHERE Citizenship != "France"
Database: singer
--------------------------------------------------------------------------------
PARSE FAILED: 'birth_year'
Predicted: SELECT Name FROM singer Birth_Year IN (1948, 1949)
Gold: SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949
Database: singer
--------------------------------------------------------------------------------
PARSE FAILED: 'birth_year'
Predicted: SELECT Name FROM singer Birth_Year = 1948 OR Birth_Year = 1949
Gold: SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949
Database: singer
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name FROM singer BY Net_Worth_Millions DESC LIMIT 1
Gold: SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1
Database: singer
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Name FROM singer BY Net_Worth_Millions DESC LIMIT 1
Gold: SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1
Database: singer
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Citizenship, COUNT(*) FROM singer BY Citizenship
Gold: SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship
Database: singer
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Citizenship, COUNT(*) FROM singer BY Citizenship
Gold: SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship
Database: singer
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Citizenship FROM singer BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1
Gold: SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1
Database: singer
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Citizenship FROM singer BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1
Gold: select citizenship from singer group by citizenship order by count(*) desc limit 1
Database: singer
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer BY Citizenship
Gold: SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship
Database: singer
--------------------------------------------------------------------------------
PARSE FAILED: 'by'
Predicted: SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer BY Citizenship
Gold: SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship
Database: singer
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT singer.Name FROM singer LEFT JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Song_ID IS NULL
Gold: SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
Database: singer
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT singer.Name FROM singer LEFT JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Song_ID IS NULL
Gold: SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
Database: singer
--------------------------------------------------------------------------------
PARSE FAILED: 'birth_year'
Predicted: SELECT Citizenship FROM singer Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer Birth_Year > 1955
Gold: SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955
Database: singer
--------------------------------------------------------------------------------
PARSE FAILED: 'birth_year'
Predicted: SELECT Citizenship FROM singer Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer Birth_Year > 1955
Gold: SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955
Database: singer
--------------------------------------------------------------------------------
PARSE FAILED: 
Predicted: SELECT Properties.property_name FROM Properties JOIN Ref_Property_Types ON Properties.property_type_code = Ref_Property_Types.property_type_code WHERE Ref_Property_Types.property_type_description IN ('House', 'Apartment') AND Properties.room_count > 1
Gold: SELECT property_name FROM Properties WHERE property_type_code  =  "House" UNION SELECT property_name FROM Properties WHERE property_type_code  =  "Apartment" AND room_count  >  1
Database: real_estate_properties
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name, COUNT(T2.concert_ID) FROM stadium T1 JOIN concert T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T1.Stadium_ID, T1.Name
Gold: SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name, COUNT(T2.concert_ID) FROM stadium T1 JOIN concert T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T1.Stadium_ID, T1.Name
Gold: SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name, T1.Capacity FROM stadium T1 JOIN concert T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year >= 2014 GROUP BY T1.Stadium_ID ORDER BY COUNT(T2.concert_ID) DESC LIMIT 1
Gold: SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name, T1.Capacity FROM stadium T1 JOIN (SELECT Stadium_ID FROM concert WHERE Year > 2013 GROUP BY Stadium_ID ORDER BY COUNT(*) DESC LIMIT 1) AS T2 ON T1.Stadium_ID = T2.Stadium_ID
Gold: select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name FROM stadium T1 LEFT JOIN concert T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.concert_ID IS NULL
Gold: SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name FROM stadium T1 LEFT JOIN concert T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.concert_ID IS NULL
Gold: SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.concert_Name, T1.Theme, COUNT(T2.Singer_ID) FROM concert T1 JOIN singer_in_concert T2 ON T1.concert_ID = T2.concert_ID GROUP BY T1.concert_ID, T1.concert_Name, T1.Theme
Gold: SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.concert_Name, T1.Theme, COUNT(T2.Singer_ID) FROM concert T1 JOIN singer_in_concert T2 ON T1.concert_ID = T2.concert_ID GROUP BY T1.concert_ID, T1.concert_Name, T1.Theme
Gold: select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name, COUNT(T2.concert_ID) FROM singer T1 JOIN singer_in_concert T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Singer_ID, T1.Name
Gold: SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name, COUNT(T2.concert_ID) FROM singer T1 JOIN singer_in_concert T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name
Gold: SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name FROM singer T1 JOIN singer_in_concert T2 ON T1.Singer_ID = T2.Singer_ID JOIN concert T3 ON T2.concert_ID = T3.concert_ID WHERE T3.Year = 2014
Gold: SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name FROM singer T1 JOIN singer_in_concert T2 ON T1.Singer_ID = T2.Singer_ID JOIN concert T3 ON T2.concert_ID = T3.concert_ID WHERE T3.Year = 2014
Gold: SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name, T1.Location FROM stadium T1 JOIN concert T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = 2014 INTERSECT SELECT T1.Name, T1.Location FROM stadium T1 JOIN concert T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = 2015
Gold: SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name, T1.Location FROM stadium T1 JOIN concert T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = 2014 INTERSECT SELECT T1.Name, T1.Location FROM stadium T1 JOIN concert T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = 2015
Gold: SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT COUNT(T2.PetID) FROM Student T1 JOIN Has_Pet T2 ON T1.StuID = T2.StuID WHERE T1.Age > 20
Gold: SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT COUNT(T2.PetID) FROM Student T1 JOIN Has_Pet T2 ON T1.StuID = T2.StuID WHERE T1.Age > 20
Gold: SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT COUNT(*) FROM Student T1 JOIN Has_Pet T2 ON T1.StuID = T2.StuID JOIN Pets T3 ON T2.PetID = T3.PetID WHERE T1.Sex = 'F' AND T3.PetType = 'dog'
Gold: SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT DISTINCT T1.Fname FROM Student T1 JOIN Has_Pet T2 ON T1.StuID = T2.StuID JOIN Pets T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat' OR T3.PetType = 'dog'
Gold: SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT DISTINCT T1.Fname FROM Student T1 JOIN Has_Pet T2 ON T1.StuID = T2.StuID JOIN Pets T3 ON T2.PetID = T3.PetID WHERE T3.PetType IN ('cat', 'dog')
Gold: SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Fname FROM Student T1 JOIN Has_Pet T2 ON T1.StuID = T2.StuID JOIN Pets T3 ON T2.PetID = T3.PetID WHERE T3.PetType IN ('cat', 'dog') GROUP BY T1.StuID HAVING COUNT(DISTINCT T3.PetType) = 2
Gold: select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Fname FROM Student T1 JOIN Has_Pet T2 ON T1.StuID = T2.StuID JOIN Pets T3 ON T2.PetID = T3.PetID WHERE T3.PetType IN ('cat', 'dog') GROUP BY T1.StuID, T1.Fname HAVING COUNT(DISTINCT T3.PetType) = 2
Gold: SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT Major, Age FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_Pet T1 JOIN Pets T2 ON T1.PetID = T2.PetID WHERE T2.PetType = 'cat')
Gold: SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT Major, Age FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_Pet T1 JOIN Pets T2 ON T1.PetID = T2.PetID WHERE T2.PetType = 'cat')
Gold: SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT StuID FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_Pet T1 JOIN Pets T2 ON T1.PetID = T2.PetID WHERE T2.PetType = 'cat')
Gold: SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT StuID FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_Pet T1 JOIN Pets T2 ON T1.PetID = T2.PetID WHERE T2.PetType = 'cat')
Gold: SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT DISTINCT T1.Fname FROM Student T1 JOIN Has_Pet T2 ON T1.StuID = T2.StuID JOIN Pets T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'dog' AND T1.StuID NOT IN (SELECT T4.StuID FROM Has_Pet T4 JOIN Pets T5 ON T4.PetID = T5.PetID WHERE T5.PetType = 'cat')
Gold: SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Fname, T1.Age FROM Student T1 JOIN Has_Pet T2 ON T1.StuID = T2.StuID
Gold: SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT DISTINCT T1.Fname, T1.Age FROM Student T1 JOIN Has_Pet T2 ON T1.StuID = T2.StuID
Gold: SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T2.PetID FROM Student T1 JOIN Has_Pet T2 ON T1.StuID = T2.StuID WHERE T1.LName = 'Smith'
Gold: SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T2.PetID FROM Student T1 JOIN Has_Pet T2 ON T1.StuID = T2.StuID WHERE T1.LName = 'Smith'
Gold: SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.StuID, COUNT(T2.PetID) FROM Student T1 JOIN Has_Pet T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID
Gold: SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.StuID, COUNT(T2.PetID) FROM Student T1 JOIN Has_Pet T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID
Gold: select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Fname, T1.Sex FROM Student T1 JOIN Has_Pet T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID, T1.Fname, T1.Sex HAVING COUNT(T2.PetID) > 1
Gold: SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Fname, T1.Sex FROM Student T1 JOIN Has_Pet T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID HAVING COUNT(T2.PetID) > 1
Gold: SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.LName FROM Student T1 JOIN Has_Pet T2 ON T1.StuID = T2.StuID JOIN Pets T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat' AND T3.pet_age = 3
Gold: SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.LName FROM Student T1 JOIN Has_Pet T2 ON T1.StuID = T2.StuID JOIN Pets T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat' AND T3.pet_age = 3
Gold: SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT AVG(T1.Age) FROM Student T1 LEFT JOIN Has_Pet T2 ON T1.StuID = T2.StuID WHERE T2.PetID IS NULL
Gold: select avg(age) from student where stuid not in (select stuid from has_pet)
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.ContId, T1.Continent, COUNT(T2.CountryId) FROM continents T1 JOIN countries T2 ON T1.Continent = T2.Continent GROUP BY T1.ContId, T1.Continent
Gold: SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.ContId, T1.Continent, COUNT(T2.CountryId) FROM continents T1 JOIN countries T2 ON T1.Continent = T2.Continent GROUP BY T1.ContId, T1.Continent
Gold: SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.FullName, T1.Id, COUNT(T2.ModelId) FROM car_makers T1 JOIN model_list T2 ON T1.Maker = T2.Maker GROUP BY T1.Id, T1.FullName
Gold: SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.FullName, T1.Id, COUNT(T2.ModelId) AS NumberOfModels FROM car_makers T1 JOIN model_list T2 ON T1.Id = T2.Maker GROUP BY T1.Id, T1.FullName
Gold: SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T2.Model FROM cars_data T1 JOIN car_names T2 ON T1.Id = T2.MakeId WHERE T1.Horsepower = (SELECT MIN(Horsepower) FROM cars_data)
Gold: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Model FROM car_names T1 JOIN cars_data T2 ON T1.MakeId = T2.Id ORDER BY T2.Horsepower ASC LIMIT 1
Gold: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Model FROM car_names T1 JOIN cars_data T2 ON T1.MakeId = T2.Id WHERE T2.Weight < (SELECT AVG(Weight) FROM cars_data)
Gold: SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Model FROM car_names T1 JOIN cars_data T2 ON T1.MakeId = T2.Id WHERE T2.Weight < (SELECT AVG(Weight) FROM cars_data)
Gold: SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT DISTINCT T1.FullName FROM car_makers T1 JOIN model_list T2 ON T1.Maker = T2.Maker JOIN car_names T3 ON T2.Model = T3.Model JOIN cars_data T4 ON T3.MakeId = T4.Id WHERE T4.Year = 1970
Gold: SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT DISTINCT T3.FullName FROM cars_data T1 JOIN car_names T2 ON T1.Id = T2.MakeId JOIN car_makers T3 ON T2.Make = T3.Maker WHERE T1.Year = 1970
Gold: SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Make, T2.Year FROM car_names T1 JOIN cars_data T2 ON T1.MakeId = T2.Id WHERE T2.Year = (SELECT MIN(Year) FROM cars_data)
Gold: SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T3.Maker, T1.Year FROM cars_data T1 JOIN car_names T2 ON T1.Id = T2.MakeId JOIN model_list T4 ON T2.Model = T4.Model JOIN car_makers T3 ON T4.Maker = T3.Id ORDER BY T1.Year ASC LIMIT 1
Gold: SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT DISTINCT T1.Model FROM car_names T1 JOIN cars_data T2 ON T1.MakeId = T2.Id WHERE T2.Year > 1980
Gold: SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT DISTINCT T1.Model FROM car_names T1 JOIN cars_data T2 ON T1.MakeId = T2.Id WHERE T2.Year > 1980
Gold: SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T3.Continent, COUNT(T1.Maker) FROM car_makers T1 JOIN countries T2 ON T1.Country = T2.CountryName JOIN continents T3 ON T2.Continent = T3.Continent GROUP BY T3.Continent
Gold: SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Continent, COUNT(T3.Id) FROM continents T1 JOIN countries T2 ON T1.Continent = T2.Continent JOIN car_makers T3 ON T2.CountryName = T3.Country GROUP BY T1.Continent
Gold: SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T2.CountryName FROM car_makers T1 JOIN countries T2 ON T1.Country = T2.CountryName GROUP BY T2.CountryName ORDER BY COUNT(T1.Id) DESC LIMIT 1
Gold: SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T2.CountryName FROM car_makers T1 JOIN countries T2 ON T1.Country = T2.CountryName GROUP BY T2.CountryName ORDER BY COUNT(T1.Id) DESC LIMIT 1
Gold: SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T2.FullName, COUNT(T1.ModelId) FROM model_list T1 JOIN car_makers T2 ON T1.Maker = T2.Id GROUP BY T2.FullName
Gold: select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Id, T1.FullName, COUNT(T2.ModelId) FROM car_makers T1 JOIN model_list T2 ON T1.Id = T2.Maker GROUP BY T1.Id, T1.FullName
Gold: SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Accelerate FROM cars_data T1 JOIN car_names T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet sportabout (sw)'
Gold: SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Accelerate FROM cars_data T1 JOIN car_names T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'amc hornet sportabout (sw)'
Gold: SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT COUNT(*) FROM model_list T1 JOIN car_makers T2 ON T1.Maker = T2.Id WHERE T2.Country = 'USA'
Gold: SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT COUNT(T1.Model) FROM model_list T1 JOIN car_makers T2 ON T1.Maker = T2.Id WHERE T2.Country = 'United States'
Gold: SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT DISTINCT T1.CountryName, T1.CountryId FROM countries T1 JOIN car_makers T2 ON T1.CountryName = T2.Country
Gold: SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT DISTINCT T1.CountryId, T1.CountryName FROM countries T1 JOIN car_makers T2 ON T1.CountryName = T2.Country
Gold: SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.CountryName FROM countries T1 JOIN car_makers T2 ON T1.CountryName = T2.Country WHERE T1.Continent = 'Europe' GROUP BY T1.CountryName HAVING COUNT(T2.Id) >= 3
Gold: SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.CountryName FROM countries T1 JOIN car_makers T2 ON T1.CountryName = T2.Country WHERE T1.Continent = 'Europe' GROUP BY T1.CountryName HAVING COUNT(T2.Id) >= 3
Gold: SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Make, T2.Horsepower FROM car_names T1 JOIN cars_data T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 3 AND T2.Horsepower = (SELECT MAX(Horsepower) FROM cars_data WHERE Cylinders = 3)
Gold: SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T2.Make, T1.Horsepower FROM cars_data T1 JOIN car_names T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 3 ORDER BY T1.Horsepower DESC LIMIT 1
Gold: SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T2.Model FROM cars_data T1 JOIN car_names T2 ON T1.Id = T2.MakeId ORDER BY T1.MPG DESC LIMIT 1
Gold: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T2.Model FROM cars_data T1 JOIN car_names T2 ON T1.Id = T2.MakeId ORDER BY T1.MPG DESC LIMIT 1
Gold: select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT AVG(T1.Edispl) FROM cars_data T1 JOIN car_names T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo'
Gold: SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT AVG(T1.Edispl) FROM cars_data T1 JOIN car_names T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'volvo'
Gold: SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT COUNT(T1.Model) FROM model_list T1 JOIN car_makers T2 ON T1.Maker = T2.Maker WHERE T2.FullName = 'American Motor Company'
Gold: SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT COUNT(T1.ModelId) FROM model_list T1 JOIN car_makers T2 ON T1.Maker = T2.Id WHERE T2.FullName = 'American Motor Company'
Gold: SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.FullName, T1.Id FROM car_makers T1 JOIN model_list T2 ON T1.Id = T2.Maker GROUP BY T1.Id, T1.FullName HAVING COUNT(T2.ModelId) > 3
Gold: SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Id, T1.FullName FROM car_makers T1 JOIN model_list T2 ON T1.Maker = T2.Maker GROUP BY T1.Id, T1.FullName HAVING COUNT(T2.ModelId) > 3
Gold: SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Model FROM model_list T1 JOIN car_makers T2 ON T1.Maker = T2.Id WHERE T2.FullName = 'General Motors' UNION SELECT T1.Model FROM model_list T1 JOIN car_names T3 ON T1.Model = T3.Model JOIN cars_data T4 ON T3.MakeId = T4.Id WHERE T4.Weight > 3500
Gold: SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT DISTINCT T1.Model FROM model_list T1 LEFT JOIN car_makers T2 ON T1.Maker = T2.Id LEFT JOIN car_names T3 ON T1.Model = T3.Model LEFT JOIN cars_data T4 ON T3.MakeId = T4.Id WHERE T2.FullName = 'General Motors' OR T4.Weight > 3500
Gold: SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Cylinders FROM cars_data T1 JOIN car_names T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' ORDER BY T1.Accelerate ASC LIMIT 1
Gold: SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Cylinders FROM cars_data T1 JOIN car_names T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'volvo' ORDER BY T1.Accelerate ASC LIMIT 1
Gold: SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: Default tables should not be None or empty
Predicted: SELECT COUNT(Country) FROM (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(Id) > 2)
Gold: select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT COUNT(T1.CountryName) FROM countries T1 JOIN car_makers T2 ON T1.CountryName = T2.Country GROUP BY T1.CountryName HAVING COUNT(T2.Id) > 2
Gold: select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Model FROM car_names T1 JOIN cars_data T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4 ORDER BY T2.Horsepower DESC LIMIT 1
Gold: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T2.Model FROM cars_data T1 JOIN car_names T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 4 ORDER BY T1.Horsepower DESC LIMIT 1
Gold: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.MakeId, T1.Make FROM car_names T1 JOIN cars_data T2 ON T1.MakeId = T2.Id WHERE T2.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND T2.Cylinders <= 3
Gold: SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.MakeId, T1.Model FROM car_names T1 JOIN cars_data T2 ON T1.MakeId = T2.Id WHERE T2.Horsepower != (SELECT MIN(Horsepower) FROM cars_data) AND T2.Cylinders < 4
Gold: select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Model FROM model_list T1 JOIN car_makers T2 ON T1.Maker = T2.Id JOIN car_names T3 ON T1.Model = T3.Model JOIN cars_data T4 ON T3.MakeId = T4.Id WHERE T4.Weight < 3500 AND T2.FullName != 'Ford Motor Company'
Gold: SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT DISTINCT T1.Model FROM car_names T1 JOIN cars_data T2 ON T1.MakeId = T2.Id JOIN car_makers T3 ON T1.Make = T3.Maker WHERE T2.Weight < 3500 AND T3.FullName != 'Ford Motor Company'
Gold: SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.CountryName FROM countries T1 LEFT JOIN car_makers T2 ON T1.CountryName = T2.Country WHERE T2.Id IS NULL
Gold: SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: WITH MakersWithAtLeastTwoModels AS ( SELECT T1.Id, T1.Maker FROM car_makers T1 JOIN model_list T2 ON T1.Maker = T2.Maker GROUP BY T1.Id, T1.Maker HAVING COUNT(T2.ModelId) >= 2 ) SELECT Id, Maker FROM MakersWithAtLeastTwoModels WHERE (SELECT COUNT(*) FROM MakersWithAtLeastTwoModels) > 3
Gold: select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Id, T1.Maker FROM car_makers T1 JOIN model_list T2 ON T1.Id = T2.Maker JOIN car_names T3 ON T1.Maker = T3.Make GROUP BY T1.Id, T1.Maker HAVING COUNT(DISTINCT T2.ModelId) >= 2 AND COUNT(T3.MakeId) > 3
Gold: SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.CountryId, T1.CountryName FROM countries T1 JOIN car_makers T2 ON T1.CountryName = T2.Country GROUP BY T1.CountryId, T1.CountryName HAVING COUNT(T2.Id) > 3 UNION SELECT T1.CountryId, T1.CountryName FROM countries T1 JOIN car_makers T2 ON T1.CountryName = T2.Country JOIN model_list T3 ON T2.Id = T3.Maker WHERE T3.Model = 'fiat'
Gold: SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.CountryId, T1.CountryName FROM countries T1 JOIN car_makers T2 ON T1.CountryName = T2.Country GROUP BY T1.CountryId, T1.CountryName HAVING COUNT(T2.Id) > 3 UNION SELECT T1.CountryId, T1.CountryName FROM countries T1 JOIN car_makers T2 ON T1.CountryName = T2.Country JOIN model_list T3 ON T2.Id = T3.Maker WHERE T3.Model = 'fiat'
Gold: select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT COUNT(*) FROM flights T1 JOIN airports T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'
Gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT COUNT(*) FROM flights T1 JOIN airports T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'
Gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT COUNT(*) FROM flights T1 JOIN airports T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'
Gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT COUNT(*) FROM flights T1 JOIN airports T2 ON T1.SourceAirport = T2.AirportCode JOIN airports T3 ON T1.DestAirport = T3.AirportCode WHERE T2.City = 'Aberdeen' AND T3.City = 'Ashley'
Gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  "Ashley" AND T3.City  =  "Aberdeen"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT COUNT(*) FROM flights T1 JOIN airports T2 ON T1.SourceAirport = T2.AirportCode JOIN airports T3 ON T1.DestAirport = T3.AirportCode WHERE T2.City = 'Aberdeen' AND T3.City = 'Ashley'
Gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  "Ashley" AND T3.City  =  "Aberdeen"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT COUNT(*) FROM flights T1 JOIN airports T2 ON T1.DestAirport = T2.AirportCode WHERE T1.Airline = 'United Airlines' AND T2.AirportCode = 'ASY'
Gold: SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.DestAirport  =  "ASY"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT COUNT(*) FROM flights T1 JOIN airlines T2 ON T1.Airline = T2.uid WHERE T2.Airline = 'United Airlines' AND T1.SourceAirport = 'AHD'
Gold: SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.SourceAirport  =  "AHD"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT COUNT(*) FROM flights T1 JOIN airports T2 ON T1.DestAirport = T2.AirportCode WHERE T1.Airline = 'United Airlines' AND T2.City = 'Aberdeen'
Gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  "Aberdeen" AND T3.Airline  =  "United Airlines"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT COUNT(*) FROM flights T1 JOIN airlines T2 ON T1.Airline = T2.Abbreviation JOIN airports T3 ON T1.DestAirport = T3.AirportCode WHERE T2.Airline = 'United Airlines' AND T3.City = 'Aberdeen'
Gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  "Aberdeen" AND T3.Airline  =  "United Airlines"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.City FROM airports T1 JOIN flights T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.City ORDER BY COUNT(T2.FlightNo) DESC LIMIT 1
Gold: SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T2.City FROM flights T1 JOIN airports T2 ON T1.DestAirport = T2.AirportCode GROUP BY T2.City ORDER BY COUNT(T1.DestAirport) DESC LIMIT 1
Gold: SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.City FROM airports T1 JOIN flights T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY COUNT(*) DESC LIMIT 1
Gold: SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.City FROM airports T1 JOIN flights T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY COUNT(T2.SourceAirport) DESC LIMIT 1
Gold: SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'all'
Predicted: SELECT SourceAirport FROM ( SELECT SourceAirport FROM flights ALL SELECT DestAirport FROM flights ) GROUP BY SourceAirport ORDER BY COUNT(*) DESC LIMIT 1
Gold: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'all'
Predicted: SELECT AirportCode FROM ( SELECT SourceAirport AS AirportCode FROM flights ALL SELECT DestAirport AS AirportCode FROM flights ) AS all_flights_airports GROUP BY AirportCode ORDER BY COUNT(*) DESC LIMIT 1
Gold: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'all'
Predicted: SELECT AirportCode FROM ( SELECT SourceAirport AS AirportCode FROM flights ALL SELECT DestAirport AS AirportCode FROM flights ) AS all_airport_flights GROUP BY AirportCode ORDER BY COUNT(*) ASC LIMIT 1
Gold: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'all'
Predicted: SELECT AirportCode FROM ( SELECT SourceAirport AS AirportCode FROM flights ALL SELECT DestAirport AS AirportCode FROM flights ) AS all_airports GROUP BY AirportCode ORDER BY COUNT(*) ASC LIMIT 1
Gold: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Airline FROM airlines T1 JOIN flights T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY COUNT(*) DESC LIMIT 1
Gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Airline FROM airlines T1 JOIN flights T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY COUNT(*) DESC LIMIT 1
Gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Abbreviation, T1.Country FROM airlines T1 JOIN (SELECT Airline, COUNT(*) AS flight_count FROM flights GROUP BY Airline) AS T2 ON T1.Airline = T2.Airline ORDER BY T2.flight_count ASC LIMIT 1
Gold: SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Abbreviation, T1.Country FROM airlines T1 JOIN flights T2 ON T1.Airline = T2.Airline GROUP BY T1.Airline, T1.Abbreviation, T1.Country ORDER BY COUNT(T2.FlightNo) ASC LIMIT 1
Gold: SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT DISTINCT T1.Airline FROM airlines T1 JOIN flights T2 ON T1.Airline = T2.Airline WHERE T2.SourceAirport = 'AHD'
Gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "AHD"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Airline FROM airlines T1 JOIN flights T2 ON T1.Airline = T2.Airline WHERE T2.SourceAirport = 'AHD'
Gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "AHD"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT DISTINCT T1.Airline FROM airlines T1 JOIN flights T2 ON T1.Airline = T2.Airline WHERE T2.DestAirport = 'AHD'
Gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  "AHD"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT DISTINCT T1.Airline FROM airlines T1 JOIN flights T2 ON T1.Abbreviation = T2.Airline WHERE T2.DestAirport = 'AHD'
Gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  "AHD"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Airline FROM airlines T1 JOIN flights T2 ON T1.Abbreviation = T2.Airline WHERE T2.SourceAirport IN ('APG', 'CVO') GROUP BY T1.Airline HAVING COUNT(DISTINCT T2.SourceAirport) = 2
Gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Airline FROM airlines T1 JOIN flights T2 ON T1.Abbreviation = T2.Airline WHERE T2.SourceAirport = 'CVO' AND T1.Abbreviation NOT IN (SELECT T3.Airline FROM flights T3 WHERE T3.SourceAirport = 'APG')
Gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Airline FROM airlines T1 JOIN flights T2 ON T1.Airline = T2.Airline GROUP BY T1.Airline HAVING COUNT(*) >= 10
Gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Airline FROM airlines T1 JOIN flights T2 ON T1.Abbreviation = T2.Airline GROUP BY T1.Airline HAVING COUNT(T2.FlightNo) >= 10
Gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Airline FROM airlines T1 JOIN flights T2 ON T1.Airline = T2.Airline GROUP BY T1.Airline HAVING COUNT(T2.FlightNo) < 200
Gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Airline FROM airlines T1 JOIN flights T2 ON T1.Airline = T2.Airline GROUP BY T1.Airline HAVING COUNT(*) < 200
Gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.FlightNo FROM flights T1 JOIN airlines T2 ON T1.Airline = T2.Abbreviation WHERE T2.Airline = 'United Airlines'
Gold: SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  "United Airlines"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.FlightNo FROM flights T1 JOIN airports T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'
Gold: SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.FlightNo FROM flights T1 JOIN airports T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'
Gold: SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.FlightNo FROM flights T1 JOIN airports T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'
Gold: SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.FlightNo FROM flights T1 JOIN airports T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'
Gold: SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT COUNT(*) FROM flights T1 JOIN airports T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen' OR T2.City = 'Abilene'
Gold: SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  "Aberdeen" OR T2.city  =  "Abilene"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT COUNT(*) FROM flights T1 JOIN airports T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen' OR T2.City = 'Abilene'
Gold: SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  "Aberdeen" OR T2.city  =  "Abilene"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'flightson'
Predicted: SELECT AirportCode FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flightsON SELECT DestAirport FROM flights)
Gold: SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name FROM employee T1 JOIN evaluation T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T1.Employee_ID ORDER BY COUNT(*) DESC LIMIT 1
Gold: SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1
Database: employee_hire_evaluation
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name FROM employee T1 JOIN evaluation T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T1.Employee_ID ORDER BY COUNT(T2.Employee_ID) DESC LIMIT 1
Gold: SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1
Database: employee_hire_evaluation
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name FROM employee T1 JOIN evaluation T2 ON T1.Employee_ID = T2.Employee_ID ORDER BY T2.Bonus DESC LIMIT 1
Gold: SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1
Database: employee_hire_evaluation
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name FROM employee T1 INNER JOIN evaluation T2 ON T1.Employee_ID = T2.Employee_ID ORDER BY T2.Bonus DESC LIMIT 1
Gold: SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1
Database: employee_hire_evaluation
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name FROM shop T1 JOIN hiring T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT(T2.Employee_ID) DESC LIMIT 1
Gold: SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1
Database: employee_hire_evaluation
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name FROM shop T1 JOIN hiring T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT(T2.Employee_ID) DESC LIMIT 1
Gold: SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1
Database: employee_hire_evaluation
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name FROM shop T1 LEFT JOIN hiring T2 ON T1.Shop_ID = T2.Shop_ID WHERE T2.Employee_ID IS NULL
Gold: SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)
Database: employee_hire_evaluation
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name, COUNT(*) FROM shop T1 JOIN hiring T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID, T1.Name
Gold: SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name
Database: employee_hire_evaluation
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name, COUNT(T2.Employee_ID) FROM shop T1 JOIN hiring T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID, T1.Name
Gold: SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name
Database: employee_hire_evaluation
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Template_ID, COUNT(*) FROM Templates T1 JOIN Documents T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID
Gold: SELECT template_id ,  count(*) FROM Documents GROUP BY template_id
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Template_ID, T1.Template_Type_Code FROM Templates T1 JOIN Documents T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID, T1.Template_Type_Code ORDER BY COUNT(T2.Document_ID) DESC LIMIT 1
Gold: SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Template_ID FROM Templates T1 JOIN Documents T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID HAVING COUNT(T2.Document_ID) > 1
Gold: SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Template_ID FROM Templates T1 JOIN Documents T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID HAVING COUNT(T2.Document_ID) > 1
Gold: SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: Error col: not
Predicted: SELECT Templates.Template_ID FROM Templates WHERE NOT EXISTS (SELECT 1 FROM Documents WHERE Documents.Template_ID = Templates.Template_ID)
Gold: SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: Error col: not
Predicted: SELECT Templates.Template_ID FROM Templates WHERE NOT EXISTS (SELECT 1 FROM Documents WHERE Documents.Template_ID = Templates.Template_ID)
Gold: SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 
Predicted: SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT')
Gold: SELECT template_id FROM Templates WHERE template_type_code  =  "PP" OR template_type_code  =  "PPT"
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID) FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code
Gold: SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code HAVING COUNT(Templates.Template_ID) < 3
Gold: SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T2.Template_Type_Code FROM Documents T1 JOIN Templates T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Document_Name = 'Data base'
Gold: SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  "Data base"
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Template_Type_Code FROM Templates T1 JOIN Documents T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = 'Data base'
Gold: SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  "Data base"
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Document_Name FROM Documents T1 JOIN Templates T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'BK'
Gold: SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  "BK"
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Template_Type_Code, COUNT(T3.Document_ID) FROM Ref_Template_Types T1 JOIN Templates T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents T3 ON T2.Template_ID = T3.Template_ID GROUP BY T1.Template_Type_Code
Gold: SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T2.Template_Type_Code FROM Documents T1 JOIN Templates T3 ON T1.Template_ID = T3.Template_ID JOIN Ref_Template_Types T2 ON T3.Template_Type_Code = T2.Template_Type_Code GROUP BY T2.Template_Type_Code ORDER BY COUNT(T1.Document_ID) DESC LIMIT 1
Gold: SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Template_Type_Code FROM Templates T1 JOIN Documents T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1
Gold: SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_ID IS NULL
Gold: SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT DISTINCT T2.Template_Type_Description FROM Templates T1 JOIN Ref_Template_Types T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents T3 ON T1.Template_ID = T3.Template_ID
Gold: SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Paragraph_ID, T1.Paragraph_Text FROM Paragraphs T1 JOIN Documents T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Welcome to NY'
Gold: SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Paragraph_ID, T1.Paragraph_Text FROM Paragraphs T1 JOIN Documents T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Welcome to NY'
Gold: SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Paragraph_Text FROM Paragraphs T1 JOIN Documents T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Customer reviews'
Gold: SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  "Customer reviews"
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Paragraph_Text FROM Paragraphs T1 JOIN Documents T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Customer reviews'
Gold: SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  "Customer reviews"
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID
Gold: SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) AS NumberOfParagraphs FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name
Gold: SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Document_ID FROM Documents T1 JOIN Paragraphs T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID HAVING COUNT(T2.Paragraph_ID) >= 2
Gold: SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Document_ID, T1.Document_Name FROM Documents T1 JOIN Paragraphs T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID, T1.Document_Name ORDER BY COUNT(T2.Paragraph_ID) DESC LIMIT 1
Gold: SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'p1'
Predicted: SELECT Documents.Document_ID FROM Documents JOIN Paragraphs P1 ON Documents.Document_ID = P1.Document_ID AND P1.Paragraph_Text LIKE '%Brazil%' JOIN Paragraphs P2 ON Documents.Document_ID = P2.Document_ID AND P2.Paragraph_Text LIKE '%Ireland%' GROUP BY Documents.Document_ID
Gold: SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 
Predicted: SELECT Name FROM teacher WHERE Age IN (32, 33)
Gold: SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33
Database: course_teach
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name, T3.Course FROM teacher T1 JOIN course_arrange T2 ON T1.Teacher_ID = T2.Teacher_ID JOIN course T3 ON T2.Course_ID = T3.Course_ID
Gold: SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID
Database: course_teach
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name, T3.Course FROM teacher T1 JOIN course_arrange T2 ON T1.Teacher_ID = T2.Teacher_ID JOIN course T3 ON T2.Course_ID = T3.Course_ID
Gold: SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID
Database: course_teach
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name, T3.Course FROM teacher T1 JOIN course_arrange T2 ON T1.Teacher_ID = T2.Teacher_ID JOIN course T3 ON T2.Course_ID = T3.Course_ID ORDER BY T1.Name ASC
Gold: SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name
Database: course_teach
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name, T3.Course FROM teacher T1 JOIN course_arrange T2 ON T1.Teacher_ID = T2.Teacher_ID JOIN course T3 ON T2.Course_ID = T3.Course_ID ORDER BY T1.Name ASC
Gold: SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name
Database: course_teach
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name FROM teacher T1 JOIN course_arrange T2 ON T1.Teacher_ID = T2.Teacher_ID JOIN course T3 ON T2.Course_ID = T3.Course_ID WHERE T3.Course = 'math'
Gold: SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  "Math"
Database: course_teach
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT DISTINCT T1.Name FROM teacher T1 JOIN course_arrange T2 ON T1.Teacher_ID = T2.Teacher_ID JOIN course T3 ON T2.Course_ID = T3.Course_ID WHERE T3.Course = 'math'
Gold: SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  "Math"
Database: course_teach
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name, COUNT(*) FROM teacher T1 JOIN course_arrange T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Teacher_ID, T1.Name
Gold: SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name
Database: course_teach
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name, COUNT(T2.Course_ID) FROM teacher T1 JOIN course_arrange T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Name
Gold: SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name
Database: course_teach
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name FROM teacher T1 JOIN course_arrange T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Teacher_ID, T1.Name HAVING COUNT(T2.Course_ID) >= 2
Gold: SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2
Database: course_teach
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name FROM teacher T1 JOIN course_arrange T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Teacher_ID, T1.Name HAVING COUNT(T2.Course_ID) >= 2
Gold: SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2
Database: course_teach
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name FROM teacher T1 LEFT JOIN course_arrange T2 ON T1.Teacher_ID = T2.Teacher_ID WHERE T2.Teacher_ID IS NULL
Gold: SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)
Database: course_teach
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.ID, T1.Name, T1.Age FROM visitor T1 JOIN (SELECT DISTINCT visitor_ID FROM visit GROUP BY visitor_ID, Museum_ID HAVING COUNT(*) > 1) AS T2 ON T1.ID = T2.visitor_ID
Gold: SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1
Database: museum_visit
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.ID, T1.Name, T1.Level_of_membership FROM visitor T1 JOIN visit T2 ON T1.ID = T2.visitor_ID GROUP BY T1.ID, T1.Name, T1.Level_of_membership ORDER BY SUM(T2.Total_spent) DESC LIMIT 1
Gold: SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1
Database: museum_visit
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Museum_ID, T1.Name FROM museum T1 JOIN visit T2 ON T1.Museum_ID = T2.Museum_ID GROUP BY T1.Museum_ID ORDER BY COUNT(T2.Museum_ID) DESC LIMIT 1
Gold: SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1
Database: museum_visit
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name FROM museum T1 LEFT JOIN visit T2 ON T1.Museum_ID = T2.Museum_ID WHERE T2.Museum_ID IS NULL
Gold: SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)
Database: museum_visit
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name, T1.Age FROM visitor T1 JOIN visit T2 ON T1.ID = T2.visitor_ID ORDER BY T2.Num_of_Ticket DESC LIMIT 1
Gold: SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1
Database: museum_visit
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT SUM(T1.Total_spent) FROM visit T1 JOIN visitor T2 ON T1.visitor_ID = T2.ID WHERE T2.Level_of_membership = 1
Gold: SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1
Database: museum_visit
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name FROM visitor T1 JOIN visit T2 ON T1.ID = T2.visitor_ID JOIN museum T3 ON T2.Museum_ID = T3.Museum_ID WHERE T3.Open_Year < 2009 INTERSECT SELECT T1.Name FROM visitor T1 JOIN visit T2 ON T1.ID = T2.visitor_ID JOIN museum T3 ON T2.Museum_ID = T3.Museum_ID WHERE T3.Open_Year > 2011
Gold: SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011
Database: museum_visit
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT COUNT(ID) FROM visitor WHERE ID NOT IN (SELECT T1.visitor_ID FROM visit T1 JOIN museum T2 ON T1.Museum_ID = T2.Museum_ID WHERE T2.Open_Year > 2010)
Gold: SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)
Database: museum_visit
--------------------------------------------------------------------------------
PARSE FAILED: 
Predicted: SELECT winner_name FROM matches WHERE year IN (2013, 2016) GROUP BY winner_name HAVING COUNT(DISTINCT year) = 2
Gold: SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 
Predicted: SELECT winner_name FROM matches WHERE year IN (2013, 2016) GROUP BY winner_name HAVING COUNT(DISTINCT year) = 2
Gold: SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.country_code, T1.first_name FROM players T1 JOIN (SELECT winner_id FROM matches WHERE tourney_name = 'WTA Championships' INTERSECT SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open') AS T2 ON T1.player_id = T2.winner_id
Gold: SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: Error col: concat
Predicted: SELECT CONCAT(first_name, ' ', last_name) FROM players ORDER BY birth_date
Gold: SELECT first_name ,  last_name FROM players ORDER BY birth_date
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.first_name, T1.country_code FROM players T1 JOIN rankings T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id, T1.first_name, T1.country_code ORDER BY SUM(T2.tours) DESC LIMIT 1
Gold: SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.first_name, T1.country_code FROM players T1 INNER JOIN rankings T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id, T1.first_name, T1.country_code ORDER BY SUM(T2.tours) DESC LIMIT 1
Gold: SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: Error col: select
Predicted: SELECT players.first_name, players.last_name, ( SELECT rankings.ranking_points FROM rankings WHERE rankings.player_id = players.player_id ORDER BY rankings.ranking_date DESC LIMIT 1 ) AS rank_points FROM players JOIN ( SELECT winner_id FROM matches GROUP BY winner_id ORDER BY COUNT(*) DESC LIMIT 1 ) AS top_winner ON players.player_id = top_winner.winner_id
Gold: SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.first_name, AVG(T2.ranking) FROM players T1 JOIN rankings T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id, T1.first_name
Gold: SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.first_name, AVG(T2.ranking) FROM players T1 JOIN rankings T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name
Gold: SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.first_name, SUM(T2.ranking_points) AS total_ranking_points FROM players T1 JOIN rankings T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id, T1.first_name
Gold: SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.first_name, SUM(T2.ranking_points) FROM players T1 JOIN rankings T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name
Gold: SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.first_name, T1.country_code, T1.birth_date FROM players T1 JOIN matches T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1
Gold: SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.first_name, T1.country_code, T1.birth_date FROM players T1 JOIN matches T2 ON T1.player_id = T2.winner_id GROUP BY T1.player_id, T1.first_name, T1.country_code, T1.birth_date ORDER BY SUM(T2.winner_rank_points) DESC LIMIT 1
Gold: SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.killed, T1.injured FROM death T1 JOIN ship T2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't'
Gold: SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'
Database: battle_death
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.id, T1.name FROM battle T1 JOIN ship T2 ON T1.id = T2.lost_in_battle JOIN death T3 ON T2.id = T3.caused_by_ship_id GROUP BY T1.id, T1.name HAVING SUM(T3.killed) > 10
Gold: SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10
Database: battle_death
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.id, T1.name FROM ship T1 JOIN death T2 ON T1.id = T2.caused_by_ship_id GROUP BY T1.id, T1.name ORDER BY SUM(T2.injured) DESC LIMIT 1
Gold: SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1
Database: battle_death
--------------------------------------------------------------------------------
PARSE FAILED: Error col: not
Predicted: SELECT COUNT(*) FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = 225 AND lost_in_battle IS NOT NULL)
Gold: SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );
Database: battle_death
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.name, T1.date FROM battle T1 JOIN ship T2 ON T1.id = T2.lost_in_battle WHERE T2.name IN ('Lettice', 'HMS Atalanta') GROUP BY T1.id, T1.name, T1.date HAVING COUNT(DISTINCT T2.name) = 2
Gold: SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'
Database: battle_death
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.name, T1.result, T1.bulgarian_commander FROM battle T1 WHERE NOT EXISTS ( SELECT 1 FROM ship T2 WHERE T2.lost_in_battle = T1.id AND T2.location = 'English Channel' )
Gold: SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'
Database: battle_death
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.department_name, T1.department_id FROM Departments T1 JOIN Degree_Programs T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id, T1.department_name ORDER BY COUNT(T2.degree_program_id) DESC LIMIT 1
Gold: SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.department_name, T1.department_id FROM Departments T1 JOIN Degree_Programs T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id, T1.department_name ORDER BY COUNT(T2.degree_program_id) DESC LIMIT 1
Gold: select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT COUNT(DISTINCT T1.department_id) FROM Departments T1 JOIN Degree_Programs T2 ON T1.department_id = T2.department_id
Gold: SELECT count(DISTINCT department_id) FROM Degree_Programs
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT Courses.course_name, Courses.course_id FROM Courses LEFT JOIN Sections ON Courses.course_id = Sections.course_id GROUP BY Courses.course_id, Courses.course_name HAVING COUNT(Sections.section_id) < 2
Gold: SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: '('
Predicted: SELECT Students.first_name, Students.middle_name, Students.last_name, Students.student_id FROM Students JOIN ( SELECT student_id, semester_id FROM Student_Enrolment GROUP BY student_id, semester_id HAVING COUNT(DISTINCT degree_program_id) = 2 ) AS EnrolledPrograms ON Students.student_id = EnrolledPrograms.student_id
Gold: SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students T1 JOIN Student_Enrolment T2 ON T1.student_id = T2.student_id JOIN Degree_Programs T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name LIKE '%Bachelor%'
Gold: SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T2.degree_summary_name FROM Student_Enrolment T1 JOIN Degree_Programs T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T2.degree_program_id, T2.degree_summary_name ORDER BY COUNT(T1.student_id) DESC LIMIT 1
Gold: SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.degree_summary_name FROM Degree_Programs T1 JOIN Student_Enrolment T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id, T1.degree_summary_name ORDER BY COUNT(T2.student_id) DESC LIMIT 1
Gold: SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.degree_program_id, T1.degree_summary_name FROM Degree_Programs T1 JOIN Student_Enrolment T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id, T1.degree_summary_name ORDER BY COUNT(T2.student_id) DESC LIMIT 1
Gold: SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.degree_program_id, T1.degree_summary_name FROM Degree_Programs T1 JOIN Student_Enrolment T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id, T1.degree_summary_name ORDER BY COUNT(T2.student_id) DESC LIMIT 1
Gold: SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: Error col: as
Predicted: SELECT Students.student_id, Students.first_name, Students.middle_name, Students.last_name, COUNT(Student_Enrolment.student_enrolment_id) AS num_enrollments FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id, Students.first_name, Students.middle_name, Students.last_name ORDER BY num_enrollments DESC LIMIT 1
Gold: SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.last_name FROM Students T1 JOIN Addresses T2 ON T1.current_address_id = T2.address_id LEFT JOIN Student_Enrolment T3 ON T1.student_id = T3.student_id WHERE T2.state_province_county = 'North Carolina' AND T3.student_enrolment_id IS NULL
Gold: SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.last_name FROM Students T1 JOIN Addresses T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'North Carolina' AND NOT EXISTS (SELECT 1 FROM Student_Enrolment T3 WHERE T3.student_id = T1.student_id)
Gold: SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.transcript_date, T1.transcript_id FROM Transcripts T1 JOIN Transcript_Contents T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id, T1.transcript_date HAVING COUNT(T2.student_course_id) >= 2
Gold: SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'select' not found
Predicted: WITH AddressStudentAssociations AS ( SELECT current_address_id AS address_id, student_id FROM Students WHERE current_address_id IS NOT NULL UNION SELECT permanent_address_id AS address_id, student_id FROM Students WHERE permanent_address_id IS NOT NULL ), AddressStudentCounts AS ( SELECT address_id, COUNT(student_id) AS student_count FROM AddressStudentAssociations GROUP BY address_id ) SELECT Addresses.address_id, Addresses.line_1, Addresses.line_2 FROM Addresses JOIN AddressStudentCounts asc_table ON Addresses.address_id = asc_table.address_id ORDER BY asc_table.student_count DESC LIMIT 1
Gold: SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: Error col: year
Predicted: SELECT AVG(YEAR(transcript_date)) FROM Transcripts
Gold: SELECT avg(transcript_date) FROM Transcripts
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'select' not found
Predicted: WITH CourseTranscriptCounts AS ( SELECT Student_Enrolment_Courses.course_id, COUNT(DISTINCT Transcript_Contents.transcript_id) AS transcript_count FROM Transcript_Contents JOIN Student_Enrolment_Courses ON Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id GROUP BY Student_Enrolment_Courses.course_id ), MaxCourseTranscript AS ( SELECT course_id, transcript_count FROM CourseTranscriptCounts ORDER BY transcript_count DESC LIMIT 1 ) SELECT MaxCourseTranscript.transcript_count, (SELECT student_enrolment_id FROM Student_Enrolment_Courses WHERE course_id = MaxCourseTranscript.course_id LIMIT 1) AS student_enrolment_id FROM MaxCourseTranscript
Gold: SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.transcript_date, T1.transcript_id FROM Transcripts T1 JOIN Transcript_Contents T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id, T1.transcript_date ORDER BY COUNT(T2.student_course_id) ASC LIMIT 1
Gold: SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.transcript_date, T1.transcript_id FROM Transcripts T1 JOIN Transcript_Contents T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id, T1.transcript_date ORDER BY COUNT(T2.student_course_id) ASC LIMIT 1
Gold: SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: Error col: case
Predicted: SELECT Semesters.semester_name FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id GROUP BY Semesters.semester_id, Semesters.semester_name HAVING SUM(CASE WHEN Degree_Programs.degree_summary_name LIKE '%Master%' THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN Degree_Programs.degree_summary_name LIKE '%Bachelor%' THEN 1 ELSE 0 END) > 0
Gold: SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T2.semester_id FROM Degree_Programs T1 INNER JOIN Student_Enrolment T2 ON T1.degree_program_id = T2.degree_program_id WHERE T1.degree_summary_name IN ('Masters', 'Bachelors') GROUP BY T2.semester_id HAVING COUNT(DISTINCT T1.degree_summary_name) = 2
Gold: SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.first_name FROM Students T1 JOIN Addresses T2 ON T1.permanent_address_id = T2.address_id WHERE T2.country = 'Haiti' OR T1.cell_mobile_number = '09700166582'
Gold: select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.first_name FROM Students T1 JOIN Addresses T2 ON T1.permanent_address_id = T2.address_id WHERE T2.country = 'Haiti' OR T1.cell_mobile_number = '09700166582'
Gold: select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.series_name FROM TV_Channel T1 JOIN Cartoon T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle!'
Gold: SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = "The Rise of the Blue Beetle!";
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.series_name FROM TV_Channel T1 JOIN Cartoon T2 ON T1.Channel = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle'
Gold: SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = "The Rise of the Blue Beetle!";
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Title FROM Cartoon T1 JOIN TV_Channel T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio'
Gold: SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Title FROM Cartoon T1 JOIN TV_Channel T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio'
Gold: SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.series_name FROM TV_Channel T1 JOIN TV_series T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'
Gold: SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = "A Love of a Lifetime";
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.series_name FROM TV_Channel T1 JOIN TV_series T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'
Gold: SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = "A Love of a Lifetime";
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Episode FROM TV_series T1 JOIN TV_Channel T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio'
Gold: SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Episode FROM TV_series T1 JOIN TV_Channel T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio'
Gold: SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT DISTINCT T1.Country FROM TV_Channel T1 JOIN Cartoon T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey'
Gold: SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT DISTINCT T1.Country FROM TV_Channel T1 JOIN Cartoon T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey'
Gold: SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT Country FROM TV_Channel WHERE Country NOT IN (SELECT T1.Country FROM TV_Channel T1 JOIN Cartoon T2 ON T1.series_name = T2.Channel WHERE T2.Written_by = 'Todd Casey')
Gold: SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.series_name, T1.Country FROM TV_Channel T1 JOIN Cartoon T2 ON T1.id = T2.Channel WHERE T2.Directed_by = 'Ben Jones' OR T2.Directed_by = 'Michael Chang'
Gold: SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.series_name, T1.Country FROM TV_Channel T1 JOIN Cartoon T2 ON T1.id = T2.Channel WHERE T2.Directed_by IN ('Ben Jones', 'Michael Chang') GROUP BY T1.id, T1.series_name, T1.Country HAVING COUNT(DISTINCT T2.Directed_by) = 2
Gold: SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT Package_Option FROM TV_Channel WHERE id NOT IN (SELECT T1.id FROM TV_Channel T1 JOIN Cartoon T2 ON T1.id = T2.Channel WHERE T2.Directed_by = 'Ben Jones')
Gold: SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name FROM people T1 JOIN poker_player T2 ON T1.People_ID = T2.People_ID
Gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID
Database: poker_player
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name FROM people T1 JOIN poker_player T2 ON T1.People_ID = T2.People_ID
Gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID
Database: poker_player
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name FROM people T1 JOIN poker_player T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000
Gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000
Database: poker_player
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name FROM people T1 JOIN poker_player T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000
Gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000
Database: poker_player
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name FROM people T1 JOIN poker_player T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Final_Table_Made ASC
Gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made
Database: poker_player
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name FROM people T1 JOIN poker_player T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Final_Table_Made ASC
Gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made
Database: poker_player
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Birth_Date FROM people T1 JOIN poker_player T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1
Gold: SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1
Database: poker_player
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T2.Birth_Date FROM poker_player T1 JOIN people T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Earnings ASC LIMIT 1
Gold: SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1
Database: poker_player
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Money_Rank FROM poker_player T1 JOIN people T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Height DESC LIMIT 1
Gold: SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1
Database: poker_player
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Money_Rank FROM poker_player T1 JOIN people T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Height DESC LIMIT 1
Gold: SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1
Database: poker_player
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT AVG(T1.Earnings) FROM poker_player T1 JOIN people T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200
Gold: SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200
Database: poker_player
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT AVG(T1.Earnings) FROM poker_player T1 JOIN people T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200
Gold: SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200
Database: poker_player
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name FROM people T1 JOIN poker_player T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings DESC
Gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC
Database: poker_player
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name FROM people T1 JOIN poker_player T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings DESC
Gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC
Database: poker_player
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name FROM people T1 LEFT JOIN poker_player T2 ON T1.People_ID = T2.People_ID WHERE T2.People_ID IS NULL
Gold: SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
Database: poker_player
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.contestant_number, T1.contestant_name FROM CONTESTANTS T1 JOIN VOTES T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number, T1.contestant_name HAVING COUNT(*) >= 2
Gold: SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2
Database: voter_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.contestant_number, T1.contestant_name FROM CONTESTANTS T1 JOIN VOTES T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number, T1.contestant_name ORDER BY COUNT(T2.vote_id) ASC LIMIT 1
Gold: SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1
Database: voter_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT COUNT(T1.contestant_number) FROM CONTESTANTS T1 LEFT JOIN VOTES T2 ON T1.contestant_number = T2.contestant_number WHERE T2.contestant_number IS NULL
Gold: SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )
Database: voter_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.area_code FROM AREA_CODE_STATE T1 JOIN VOTES T2 ON T1.state = T2.state GROUP BY T1.area_code ORDER BY COUNT(T2.vote_id) DESC LIMIT 1
Gold: SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1
Database: voter_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.created, T1.state, T1.phone_number FROM VOTES T1 JOIN CONTESTANTS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.contestant_name = 'Tabatha Gehling'
Gold: SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'
Database: voter_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.area_code FROM AREA_CODE_STATE T1 JOIN VOTES T2 ON T1.state = T2.state JOIN CONTESTANTS T3 ON T2.contestant_number = T3.contestant_number WHERE T3.contestant_name IN ('Tabatha Gehling', 'Kelly Clauss') GROUP BY T1.area_code HAVING COUNT(DISTINCT T3.contestant_name) = 2
Gold: SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'
Database: voter_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T2.Region FROM city T1 JOIN country T2 ON T1.CountryCode = T2.Code WHERE T1.Name = 'Kabul'
Gold: SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  "Kabul"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T2.Region FROM city T1 JOIN country T2 ON T1.CountryCode = T2.Code WHERE T1.Name = 'Kabul'
Gold: SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  "Kabul"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T2.Language FROM country T1 JOIN countrylanguage T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Aruba' ORDER BY T2.Percentage DESC LIMIT 1
Gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba" ORDER BY Percentage DESC LIMIT 1
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T2.Language FROM country T1 JOIN countrylanguage T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Aruba' ORDER BY T2.Percentage DESC LIMIT 1
Gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba" ORDER BY Percentage DESC LIMIT 1
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 
Predicted: SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe')
Gold: SELECT sum(SurfaceArea) FROM country WHERE Continent  =  "Asia" OR Continent  =  "Europe"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT COUNT(DISTINCT T1.Language) FROM countrylanguage T1 JOIN country T2 ON T1.CountryCode = T2.Code WHERE T2.Name = 'Aruba'
Gold: SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT COUNT(*) FROM countrylanguage T1 JOIN country T2 ON T1.CountryCode = T2.Code WHERE T2.Name = 'Aruba'
Gold: SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT COUNT(*) FROM country T1 JOIN countrylanguage T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Afghanistan' AND T2.IsOfficial = 'T'
Gold: SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Afghanistan" AND IsOfficial  =  "T"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT COUNT(*) FROM countrylanguage T1 JOIN country T2 ON T1.CountryCode = T2.Code WHERE T2.Name = 'Afghanistan' AND T1.IsOfficial = 'T'
Gold: SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Afghanistan" AND IsOfficial  =  "T"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name FROM country T1 JOIN (SELECT CountryCode, COUNT(Language) AS language_count FROM countrylanguage GROUP BY CountryCode ORDER BY language_count DESC LIMIT 1) AS T2 ON T1.Code = T2.CountryCode
Gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name FROM country T1 JOIN (SELECT CountryCode, COUNT(Language) AS language_count FROM countrylanguage GROUP BY CountryCode ORDER BY language_count DESC LIMIT 1) AS T2 ON T1.Code = T2.CountryCode
Gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Continent FROM country T1 JOIN countrylanguage T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(DISTINCT T2.Language) DESC LIMIT 1
Gold: SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Continent FROM country T1 JOIN countrylanguage T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(T2.Language) DESC LIMIT 1
Gold: SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT COUNT(DISTINCT T1.CountryCode) FROM countrylanguage T1 JOIN countrylanguage T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Language = 'English' AND T2.Language = 'Dutch'
Gold: SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch")
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 
Predicted: SELECT COUNT(*) FROM (SELECT CountryCode FROM countrylanguage WHERE Language IN ('English', 'Dutch') GROUP BY CountryCode HAVING COUNT(DISTINCT Language) = 2) AS subquery
Gold: SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch")
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name FROM country T1 JOIN countrylanguage T2 ON T1.Code = T2.CountryCode WHERE T2.Language IN ('English', 'French') GROUP BY T1.Code, T1.Name HAVING COUNT(DISTINCT T2.Language) = 2
Gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name FROM country T1 JOIN countrylanguage T2 ON T1.Code = T2.CountryCode WHERE T2.Language IN ('English', 'French') GROUP BY T1.Code, T1.Name HAVING COUNT(DISTINCT T2.Language) = 2
Gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name FROM country T1 JOIN countrylanguage T2 ON T1.Code = T2.CountryCode JOIN countrylanguage T3 ON T1.Code = T3.CountryCode WHERE T2.Language = 'English' AND T2.IsOfficial = 'T' AND T3.Language = 'French' AND T3.IsOfficial = 'T'
Gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French" AND T2.IsOfficial  =  "T"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name FROM country T1 INNER JOIN countrylanguage T2 ON T1.Code = T2.CountryCode WHERE T2.Language IN ('English', 'French') AND T2.IsOfficial = 'T' GROUP BY T1.Code HAVING COUNT(DISTINCT T2.Language) = 2
Gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French" AND T2.IsOfficial  =  "T"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT COUNT(DISTINCT T2.Continent) FROM countrylanguage T1 JOIN country T2 ON T1.CountryCode = T2.Code WHERE T1.Language = 'Chinese'
Gold: SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Chinese"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT COUNT(DISTINCT T1.Continent) FROM country T1 JOIN countrylanguage T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Chinese'
Gold: SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Chinese"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT DISTINCT T1.Region FROM country T1 JOIN countrylanguage T2 ON T1.Code = T2.CountryCode WHERE T2.Language IN ('English', 'Dutch')
Gold: SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" OR T2.Language  =  "Dutch"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT DISTINCT T1.Region FROM country T1 JOIN countrylanguage T2 ON T1.Code = T2.CountryCode WHERE T2.Language IN ('Dutch', 'English')
Gold: SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" OR T2.Language  =  "Dutch"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name FROM country T1 JOIN countrylanguage T2 ON T1.Code = T2.CountryCode WHERE T2.IsOfficial = 'T' AND (T2.Language = 'English' OR T2.Language = 'Dutch')
Gold: select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  "english" and isofficial  =  "t" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  "dutch" and isofficial  =  "t"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name FROM country T1 JOIN countrylanguage T2 ON T1.Code = T2.CountryCode WHERE T2.IsOfficial = 'T' AND T2.Language IN ('English', 'Dutch')
Gold: SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND IsOfficial  =  "T" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch" AND IsOfficial  =  "T"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T2.Language FROM country T1 INNER JOIN countrylanguage T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Asia' GROUP BY T2.Language ORDER BY SUM(T1.Population * T2.Percentage / 100) DESC LIMIT 1
Gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  "Asia" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T2.Language FROM country T1 JOIN countrylanguage T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Asia' GROUP BY T2.Language ORDER BY COUNT(DISTINCT T1.Code) DESC LIMIT 1
Gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  "Asia" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Language FROM countrylanguage T1 JOIN country T2 ON T1.CountryCode = T2.Code WHERE T2.GovernmentForm LIKE '%Republic%' GROUP BY T1.Language HAVING COUNT(T1.CountryCode) = 1
Gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  "Republic" GROUP BY T2.Language HAVING COUNT(*)  =  1
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T2.Language FROM country T1 JOIN countrylanguage T2 ON T1.Code = T2.CountryCode WHERE T1.GovernmentForm = 'Republic' GROUP BY T2.Language HAVING COUNT(T1.Code) = 1
Gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  "Republic" GROUP BY T2.Language HAVING COUNT(*)  =  1
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name FROM city T1 JOIN countrylanguage T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = 'English' ORDER BY T1.Population DESC LIMIT 1
Gold: SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  "English" ORDER BY T1.Population DESC LIMIT 1
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name FROM city T1 JOIN countrylanguage T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = 'English' ORDER BY T1.Population DESC LIMIT 1
Gold: SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  "English" ORDER BY T1.Population DESC LIMIT 1
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT SUM(T1.Population) FROM country T1 WHERE NOT EXISTS (SELECT 1 FROM countrylanguage T2 WHERE T1.Code = T2.CountryCode AND T2.Language = 'English')
Gold: SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English")
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT SUM(country.Population) FROM country LEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode AND countrylanguage.Language = 'English' WHERE countrylanguage.CountryCode IS NULL
Gold: SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English")
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T2.Language FROM country T1 JOIN countrylanguage T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = 'Beatrix' AND T2.IsOfficial = 'T'
Gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  "Beatrix" AND T2.IsOfficial  =  "T"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T2.Language FROM country T1 JOIN countrylanguage T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = 'Beatrix' AND T2.IsOfficial = 'T'
Gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  "Beatrix" AND T2.IsOfficial  =  "T"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT COUNT(DISTINCT T2.Language) FROM country T1 JOIN countrylanguage T2 ON T1.Code = T2.CountryCode WHERE T1.IndepYear < 1930 AND T2.IsOfficial = 'T'
Gold: SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  "T"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT COUNT(DISTINCT T2.Language) FROM country T1 JOIN countrylanguage T2 ON T1.Code = T2.CountryCode WHERE T1.IndepYear < 1930 AND T2.IsOfficial = 'T'
Gold: SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  "T"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Code FROM country T1 LEFT JOIN countrylanguage T2 ON T1.Code = T2.CountryCode AND T2.Language = 'English' WHERE T1.GovernmentForm <> 'Republic' AND T2.CountryCode IS NULL
Gold: SELECT Code FROM country WHERE GovernmentForm != "Republic" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Code FROM country T1 WHERE T1.GovernmentForm != 'Republic' AND T1.Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')
Gold: SELECT Code FROM country WHERE GovernmentForm != "Republic" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name FROM city T1 JOIN country T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = 'Europe' AND T1.CountryCode NOT IN (SELECT T3.CountryCode FROM countrylanguage T3 WHERE T3.Language = 'English' AND T3.IsOfficial = 'T')
Gold: SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT DISTINCT T1.Name FROM city T1 INNER JOIN country T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = 'Europe' AND T1.CountryCode NOT IN (SELECT T3.CountryCode FROM countrylanguage T3 WHERE T3.Language = 'English' AND T3.IsOfficial = 'T')
Gold: SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name FROM city T1 INNER JOIN country T2 ON T1.CountryCode = T2.Code INNER JOIN countrylanguage T3 ON T2.Code = T3.CountryCode WHERE T2.Continent = 'Asia' AND T3.Language = 'Chinese' AND T3.IsOfficial = 'T'
Gold: select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  "asia"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT DISTINCT T1.Name FROM city T1 JOIN country T2 ON T1.CountryCode = T2.Code JOIN countrylanguage T3 ON T2.Code = T3.CountryCode WHERE T2.Continent = 'Asia' AND T3.Language = 'Chinese' AND T3.IsOfficial = 'T'
Gold: SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  "Asia"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name, COUNT(T2.Language) FROM country T1 JOIN countrylanguage T2 ON T1.Code = T2.CountryCode GROUP BY T1.Code, T1.Name HAVING COUNT(T2.Language) >= 3
Gold: SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name, COUNT(T2.Language) FROM country T1 JOIN countrylanguage T2 ON T1.Code = T2.CountryCode GROUP BY T1.Code, T1.Name HAVING COUNT(T2.Language) > 2
Gold: SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'select' not found
Predicted: WITH RankedLanguages AS ( SELECT CountryCode, Language, Percentage, ROW_NUMBER() OVER (PARTITION BY CountryCode ORDER BY Percentage DESC) AS rn FROM countrylanguage ) SELECT country.Name, RankedLanguages.Language, RankedLanguages.Percentage FROM country JOIN RankedLanguages ON country.Code = RankedLanguages.CountryCode WHERE RankedLanguages.rn = 1
Gold: SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: '('
Predicted: SELECT countrylanguage.CountryCode, countrylanguage.Language FROM countrylanguage JOIN ( SELECT CountryCode, MAX(Percentage) AS MaxPercentage FROM countrylanguage GROUP BY CountryCode ) AS max_percentages ON countrylanguage.CountryCode = max_percentages.CountryCode AND countrylanguage.Percentage = max_percentages.MaxPercentage
Gold: SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT COUNT(T1.CountryCode) FROM countrylanguage T1 JOIN (SELECT CountryCode, MAX(Percentage) AS max_percentage FROM countrylanguage GROUP BY CountryCode) AS T2 ON T1.CountryCode = T2.CountryCode AND T1.Percentage = T2.max_percentage WHERE T1.Language = 'Spanish'
Gold: SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT COUNT(DISTINCT T1.Code) FROM country T1 JOIN countrylanguage T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Spanish' AND T2.IsOfficial = 'T'
Gold: SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name, T2.Orchestra FROM conductor T1 JOIN orchestra T2 ON T1.Conductor_ID = T2.Conductor_ID
Gold: SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name, T2.Orchestra FROM conductor T1 JOIN orchestra T2 ON T1.Conductor_ID = T2.Conductor_ID
Gold: SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name FROM conductor T1 JOIN orchestra T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Conductor_ID HAVING COUNT(*) > 1
Gold: SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name FROM conductor T1 JOIN orchestra T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Conductor_ID ORDER BY COUNT(T2.Orchestra_ID) DESC LIMIT 1
Gold: SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name FROM conductor T1 INNER JOIN orchestra T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Conductor_ID ORDER BY COUNT(T2.Orchestra_ID) DESC LIMIT 1
Gold: SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name FROM conductor T1 JOIN orchestra T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008
Gold: SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name FROM conductor T1 JOIN orchestra T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008
Gold: SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: Error col: not
Predicted: SELECT Orchestra FROM orchestra WHERE NOT EXISTS (SELECT 1 FROM performance WHERE performance.Orchestra_ID = orchestra.Orchestra_ID)
Gold: SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Orchestra FROM orchestra T1 LEFT JOIN performance T2 ON T1.Orchestra_ID = T2.Orchestra_ID WHERE T2.Performance_ID IS NULL
Gold: SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT DISTINCT T1.Year_of_Founded FROM orchestra T1 JOIN performance T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T1.Orchestra_ID, T1.Year_of_Founded HAVING COUNT(*) > 1
Gold: SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT Highschooler.name, COUNT(Friend.friend_id) FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID, Highschooler.name
Gold: SELECT student_id ,  count(*) FROM Friend GROUP BY student_id
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT Highschooler.name, COUNT(Friend.friend_id) FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID, Highschooler.name
Gold: SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT Highschooler.name, COUNT(Friend.friend_id) FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID, Highschooler.name
Gold: SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.name FROM Highschooler T1 JOIN Friend T2 ON T1.ID = T2.student_id GROUP BY T1.ID, T1.name ORDER BY COUNT(T2.friend_id) DESC LIMIT 1
Gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.name FROM Highschooler T1 JOIN Friend T2 ON T1.ID = T2.student_id GROUP BY T1.ID, T1.name ORDER BY COUNT(T2.friend_id) DESC LIMIT 1
Gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.name FROM Highschooler T1 JOIN Friend T2 ON T1.ID = T2.student_id GROUP BY T1.ID, T1.name HAVING COUNT(T2.friend_id) >= 3
Gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.name FROM Highschooler T1 JOIN Friend T2 ON T1.ID = T2.student_id GROUP BY T1.ID, T1.name HAVING COUNT(T2.friend_id) >= 3
Gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T2.name FROM Highschooler T1 JOIN Friend T3 ON T1.ID = T3.student_id JOIN Highschooler T2 ON T3.friend_id = T2.ID WHERE T1.name = 'Kyle'
Gold: SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  "Kyle"
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T2.name FROM Highschooler T1 JOIN Friend T3 ON T1.ID = T3.student_id JOIN Highschooler T2 ON T3.friend_id = T2.ID WHERE T1.name = 'Kyle'
Gold: SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  "Kyle"
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT COUNT(T2.friend_id) FROM Highschooler T1 JOIN Friend T2 ON T1.ID = T2.student_id WHERE T1.name = 'Kyle'
Gold: SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT COUNT(T2.friend_id) FROM Highschooler T1 JOIN Friend T2 ON T1.ID = T2.student_id WHERE T1.name = 'Kyle'
Gold: SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: Error col: not
Predicted: SELECT ID FROM Highschooler WHERE NOT EXISTS (SELECT 1 FROM Friend WHERE Highschooler.ID = Friend.student_id)
Gold: SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'friendon'
Predicted: SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM FriendON SELECT friend_id FROM Friend)
Gold: SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT DISTINCT T1.student_id FROM Friend T1 JOIN Likes T2 ON T1.student_id = T2.student_id
Gold: SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT DISTINCT T1.name FROM Highschooler T1 JOIN Friend T2 ON T1.ID = T2.student_id JOIN Likes T3 ON T1.ID = T3.liked_id
Gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.name, COUNT(T2.liked_id) FROM Highschooler T1 JOIN Likes T2 ON T1.ID = T2.liked_id GROUP BY T1.ID, T1.name
Gold: SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.name FROM Highschooler T1 JOIN Likes T2 ON T1.ID = T2.liked_id GROUP BY T1.ID, T1.name ORDER BY COUNT(T2.liked_id) DESC LIMIT 1
Gold: SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.name FROM Highschooler T1 JOIN Likes T2 ON T1.ID = T2.liked_id GROUP BY T1.ID, T1.name ORDER BY COUNT(T2.liked_id) DESC LIMIT 1
Gold: SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.name FROM Highschooler T1 JOIN Likes T2 ON T1.ID = T2.student_id GROUP BY T1.ID, T1.name HAVING COUNT(T2.liked_id) >= 2
Gold: SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.name FROM Highschooler T1 JOIN Friend T2 ON T1.ID = T2.student_id WHERE T1.grade > 5 GROUP BY T1.ID, T1.name HAVING COUNT(T2.friend_id) >= 2
Gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT COUNT(*) FROM Highschooler T1 JOIN Likes T2 ON T1.ID = T2.student_id WHERE T1.name = 'Kyle'
Gold: SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'friendon'
Predicted: SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM FriendON SELECT friend_id FROM Friend)
Gold: SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT Professionals.professional_id, Professionals.last_name, Professionals.cell_number FROM Professionals LEFT JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Professionals.professional_id, Professionals.last_name, Professionals.cell_number HAVING Professionals.state = 'IN' OR COUNT(Treatments.treatment_id) > 2
Gold: SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT name FROM Dogs WHERE owner_id IN ( SELECT Owners.owner_id FROM Owners LEFT JOIN Dogs ON Owners.owner_id = Dogs.owner_id LEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id HAVING SUM(COALESCE(Treatments.cost_of_treatment, 0)) <= 1000 )
Gold: select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT Professionals.professional_id, Professionals.role_code, Professionals.email_address FROM Professionals LEFT JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.treatment_id IS NULL
Gold: SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT Professionals.professional_id, Professionals.role_code, Professionals.email_address FROM Professionals LEFT JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.treatment_id IS NULL
Gold: SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.owner_id, T1.first_name, T1.last_name FROM Owners T1 JOIN Dogs T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id, T1.first_name, T1.last_name ORDER BY COUNT(T2.dog_id) DESC LIMIT 1
Gold: SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.owner_id, T1.first_name, T1.last_name FROM Owners T1 JOIN Dogs T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id, T1.first_name, T1.last_name ORDER BY COUNT(T2.dog_id) DESC LIMIT 1
Gold: SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.breed_name FROM Breeds T1 JOIN Dogs T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY COUNT(T2.dog_id) DESC LIMIT 1
Gold: SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.owner_id, T1.last_name FROM Owners T1 JOIN Dogs T2 ON T1.owner_id = T2.owner_id JOIN Treatments T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id, T1.last_name ORDER BY COUNT(T3.treatment_id) DESC LIMIT 1
Gold: SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.owner_id, T1.last_name FROM Owners T1 JOIN Dogs T2 ON T1.owner_id = T2.owner_id JOIN Treatments T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id, T1.last_name ORDER BY SUM(T3.cost_of_treatment) DESC LIMIT 1
Gold: SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T2.treatment_type_description FROM Treatments T1 JOIN Treatment_Types T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_description ORDER BY SUM(T1.cost_of_treatment) ASC LIMIT 1
Gold: SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.cost_of_treatment, T2.treatment_type_description FROM Treatments T1 JOIN Treatment_Types T2 ON T1.treatment_type_code = T2.treatment_type_code
Gold: SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.first_name, T1.last_name, T3.size_description FROM Owners T1 JOIN Dogs T2 ON T1.owner_id = T2.owner_id JOIN Sizes T3 ON T2.size_code = T3.size_code
Gold: SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.first_name, T2.name FROM Owners T1 JOIN Dogs T2 ON T1.owner_id = T2.owner_id
Gold: SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.first_name, T2.name FROM Owners T1 JOIN Dogs T2 ON T1.owner_id = T2.owner_id
Gold: SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: Error col: as
Predicted: SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.breed_code IN ( SELECT breed_code FROM Dogs GROUP BY breed_code HAVING COUNT(*) = ( SELECT MIN(breed_count) FROM ( SELECT COUNT(*) AS breed_count FROM Dogs GROUP BY breed_code ) AS Counts ) )
Gold: SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: Error col: as
Predicted: SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.breed_code IN ( SELECT breed_code FROM Dogs GROUP BY breed_code HAVING COUNT(dog_id) = ( SELECT MIN(dog_count) FROM ( SELECT breed_code, COUNT(dog_id) AS dog_count FROM Dogs GROUP BY breed_code ) AS breed_counts ) )
Gold: SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.first_name, T2.name FROM Owners T1 JOIN Dogs T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'VA'
Gold: SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.first_name, T2.name FROM Owners T1 JOIN Dogs T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'VA'
Gold: SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT DISTINCT T1.date_arrived, T1.date_departed FROM Dogs T1 JOIN Treatments T2 ON T1.dog_id = T2.dog_id
Gold: SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT DISTINCT T1.date_arrived, T1.date_departed FROM Dogs T1 JOIN Treatments T2 ON T1.dog_id = T2.dog_id
Gold: SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.last_name FROM Owners T1 JOIN Dogs T2 ON T1.owner_id = T2.owner_id ORDER BY T2.date_of_birth DESC LIMIT 1
Gold: SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.last_name FROM Owners T1 JOIN Dogs T2 ON T1.owner_id = T2.owner_id ORDER BY T2.date_of_birth DESC LIMIT 1
Gold: SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: Error col: not
Predicted: SELECT COUNT(dog_id) FROM Dogs WHERE NOT EXISTS (SELECT 1 FROM Treatments WHERE Treatments.dog_id = Dogs.dog_id)
Gold: SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT COUNT(T1.dog_id) FROM Dogs T1 LEFT JOIN Treatments T2 ON T1.dog_id = T2.dog_id WHERE T2.treatment_id IS NULL
Gold: select count(*) from dogs where dog_id not in ( select dog_id from treatments )
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: Error col: null
Predicted: SELECT COUNT(owner_id) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE date_departed IS NULL)
Gold: SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: Error col: not
Predicted: SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs WHERE date_adopted IS NOT NULL AND date_departed IS NULL )
Gold: SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.breed_name, T2.size_description FROM Breeds T1 CROSS JOIN Sizes T2
Gold: SELECT DISTINCT breed_code ,  size_code FROM dogs
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT DISTINCT T1.breed_name, T2.size_description FROM Breeds T1 JOIN Dogs T3 ON T1.breed_code = T3.breed_code JOIN Sizes T2 ON T3.size_code = T2.size_code
Gold: SELECT DISTINCT breed_code ,  size_code FROM dogs
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Title, T2.Name FROM song T1 JOIN singer T2 ON T1.Singer_ID = T2.Singer_ID
Gold: SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID
Database: singer
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Title, T2.Name FROM song T1 JOIN singer T2 ON T1.Singer_ID = T2.Singer_ID
Gold: SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID
Database: singer
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT DISTINCT T1.Name FROM singer T1 JOIN song T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000
Gold: SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000
Database: singer
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT DISTINCT T1.Name FROM singer T1 JOIN song T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000
Gold: SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000
Database: singer
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name FROM singer T1 JOIN song T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Singer_ID HAVING COUNT(T2.Song_ID) > 1
Gold: SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1
Database: singer
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name FROM singer T1 JOIN song T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Singer_ID, T1.Name HAVING COUNT(*) > 1
Gold: SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1
Database: singer
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name, SUM(T2.Sales) FROM singer T1 JOIN song T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name
Gold: SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name
Database: singer
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name, SUM(T2.Sales) FROM singer T1 JOIN song T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name
Gold: SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name
Database: singer
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name FROM singer T1 LEFT JOIN song T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Song_ID IS NULL
Gold: SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
Database: singer
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.Name FROM singer T1 LEFT JOIN song T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Song_ID IS NULL
Gold: SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
Database: singer
--------------------------------------------------------------------------------
PARSE FAILED: 't1'
Predicted: SELECT T1.feature_type_name FROM Ref_Feature_Types T1 JOIN Other_Available_Features T2 ON T1.feature_type_code = T2.feature_type_code WHERE T2.feature_name = 'AirCon'
Gold: SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  "AirCon"
Database: real_estate_properties
--------------------------------------------------------------------------------
PARSE FAILED: 
Predicted: SELECT Properties.property_name FROM Properties JOIN Ref_Property_Types ON Properties.property_type_code = Ref_Property_Types.property_type_code WHERE Ref_Property_Types.property_type_description IN ('House', 'Apartment') AND Properties.room_count > 1
Gold: SELECT property_name FROM Properties WHERE property_type_code  =  "House" UNION SELECT property_name FROM Properties WHERE property_type_code  =  "Apartment" AND room_count  >  1
Database: real_estate_properties
--------------------------------------------------------------------------------
PARSE FAILED: '('
Predicted: SELECT T1.Name, T1.Capacity FROM stadium AS T1 JOIN (SELECT Stadium_ID, COUNT(*) FROM concert WHERE Year > 2013 GROUP BY Stadium_ID ORDER BY COUNT(*) DESC LIMIT 1) AS T2 ON T1.Stadium_ID = T2.Stadium_ID
Gold: select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT T1.Name FROM stadium AS T1 LEFT JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.concert_ID IS NULL
Gold: SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: Error col: not
Predicted: SELECT Name FROM stadium WHERE NOT EXISTS (SELECT 1 FROM concert WHERE stadium.Stadium_ID = concert.Stadium_ID)
Gold: SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)
Database: concert_singer
--------------------------------------------------------------------------------
PARSE FAILED: 's'
Predicted: SELECT COUNT(hp.PetID) FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID WHERE s.Age > 20
Gold: SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 
Predicted: SELECT DISTINCT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType IN ('cat', 'dog')
Gold: SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 
Predicted: SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType IN ('cat', 'dog') GROUP BY T1.StuID, T1.Fname HAVING COUNT(DISTINCT T3.PetType) = 2
Gold: select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 
Predicted: SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType IN ('cat', 'dog') GROUP BY T1.StuID, T1.Fname HAVING COUNT(DISTINCT T3.PetType) = 2
Gold: SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT T1.Major, T1.Age FROM Student AS T1 LEFT JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID LEFT JOIN Pets AS T3 ON T2.PetID = T3.PetID AND T3.PetType = 'cat' WHERE T3.PetID IS NULL
Gold: SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
Database: pets_1
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT DISTINCT T1.Model FROM model_list AS T1 LEFT JOIN car_makers AS T2 ON T1.Maker = T2.Id LEFT JOIN car_names AS T3 ON T1.Model = T3.Model LEFT JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T2.FullName = 'General Motors' OR T4.Weight > 3500
Gold: SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: Default tables should not be None or empty
Predicted: SELECT COUNT(Country) FROM (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(Id) > 2)
Gold: select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'inner'
Predicted: SELECT COUNT(T2.CountryName) FROM car_makers AS T1 INNER JOIN countries AS T2 ON T1.Country = T2.CountryName GROUP BY T2.CountryName HAVING COUNT(T1.Id) > 2
Gold: select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT T1.CountryName FROM countries AS T1 LEFT JOIN car_makers AS T2 ON T1.CountryName = T2.Country WHERE T2.Country IS NULL
Gold: SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT T1.CountryName FROM countries AS T1 LEFT JOIN car_makers AS T2 ON T1.CountryName = T2.Country WHERE T2.Country IS NULL
Gold: SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'select' not found
Predicted: WITH EligibleMakers AS ( SELECT T1.Id, T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Maker = T2.Maker GROUP BY T1.Id, T1.Maker HAVING COUNT(T2.ModelId) >= 2 ) SELECT Id, Maker FROM EligibleMakers WHERE ( SELECT COUNT(*) FROM EligibleMakers ) > 3
Gold: select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: '('
Predicted: SELECT T1.Id, T1.Maker FROM car_makers AS T1 JOIN (SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(DISTINCT Model) >= 2) AS T2 ON T1.Maker = T2.Maker JOIN (SELECT Make FROM car_names GROUP BY Make HAVING COUNT(MakeId) > 3) AS T3 ON T1.Maker = T3.Make
Gold: SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;
Database: car_1
--------------------------------------------------------------------------------
PARSE FAILED: 'f'
Predicted: SELECT COUNT(*) FROM flights f JOIN airlines a ON f.Airline = a.Airline WHERE a.Airline = 'Jetblue Airways'
Gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = "JetBlue Airways"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'f'
Predicted: SELECT COUNT(*) FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE f.Airline = 'United Airlines' AND a.City = 'Aberdeen'
Gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  "Aberdeen" AND T3.Airline  =  "United Airlines"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'f'
Predicted: SELECT COUNT(*) FROM flights f JOIN airlines a ON f.Airline = a.uid JOIN airports ap ON f.DestAirport = ap.AirportCode WHERE a.Airline = 'United Airlines' AND ap.City = 'Aberdeen'
Gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  "Aberdeen" AND T3.Airline  =  "United Airlines"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'select' not found
Predicted: SELECT SourceAirport FROM ( SELECT SourceAirport FROM flights UNION ALL SELECT DestAirport FROM flights ) GROUP BY SourceAirport ORDER BY COUNT(*) DESC LIMIT 1
Gold: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: Error col: as
Predicted: SELECT AirportCode FROM (SELECT SourceAirport AS AirportCode FROM flights UNION ALL SELECT DestAirport AS AirportCode FROM flights) AS all_airports GROUP BY AirportCode ORDER BY COUNT(*) DESC LIMIT 1
Gold: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'select' not found
Predicted: SELECT SourceAirport FROM ( SELECT SourceAirport FROM flights UNION ALL SELECT DestAirport FROM flights ) AS all_airports GROUP BY SourceAirport ORDER BY COUNT(*) ASC LIMIT 1
Gold: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: Error col: as
Predicted: SELECT AirportCode FROM ( SELECT SourceAirport AS AirportCode FROM flights UNION ALL SELECT DestAirport AS AirportCode FROM flights ) AS all_airports GROUP BY AirportCode ORDER BY COUNT(*) ASC LIMIT 1
Gold: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 
Predicted: SELECT Airline FROM flights WHERE SourceAirport IN ('APG', 'CVO') GROUP BY Airline HAVING COUNT(DISTINCT SourceAirport) = 2
Gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 
Predicted: SELECT Airline FROM flights WHERE SourceAirport IN ('APG', 'CVO') GROUP BY Airline HAVING COUNT(DISTINCT SourceAirport) = 2
Gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'inner'
Predicted: SELECT T1.FlightNo FROM flights AS T1 INNER JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'
Gold: SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'f'
Predicted: SELECT COUNT(*) FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.City IN ('Aberdeen', 'Abilene')
Gold: SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  "Aberdeen" OR T2.city  =  "Abilene"
Database: flight_2
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT T1.Name FROM shop AS T1 LEFT JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID WHERE T2.Employee_ID IS NULL
Gold: SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)
Database: employee_hire_evaluation
--------------------------------------------------------------------------------
PARSE FAILED: 'd'
Predicted: SELECT COUNT(*) FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID JOIN Ref_Template_Types rtt ON t.Template_Type_Code = rtt.Template_Type_Code WHERE rtt.Template_Type_Code = 'PPT'
Gold: SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'd'
Predicted: SELECT COUNT(*) FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID JOIN Ref_Template_Types rtt ON t.Template_Type_Code = rtt.Template_Type_Code WHERE rtt.Template_Type_Code = 'PPT'
Gold: SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 't'
Predicted: SELECT T.Template_ID FROM Templates T LEFT JOIN Documents D ON T.Template_ID = D.Template_ID WHERE D.Template_ID IS NULL
Gold: SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 't'
Predicted: SELECT T.Template_ID FROM Templates T LEFT JOIN Documents D ON T.Template_ID = D.Template_ID WHERE D.Template_ID IS NULL
Gold: SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 
Predicted: SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT')
Gold: SELECT template_id FROM Templates WHERE template_type_code  =  "PP" OR template_type_code  =  "PPT"
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'rtt'
Predicted: SELECT rtt.Template_Type_Code, COUNT(t.Template_ID) FROM Ref_Template_Types rtt JOIN Templates t ON rtt.Template_Type_Code = t.Template_Type_Code GROUP BY rtt.Template_Type_Code
Gold: SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'rtt'
Predicted: SELECT rtt.Template_Type_Code FROM Ref_Template_Types rtt LEFT JOIN Templates t ON rtt.Template_Type_Code = t.Template_Type_Code GROUP BY rtt.Template_Type_Code HAVING COUNT(t.Template_ID) < 3
Gold: SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'd'
Predicted: SELECT D.Document_Name FROM Documents D JOIN Templates T ON D.Template_ID = T.Template_ID WHERE T.Template_Type_Code = 'BK'
Gold: SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  "BK"
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'rtt'
Predicted: SELECT rtt.Template_Type_Code FROM Ref_Template_Types rtt WHERE NOT EXISTS ( SELECT 1 FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID WHERE rtt.Template_Type_Code = t.Template_Type_Code )
Gold: SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: Error col: not
Predicted: SELECT Template_Type_Code FROM Ref_Template_Types WHERE NOT EXISTS (SELECT 1 FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID WHERE t.Template_Type_Code = Ref_Template_Types.Template_Type_Code)
Gold: SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 't'
Predicted: SELECT T.Template_ID FROM Templates T JOIN Ref_Template_Types RTT ON T.Template_Type_Code = RTT.Template_Type_Code WHERE RTT.Template_Type_Description = 'Presentation'
Gold: SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  "Presentation"
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'p'
Predicted: SELECT p.Paragraph_Text FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Customer reviews'
Gold: SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  "Customer reviews"
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'd'
Predicted: SELECT d.Document_ID, COUNT(p.Paragraph_ID) FROM Documents d LEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID ORDER BY d.Document_ID
Gold: SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'd'
Predicted: SELECT d.Document_ID, d.Document_Name, COUNT(p.Paragraph_ID) FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name
Gold: SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'd'
Predicted: SELECT d.Document_ID, d.Document_Name, COUNT(p.Paragraph_ID) FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name
Gold: SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 'd'
Predicted: SELECT d.Document_ID FROM Documents d LEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID ORDER BY COUNT(p.Paragraph_ID) ASC LIMIT 1
Gold: SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1
Database: cre_Doc_Template_Mgt
--------------------------------------------------------------------------------
PARSE FAILED: 
Predicted: SELECT Name FROM teacher WHERE Age IN (32, 33)
Gold: SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33
Database: course_teach
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT T1.Name FROM teacher AS T1 LEFT JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID WHERE T2.Teacher_ID IS NULL
Gold: SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)
Database: course_teach
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT T1.Name FROM teacher AS T1 LEFT JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID WHERE T2.Teacher_ID IS NULL
Gold: SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)
Database: course_teach
--------------------------------------------------------------------------------
PARSE FAILED: Error col: as
Predicted: SELECT T1.ID, T1.Name, T1.Level_of_membership FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID GROUP BY T1.ID, T1.Name, T1.Level_of_membership HAVING SUM(T2.Total_spent) = ( SELECT MAX(total_spent_per_visitor) FROM ( SELECT SUM(Total_spent) AS total_spent_per_visitor FROM visit GROUP BY visitor_ID ) AS subquery_total_spent )
Gold: SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1
Database: museum_visit
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT T1.Name FROM museum AS T1 LEFT JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID WHERE T2.Museum_ID IS NULL
Gold: SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)
Database: museum_visit
--------------------------------------------------------------------------------
PARSE FAILED: 
Predicted: SELECT winner_name FROM matches WHERE year IN (2013, 2016) GROUP BY winner_name HAVING COUNT(DISTINCT year) = 2
Gold: SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 
Predicted: SELECT winner_name FROM matches WHERE year IN (2013, 2016) GROUP BY winner_name HAVING COUNT(DISTINCT year) = 2
Gold: SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: '('
Predicted: SELECT T1.country_code, T1.first_name FROM players AS T1 JOIN (SELECT winner_id FROM matches WHERE tourney_name = 'WTA Championships' INTERSECT SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open') AS T2 ON T1.player_id = T2.winner_id
Gold: SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: Error col: concat
Predicted: SELECT CONCAT(first_name, ' ', last_name) FROM players ORDER BY birth_date
Gold: SELECT first_name ,  last_name FROM players ORDER BY birth_date
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: Error col: ||
Predicted: SELECT first_name || ' ' || last_name FROM players WHERE hand = 'L' ORDER BY birth_date
Gold: SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: '('
Predicted: SELECT T1.first_name, T1.country_code, T1.birth_date FROM players AS T1 JOIN ( SELECT winner_id, SUM(winner_rank_points) AS total_points FROM matches GROUP BY winner_id ORDER BY total_points DESC LIMIT 1 ) AS T2 ON T1.player_id = T2.winner_id
Gold: SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1
Database: wta_1
--------------------------------------------------------------------------------
PARSE FAILED: 's'
Predicted: SELECT d.killed, d.injured FROM ship s JOIN death d ON s.id = d.caused_by_ship_id WHERE s.tonnage = 't'
Gold: SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'
Database: battle_death
--------------------------------------------------------------------------------
PARSE FAILED: 'b'
Predicted: SELECT DISTINCT b.id, b.name FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.ship_type = 'Brig'
Gold: SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'
Database: battle_death
--------------------------------------------------------------------------------
PARSE FAILED: Error col: not
Predicted: SELECT COUNT(*) FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = 225 AND lost_in_battle IS NOT NULL)
Gold: SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );
Database: battle_death
--------------------------------------------------------------------------------
PARSE FAILED: Error col: not
Predicted: SELECT T1.name, T1.result, T1.bulgarian_commander FROM battle AS T1 WHERE NOT EXISTS ( SELECT 1 FROM ship AS T2 WHERE T2.lost_in_battle = T1.id AND T2.location = 'English Channel' )
Gold: SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'
Database: battle_death
--------------------------------------------------------------------------------
PARSE FAILED: 'dp'
Predicted: SELECT COUNT(*) FROM Degree_Programs dp JOIN Departments d ON dp.department_id = d.department_id WHERE d.department_name = 'Engineering'
Gold: SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'dp'
Predicted: SELECT COUNT(*) FROM Degree_Programs dp JOIN Departments d ON dp.department_id = d.department_id WHERE d.department_name = 'Engineering'
Gold: SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT C.course_name, C.course_id FROM Courses AS C LEFT JOIN Sections AS S ON C.course_id = S.course_id GROUP BY C.course_id, C.course_name HAVING COUNT(S.section_id) < 2
Gold: SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'inner'
Predicted: SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 INNER JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id INNER JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name LIKE '%Bachelors%'
Gold: SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: Error col: as
Predicted: SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(se.student_enrolment_id) AS num_enrollments FROM Students AS s JOIN Student_Enrolment AS se ON s.student_id = se.student_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name ORDER BY num_enrollments DESC LIMIT 1
Gold: SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 's'
Predicted: SELECT s.first_name, s.middle_name, s.last_name, s.student_id, COUNT(se.student_enrolment_id) AS number_of_enrollments FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name ORDER BY number_of_enrollments DESC LIMIT 1
Gold: SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 's'
Predicted: SELECT s.semester_name FROM Semesters s LEFT JOIN Student_Enrolment se ON s.semester_id = se.semester_id WHERE se.semester_id IS NULL
Gold: SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'c'
Predicted: SELECT DISTINCT C.course_name FROM Courses C JOIN Student_Enrolment_Courses SEC ON C.course_id = SEC.course_id
Gold: SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'inner'
Predicted: SELECT T1.course_name FROM Courses AS T1 INNER JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id, T1.course_name ORDER BY COUNT(T2.student_course_id) DESC LIMIT 1
Gold: SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'c'
Predicted: SELECT C.course_name FROM Courses C JOIN Student_Enrolment_Courses SEC ON C.course_id = SEC.course_id GROUP BY C.course_id, C.course_name ORDER BY COUNT(SEC.student_course_id) DESC LIMIT 1
Gold: SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: Error col: null
Predicted: SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id LEFT JOIN Student_Enrolment AS T3 ON T1.student_id = T3.student_id WHERE T2.state_province_county = 'North Carolina' AND T3.student_enrolment_id IS NULL
Gold: SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 's'
Predicted: SELECT S.last_name FROM Students S LEFT JOIN Addresses A_current ON S.current_address_id = A_current.address_id LEFT JOIN Addresses A_permanent ON S.permanent_address_id = A_permanent.address_id WHERE (A_current.state_province_county = 'North Carolina' OR A_permanent.state_province_county = 'North Carolina') AND NOT EXISTS ( SELECT 1 FROM Student_Enrolment SE WHERE SE.student_id = S.student_id )
Gold: SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: Error col: not
Predicted: SELECT first_name, middle_name, last_name FROM Students WHERE date_left IS NOT NULL ORDER BY date_left ASC LIMIT 1
Gold: SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: '('
Predicted: SELECT A.address_id, A.line_1, A.line_2 FROM Addresses AS A JOIN (SELECT current_address_id, COUNT(student_id) AS student_count FROM Students WHERE current_address_id IS NOT NULL GROUP BY current_address_id ORDER BY student_count DESC LIMIT 1) AS TopAddress ON A.address_id = TopAddress.current_address_id
Gold: SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: Error col: year
Predicted: SELECT AVG(YEAR(transcript_date)) FROM Transcripts
Gold: SELECT avg(transcript_date) FROM Transcripts
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 'inner'
Predicted: SELECT T2.student_enrolment_id, COUNT(T1.transcript_id) AS transcript_count FROM Transcript_Contents AS T1 INNER JOIN Student_Enrolment_Courses AS T2 ON T1.student_course_id = T2.student_course_id GROUP BY T2.student_enrolment_id, T2.student_course_id ORDER BY transcript_count DESC LIMIT 1
Gold: SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: '('
Predicted: SELECT T.transcript_date, T.transcript_id FROM Transcripts AS T JOIN (SELECT transcript_id, COUNT(student_course_id) AS result_count FROM Transcript_Contents GROUP BY transcript_id ORDER BY result_count ASC LIMIT 1) AS SubQuery ON T.transcript_id = SubQuery.transcript_id
Gold: SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: 's'
Predicted: SELECT S.semester_name FROM Semesters S JOIN Student_Enrolment SE ON S.semester_id = SE.semester_id JOIN Degree_Programs DP ON SE.degree_program_id = DP.degree_program_id GROUP BY S.semester_id, S.semester_name HAVING SUM(CASE WHEN DP.degree_summary_name LIKE '%Master%' THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN DP.degree_summary_name LIKE '%Bachelor%' THEN 1 ELSE 0 END) > 0
Gold: SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: Error col: case
Predicted: SELECT s.semester_id FROM Semesters AS s JOIN Student_Enrolment AS se ON s.semester_id = se.semester_id JOIN Degree_Programs AS dp ON se.degree_program_id = dp.degree_program_id GROUP BY s.semester_id HAVING SUM(CASE WHEN dp.degree_summary_name LIKE '%Masters%' THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN dp.degree_summary_name LIKE '%Bachelors%' THEN 1 ELSE 0 END) > 0
Gold: SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'
Database: student_transcripts_tracking
--------------------------------------------------------------------------------
PARSE FAILED: Error col: as
Predicted: SELECT Language, COUNT(*) FROM TV_Channel GROUP BY Language HAVING COUNT(*) = (SELECT MIN(channel_count) FROM (SELECT COUNT(*) AS channel_count FROM TV_Channel GROUP BY Language) AS subquery_alias)
Gold: SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 
Predicted: SELECT T1.series_name, T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by IN ('Ben Jones', 'Michael Chang') GROUP BY T1.id, T1.series_name, T1.Country HAVING COUNT(DISTINCT T2.Directed_by) = 2
Gold: SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'
Database: tvshow
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT T1.Name FROM people AS T1 LEFT JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.People_ID IS NULL
Gold: SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
Database: poker_player
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT T1.Name FROM people AS T1 LEFT JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.People_ID IS NULL
Gold: SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
Database: poker_player
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT COUNT(T1.contestant_number) FROM CONTESTANTS AS T1 LEFT JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.contestant_number IS NULL
Gold: SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )
Database: voter_1
--------------------------------------------------------------------------------
PARSE FAILED: 
Predicted: SELECT T1.area_code FROM AREA_CODE_STATE AS T1 JOIN VOTES AS T2 ON T1.state = T2.state JOIN CONTESTANTS AS T3 ON T2.contestant_number = T3.contestant_number WHERE T3.contestant_name IN ('Tabatha Gehling', 'Kelly Clauss') GROUP BY T1.area_code HAVING COUNT(DISTINCT T3.contestant_name) = 2
Gold: SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'
Database: voter_1
--------------------------------------------------------------------------------
PARSE FAILED: 
Predicted: SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe')
Gold: SELECT sum(SurfaceArea) FROM country WHERE Continent  =  "Asia" OR Continent  =  "Europe"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: '('
Predicted: SELECT T1.Name FROM country AS T1 JOIN (SELECT CountryCode, COUNT(*) AS language_count FROM countrylanguage GROUP BY CountryCode ORDER BY language_count DESC LIMIT 1) AS T2 ON T1.Code = T2.CountryCode
Gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 
Predicted: SELECT COUNT(*) FROM (SELECT CountryCode FROM countrylanguage WHERE Language IN ('English', 'Dutch') GROUP BY CountryCode HAVING COUNT(DISTINCT Language) = 2)
Gold: SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch")
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 
Predicted: SELECT COUNT(CountryCode) FROM (SELECT CountryCode FROM countrylanguage WHERE Language IN ('English', 'Dutch') GROUP BY CountryCode HAVING COUNT(DISTINCT Language) = 2)
Gold: SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch")
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'c'
Predicted: SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'French') GROUP BY c.Code, c.Name HAVING COUNT(DISTINCT cl.Language) = 2
Gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 
Predicted: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language IN ('English', 'French') GROUP BY T1.Code HAVING COUNT(DISTINCT T2.Language) = 2
Gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 
Predicted: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.IsOfficial = 'T' AND T2.Language IN ('English', 'French') GROUP BY T1.Code, T1.Name HAVING COUNT(DISTINCT T2.Language) = 2
Gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French" AND T2.IsOfficial  =  "T"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 
Predicted: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language IN ('English', 'French') AND T2.IsOfficial = 'T' GROUP BY T1.Code HAVING COUNT(DISTINCT T2.Language) = 2
Gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French" AND T2.IsOfficial  =  "T"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 
Predicted: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.IsOfficial = 'T' AND (T2.Language = 'English' OR T2.Language = 'Dutch')
Gold: select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  "english" and isofficial  =  "t" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  "dutch" and isofficial  =  "t"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 
Predicted: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.IsOfficial = 'T' AND (T2.Language = 'English' OR T2.Language = 'Dutch')
Gold: SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND IsOfficial  =  "T" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch" AND IsOfficial  =  "T"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'c'
Predicted: SELECT cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.Continent = 'Asia' GROUP BY cl.Language ORDER BY SUM(cl.Percentage) DESC LIMIT 1
Gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  "Asia" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'inner'
Predicted: SELECT T1.Name FROM city AS T1 INNER JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = 'English' ORDER BY T1.Population DESC LIMIT 1
Gold: SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  "English" ORDER BY T1.Population DESC LIMIT 1
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT AVG(T1.LifeExpectancy) FROM country AS T1 LEFT JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode AND T2.Language = 'English' AND T2.IsOfficial = 'T' WHERE T2.CountryCode IS NULL
Gold: SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T")
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT AVG(T1.LifeExpectancy) FROM country AS T1 LEFT JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode AND T2.Language = 'English' AND T2.IsOfficial = 'T' WHERE T2.CountryCode IS NULL
Gold: SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T")
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'c'
Predicted: SELECT SUM(c.Population) FROM country c LEFT JOIN countrylanguage cl ON c.Code = cl.CountryCode AND cl.Language = 'English' WHERE cl.CountryCode IS NULL
Gold: SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English")
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: Error col: any
Predicted: SELECT Name FROM country WHERE Continent = 'Africa' AND Population < ANY (SELECT Population FROM country WHERE Continent = 'Asia')
Gold: SELECT Name FROM country WHERE Continent  =  "Africa"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  "Asia")
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: Error col: not
Predicted: SELECT T1.Code FROM country AS T1 WHERE T1.GovernmentForm != 'Republic' AND NOT EXISTS (SELECT 1 FROM countrylanguage AS T2 WHERE T2.CountryCode = T1.Code AND T2.Language = 'English')
Gold: SELECT Code FROM country WHERE GovernmentForm != "Republic" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT T1.Code FROM country AS T1 LEFT JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode AND T2.Language = 'English' WHERE T1.GovernmentForm NOT LIKE '%Republic%' AND T2.CountryCode IS NULL
Gold: SELECT Code FROM country WHERE GovernmentForm != "Republic" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'inner'
Predicted: SELECT T1.Name FROM city AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code LEFT JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode AND T3.Language = 'English' AND T3.IsOfficial = 'T' WHERE T2.Continent = 'Europe' AND T3.CountryCode IS NULL
Gold: SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'c'
Predicted: SELECT c.Name FROM city c JOIN country co ON c.CountryCode = co.Code LEFT JOIN countrylanguage cl ON c.CountryCode = cl.CountryCode AND cl.Language = 'English' AND cl.IsOfficial = 'T' WHERE co.Continent = 'Europe' AND cl.CountryCode IS NULL
Gold: SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'select' not found
Predicted: WITH RankedLanguages AS ( SELECT CountryCode, Language, Percentage, ROW_NUMBER() OVER (PARTITION BY CountryCode ORDER BY Percentage DESC) AS rn FROM countrylanguage ) SELECT c.Name, rl.Language, rl.Percentage FROM country c JOIN RankedLanguages rl ON c.Code = rl.CountryCode WHERE rl.rn = 1
Gold: SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: '('
Predicted: SELECT T1.CountryCode, T1.Language FROM countrylanguage AS T1 JOIN ( SELECT CountryCode, MAX(Percentage) AS MaxPercentage FROM countrylanguage GROUP BY CountryCode ) AS T2 ON T1.CountryCode = T2.CountryCode AND T1.Percentage = T2.MaxPercentage
Gold: SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'select' not found
Predicted: WITH CountryTopLanguage AS ( SELECT CountryCode, Language, Percentage, ROW_NUMBER() OVER (PARTITION BY CountryCode ORDER BY Percentage DESC) AS rn FROM countrylanguage ) SELECT COUNT(DISTINCT CountryCode) FROM CountryTopLanguage WHERE rn = 1 AND Language = 'Spanish'
Gold: SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
Database: world_1
--------------------------------------------------------------------------------
PARSE FAILED: 'o'
Predicted: SELECT o.Orchestra FROM orchestra o LEFT JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID WHERE p.Performance_ID IS NULL
Gold: SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
Database: orchestra
--------------------------------------------------------------------------------
PARSE FAILED: 'h'
Predicted: SELECT H.name, COUNT(F.friend_id) FROM Highschooler H LEFT JOIN Friend F ON H.ID = F.student_id GROUP BY H.ID, H.name
Gold: SELECT student_id ,  count(*) FROM Friend GROUP BY student_id
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT H.name, COUNT(F.friend_id) FROM Highschooler AS H LEFT JOIN Friend AS F ON H.ID = F.student_id GROUP BY H.ID, H.name
Gold: SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT T1.name, COUNT(T2.friend_id) FROM Highschooler AS T1 LEFT JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID, T1.name
Gold: SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'h'
Predicted: SELECT H.name FROM Highschooler H JOIN Friend F ON H.ID = F.student_id GROUP BY H.ID, H.name HAVING COUNT(F.friend_id) >= 3
Gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'h'
Predicted: SELECT COUNT(*) FROM Highschooler h JOIN Friend f ON h.ID = f.student_id WHERE h.name = 'Kyle'
Gold: SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'h'
Predicted: SELECT COUNT(*) FROM Highschooler H JOIN Friend F ON H.ID = F.student_id WHERE H.name = 'Kyle'
Gold: SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'h'
Predicted: SELECT H.name FROM Highschooler H LEFT JOIN Friend F ON H.ID = F.student_id WHERE F.student_id IS NULL
Gold: SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'h'
Predicted: SELECT H.name FROM Highschooler H JOIN Likes L ON H.ID = L.liked_id GROUP BY H.ID, H.name ORDER BY COUNT(L.liked_id) DESC LIMIT 1
Gold: SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'l'
Predicted: SELECT COUNT(*) FROM Likes l JOIN Highschooler h ON l.liked_id = h.ID WHERE h.name = 'Kyle'
Gold: SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'h'
Predicted: SELECT COUNT(*) FROM Highschooler H JOIN Likes L ON H.ID = L.student_id WHERE H.name = 'Kyle'
Gold: SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"
Database: network_1
--------------------------------------------------------------------------------
PARSE FAILED: 'd'
Predicted: SELECT AVG(D.age) FROM Dogs D JOIN Treatments T ON D.dog_id = T.dog_id
Gold: SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'd'
Predicted: SELECT AVG(d.age) FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id
Gold: SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'p'
Predicted: SELECT P.professional_id, P.last_name, P.cell_number FROM Professionals P LEFT JOIN Treatments T ON P.professional_id = T.professional_id GROUP BY P.professional_id, P.last_name, P.cell_number HAVING P.state = 'IN' OR COUNT(T.treatment_id) > 2
Gold: SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'p'
Predicted: SELECT P.professional_id, P.last_name, P.cell_number FROM Professionals P LEFT JOIN ( SELECT professional_id, COUNT(treatment_id) AS treatment_count FROM Treatments GROUP BY professional_id ) AS ProfessionalTreatmentCounts ON P.professional_id = ProfessionalTreatmentCounts.professional_id WHERE P.state = 'IN' OR ProfessionalTreatmentCounts.treatment_count > 2
Gold: SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT T1.name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id WHERE T2.owner_id IN (SELECT T3.owner_id FROM Owners AS T3 LEFT JOIN Dogs AS T4 ON T3.owner_id = T4.owner_id LEFT JOIN Treatments AS T5 ON T4.dog_id = T5.dog_id GROUP BY T3.owner_id HAVING COALESCE(SUM(T5.cost_of_treatment), 0) <= 1000)
Gold: select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'p'
Predicted: SELECT p.professional_id, p.role_code, p.email_address FROM Professionals p LEFT JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.professional_id IS NULL
Gold: SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'p'
Predicted: SELECT p.professional_id, p.role_code, p.email_address FROM Professionals p LEFT JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.treatment_id IS NULL
Gold: SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'p'
Predicted: SELECT P.professional_id, P.role_code, P.first_name FROM Professionals P JOIN Treatments T ON P.professional_id = T.professional_id GROUP BY P.professional_id, P.role_code, P.first_name HAVING COUNT(T.treatment_id) >= 2
Gold: SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'p'
Predicted: SELECT p.professional_id, p.role_code, p.first_name FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.role_code, p.first_name HAVING COUNT(t.treatment_id) >= 2
Gold: SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 't'
Predicted: SELECT TT.treatment_type_description FROM Treatments T JOIN Treatment_Types TT ON T.treatment_type_code = TT.treatment_type_code GROUP BY TT.treatment_type_code, TT.treatment_type_description ORDER BY SUM(T.cost_of_treatment) ASC LIMIT 1
Gold: SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'p'
Predicted: SELECT P.professional_id, P.cell_number FROM Professionals P JOIN Treatments T ON P.professional_id = T.professional_id GROUP BY P.professional_id, P.cell_number HAVING COUNT(DISTINCT T.treatment_type_code) >= 2
Gold: SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'p'
Predicted: SELECT p.professional_id, p.cell_number FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.cell_number HAVING COUNT(DISTINCT t.treatment_type_code) >= 2
Gold: SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 't'
Predicted: SELECT T.date_of_treatment, P.first_name FROM Treatments T JOIN Professionals P ON T.professional_id = P.professional_id
Gold: SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 't'
Predicted: SELECT T.cost_of_treatment, TT.treatment_type_description FROM Treatments T JOIN Treatment_Types TT ON T.treatment_type_code = TT.treatment_type_code
Gold: SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'inner'
Predicted: SELECT T1.first_name, T1.last_name, T3.size_description FROM Owners AS T1 INNER JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id INNER JOIN Sizes AS T3 ON T2.size_code = T3.size_code
Gold: SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'd'
Predicted: SELECT d.name, t.date_of_treatment FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id WHERE d.breed_code = (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) ASC LIMIT 1)
Gold: SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'd'
Predicted: SELECT DISTINCT D.date_arrived, D.date_departed FROM Dogs D JOIN Treatments T ON D.dog_id = T.dog_id
Gold: SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'o'
Predicted: SELECT O.last_name FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id ORDER BY D.age ASC LIMIT 1
Gold: SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'd'
Predicted: SELECT COUNT(*) FROM Dogs d LEFT JOIN Treatments t ON d.dog_id = t.dog_id WHERE t.treatment_id IS NULL
Gold: SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'd'
Predicted: SELECT COUNT(*) FROM Dogs D LEFT JOIN Treatments T ON D.dog_id = T.dog_id WHERE T.treatment_id IS NULL
Gold: select count(*) from dogs where dog_id not in ( select dog_id from treatments )
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: Error col: null
Predicted: SELECT COUNT(owner_id) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE date_departed IS NULL)
Gold: SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: Error col: not
Predicted: SELECT COUNT(*) FROM Owners WHERE NOT EXISTS (SELECT 1 FROM Dogs WHERE Dogs.owner_id = Owners.owner_id)
Gold: SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT COUNT(P.professional_id) FROM Professionals AS P LEFT JOIN Treatments AS T ON P.professional_id = T.professional_id WHERE T.treatment_id IS NULL
Gold: SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'cross'
Predicted: SELECT B.breed_name, S.size_description FROM Breeds AS B CROSS JOIN Sizes AS S
Gold: SELECT DISTINCT breed_code ,  size_code FROM dogs
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'p'
Predicted: SELECT p.first_name, tt.treatment_type_description FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code
Gold: SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'p'
Predicted: SELECT p.first_name, tt.treatment_type_description FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code
Gold: SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code
Database: dog_kennels
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT T1.Name FROM singer AS T1 LEFT JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Song_ID IS NULL
Gold: SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
Database: singer
--------------------------------------------------------------------------------
PARSE FAILED: 'left'
Predicted: SELECT T1.Name FROM singer AS T1 LEFT JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Song_ID IS NULL
Gold: SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
Database: singer
--------------------------------------------------------------------------------
PARSE FAILED: 
Predicted: SELECT T1.property_name FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code = T2.property_type_code WHERE T2.property_type_description IN ('House', 'Apartment') AND T1.room_count > 1
Gold: SELECT property_name FROM Properties WHERE property_type_code  =  "House" UNION SELECT property_name FROM Properties WHERE property_type_code  =  "Apartment" AND room_count  >  1
Database: real_estate_properties
--------------------------------------------------------------------------------
